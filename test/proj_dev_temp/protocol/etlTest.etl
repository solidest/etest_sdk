

    //注释是这样的
    /*
        这是多行注释///
        *** 多行注释
    */
    protocol prot_1 {
        segment seg_1 { parser: 'int32' }
        segment seg_2 { parser: 'int16' }
    }

    protocol prot_2 {
        segment seg_1[8] { parser: 'uint1', autovalue: 1 }
        segment seg_2[3] { parser: 'float <' }
        segment seg__ { }
        segment seg_3 { parser: 'double' }
    }

    protocol prot_str {
        segment len { parser: 'uint8' }
        segment str1 { parser: 'string', length: 4 }
        segment str2 { parser: 'string', endwith: '$' }
        segment str3 { parser: 'string' }
    }

    protocol prot_point {
        segment token { parser: 'uint32' }
        segments point {
            segment x { parser: 'float' }
            segment y { parser: 'float' }
        }
    }

    protocol prot_oneof {
        segment type1 { parser: 'int8' }
        segment type2 { parser: 'int8', autovalue: this.type1*2 }
        oneof(this.type1==2) {
            segment x { parser: 'float' }
            segment y { parser: 'float' }
        }
        oneof(this.type1==3) {
            segment x { parser: 'float' }
            segment y { parser: 'float' }
            segment z { parser: 'float' }
        }
        segment aa {  }
        oneof(this.type2==1) {
            segment x1 { parser: 'float', autovalue: 9.8 }
        }
        oneof(this.type2==2) {
            segment x2 { parser: 'float' }
        }
        segment test { parser: 'float', autovalue: 2*(1+this.type1)}
    }

    protocol prot_debug {
        segment seg_14 { parser: 'uint14', autovalue: 2999}
        segment seg_2 { parser: 'uint2'}
    }

    protocol prot_byte_size {
        segment header { parser: 'int8', autovalue: 0x55AA}
        segment seg_len { parser: 'int32', autovalue: ByteSize(this.seg_str) }
        segment seg_str { parser: 'string' }
    }

     protocol prot_12 {
        segment seg_1 { parser: 'uint1', autovalue: 0 }
        segment seg_2 { parser: 'uint2', autovalue: 0 }

        segment seg_3 { parser: 'uint3', autovalue: 0 }
        segment seg_4 { parser: 'uint4', autovalue: 0 }

        segment seg_5 { parser: 'uint5', autovalue: 0 }
        segment seg_6 { parser: 'uint6', autovalue: 0 }

        segment seg_7 { parser: 'uint7', autovalue: 0 }

        segment seg_8 { parser: 'uint8', autovalue: 0 }
        segment seg_9 { parser: 'uint9', autovalue: 0 }

        segment seg_10 { parser: 'uint10', autovalue: 0 }
        segment seg_11 { parser: 'uint11', autovalue: 0 }

        segment seg_12 { parser: 'uint12', autovalue: 0 }
        segment seg_13 { parser: 'uint13', autovalue: 0 }

        segment seg_14 { parser: 'uint14', autovalue: 0}
        segment seg_15 { parser: 'uint15', autovalue: 0 }
        segment seg_16 { parser: 'uint16', autovalue: 0 }
        segment seg_17 { parser: 'uint17', autovalue: 0 }
        segment seg_18 { parser: 'uint18', autovalue: 0 }

        segment seg_19 { parser: 'uint19', autovalue: 0 }
        segment seg_20 { parser: 'uint20', autovalue: 0 }

        segment seg_21 { parser: 'uint21', autovalue: 0 }
        segment seg_22 { parser: 'uint22', autovalue: 0 }

        segment seg_23 { parser: 'uint23', autovalue: 0 }

        segment seg_24 { parser: 'uint24', autovalue: 0 }
        segment seg_25 { parser: 'uint25', autovalue: 0 }

        segment seg_26 { parser: 'uint26', autovalue: 0 }
        segment seg_27 { parser: 'uint27', autovalue: 0 }

        segment seg_28 { parser: 'uint28', autovalue: 0 }
        segment seg_29 { parser: 'uint29', autovalue: 0 }

        segment seg_30 { parser: 'uint30', autovalue: 0 }
        segment seg_31 { parser: 'uint31', autovalue: 0 }
        segment seg_32 { parser: 'uint32', autovalue: 0 }
    }

