

//注释是这样的
/*
    这是多行注释///
    *** 多行注释
*/

device dev_0 {

    udp_server srv_1 { ip: '127.0.0.1', port: 3000 }
    tcp_server srv_2 { ip: '127.0.0.1', port: 3000 }

    udp_client clt_1 { ip: '127.0.0.1' }
    tcp_client clt_2 { ip: '127.0.0.1' }

    serial_ttl s1 {  }
    serial_232 s2 { baudrate: 9600 }
    serial_422 s3 { baudrate: 9600 }
    serial_485 s4 { baudrate: 9600 }
    serial_485 s5 { baudrate: 9600 }
    serial_usb s6 { baudrate: 9600 }

    di di1 { minv: 3, maxv: 5 }
    do do1 { minv: 3, maxv: 5 }

    da da1 { ratio: 8 }
    ad ad1 { ratio: 16 }
}

protocol protocol_1 {
    segment str { parser: 'string', length: 3 }
}
protocol prot_1 {
    segment seg_1 { parser: 'int32' }
    segment seg_2 { parser: 'int16' }
}

protocol prot_2 {
    segment seg_1[8] { parser: 'uint1', autovalue: 1 }
    segment seg_2[3] { parser: 'float <' }
    segment seg__ { }
    segment seg_3 { parser: 'double' }
}

protocol prot_str {
    segment len { parser: 'uint8' }
    segment str1 { parser: 'string', length: 4 }
    segment str2 { parser: 'string', endwith: '$' }
    segment str3 { parser: 'string' }
    segment seg_5 { parser: 'string', length: 4 ,endwith: '@'}
}


device dev_2 {

    tcp_server srv_2 { ip: '127.0.0.1', port: 3000 }
    udp_client clt_1 { ip: '127.0.0.1' }
    serial_ttl s1 { baudrate: 9600 }

}

//拓扑结构
topology topo_1 {

    //接口之间的连接
    linking: {
        bus_1: [dev_1.srv_1, dev2.srv_1, dev_2.clt_1, dev_3.clt_2, dev_4.clt_1] ,   //总线
        link_1: [dev_3.srv_1, dev_2.clt_1] , //点到点连接
        link_2: [dev_4.srv_1, dev_1.clt_1],
        bus_2: [dev_5.s1, dev_6.s2, dev_2.s3], //总线
        link_3: [ ],
        link_4: [dev_5.ad1, dev_6.da1],  
    }

    mapping: {
        
    }

    //设备映射
    mapping: {
        uut: [],   //被测硬件单元
        uut: [devs, dve],   //被测硬件单元
        etest: [dev_3, dev_4], //软设备
    }


    //接口绑定
    binding: {
        dev_1.s1: 'com1',
        dev_2.s1: 'com2@192.168.1.5',
        dev_2.can_1: 'can_a:1@192.168.1.5',
    }
}

protocol prot_point {
    segment token { parser: 'uint32' }
    segments point {
        segment x { parser: 'float' }
        segment y { parser: 'float' }
    }
}

protocol prot_check {
    segment seg_1 { parser: 'float !', autovalue:0}
    segment seg_2 { parser: 'double !', autovalue:0}
    segment seg_3 { parser: 'int32 !', autovalue:0}
    segment seg_4 { parser: 'uint32 !', autovalue:0}
    segment seg_5 { parser: 'float &', autovalue:0}
    segment seg_6 { parser: 'double &', autovalue:0}
    segment seg_7 { parser: 'int32 &', autovalue:0}
    segment seg_8 { parser: 'uint32 &', autovalue:0}
    segment seg_check1 { parser: 'uint32', autovalue: CheckCode(SUM_8, this.seg_3, this.seg_5)}
    segment seg_check2 { parser: 'uint32', autovalue: CheckCode(CRC_64, this.seg_6)}
    segment seg_check3 { parser: 'uint32', autovalue: CheckCode([0x8877, 0x9988, 0x0000, true, false])}
}

protocol prot_oneof {
    segment type1 { parser: 'int8' }
    segment type2 { parser: 'int8', autovalue: this.type1*2 }
    oneof(this.type1==2) {
        segment x { parser: 'float' }
        segment y { parser: 'float' }
    }
    oneof(this.type1==3) {
        segment x { parser: 'float' }
        segment y { parser: 'float' }
        segment z { parser: 'float' }
    }
    segment aa {  }
    oneof(this.type2==1) {
        segment x1 { parser: 'float', autovalue: 9.8 }
    }
    oneof(this.type2==2) {
        segment x2 { parser: 'float' }
    }
    segment test { parser: 'float', autovalue: 2*(1+this.type1)}
}

protocol prot_debug {
    segment seg_14 { parser: 'uint14', autovalue: 2999}
    segment seg_2 { parser: 'uint2'}
}

protocol prot_byte_size {
    segment header { parser: 'int8', autovalue: 0x55AA}
    segment str_len { parser: 'int32', autovalue: ByteSize(this.seg_str) }
    segment arr_len { parser: 'int32', autovalue: ByteSize(this.seg_ints) }
    segment seg_str { parser: 'string' }
    segment seg_ints[3] { parser: 'int16' }
}

    protocol prot_14 {
    segment seg_1 { parser: 'float !',autovalue:0}
    segment seg_2 { parser: 'double !',autovalue:0}
    segment seg_3 { parser: 'int32 !',autovalue:0}
    segment seg_4 { parser: 'uint32 !',autovalue:0}
    segment seg_5 { parser: 'float &',autovalue:0}
    segment seg_6 { parser: 'double &',autovalue:0}
    segment seg_7 { parser: 'int32 &',autovalue:0}
    segment seg_8 { parser: 'uint32 &',autovalue:0}
    segment seg_9 { parser: 'float >',autovalue:0}
    segment seg_10 { parser: 'double >',autovalue:0}
    segment seg_11{ parser: 'int32 >',autovalue:0}
    segment seg_12 { parser: 'uint32 >',autovalue:0}
    segment seg_13 { parser: 'float <',autovalue:0}
    segment seg_14 { parser: 'double <',autovalue:0}
    segment seg_15 { parser: 'int32 <',autovalue:0}
    segment seg_16 { parser: 'uint32 <',autovalue:0}
}

protocol prot_15 {
    segment seg_1 { parser: 'float ! >',autovalue:0}
    segment seg_2 { parser: 'double ! >',autovalue:0}
    segment seg_3 { parser: 'int32 ! >',autovalue:0}
    segment seg_4 { parser: 'uint32 ! >',autovalue:0}
    segment seg_5 { parser: 'float & >',autovalue:0}
    segment seg_6 { parser: 'double & >',autovalue:0}
    segment seg_7 { parser: 'int32 & >',autovalue:0}
    segment seg_8 { parser: 'uint32 & >',autovalue:0}
    segment seg_9 { parser: 'float ! <',autovalue:0}
    segment seg_10 { parser: 'double ! <',autovalue:0}
    segment seg_11{ parser: 'int32 ! <',autovalue:0}
    segment seg_12 { parser: 'uint32 ! <',autovalue:0}
    segment seg_13 { parser: 'float & <',autovalue:0}
    segment seg_14 { parser: 'double & <',autovalue:0}
    segment seg_15 { parser: 'int32 & <',autovalue:0}
    segment seg_16 { parser: 'uint32 & <',autovalue:0}

    segment seg_17 { parser: 'int26 &',autovalue:0}
    segment seg_18 { parser: 'uint6 !',autovalue:0}

    segment seg_19 { parser: 'int1 !',autovalue:0}
    segment seg_20 { parser: 'uint31 &',autovalue:0}
}

    protocol prot_12 {
    segment seg_1 { parser: 'uint1', autovalue: 0 }
    segment seg_2 { parser: 'uint2', autovalue: 0 }

    segment seg_3 { parser: 'uint3', autovalue: 0 }
    segment seg_4 { parser: 'uint4', autovalue: 0 }

    segment seg_5 { parser: 'uint5', autovalue: 0 }
    segment seg_6 { parser: 'uint6', autovalue: 0 }

    segment seg_7 { parser: 'uint7', autovalue: 0 }

    segment seg_8 { parser: 'uint8', autovalue: 0 }
    segment seg_9 { parser: 'uint9', autovalue: 0 }

    segment seg_10 { parser: 'uint10', autovalue: 0 }
    segment seg_11 { parser: 'uint11', autovalue: 0 }

    segment seg_12 { parser: 'uint12', autovalue: 0 }
    segment seg_13 { parser: 'uint13', autovalue: 0 }

    segment seg_14 { parser: 'uint14', autovalue: 0}
    segment seg_15 { parser: 'uint15', autovalue: 0 }
    segment seg_16 { parser: 'uint16', autovalue: 0 }
    segment seg_17 { parser: 'uint17', autovalue: 0 }
    segment seg_18 { parser: 'uint18', autovalue: 0 }

    segment seg_19 { parser: 'uint19', autovalue: 0 }
    segment seg_20 { parser: 'uint20', autovalue: 0 }

    segment seg_21 { parser: 'uint21', autovalue: 0 }
    segment seg_22 { parser: 'uint22', autovalue: 0 }

    segment seg_23 { parser: 'uint23', autovalue: 0 }

    segment seg_24 { parser: 'uint24', autovalue: 0 }
    segment seg_25 { parser: 'uint25', autovalue: 0 }

    segment seg_26 { parser: 'uint26', autovalue: 0 }
    segment seg_27 { parser: 'uint27', autovalue: 0 }

    segment seg_28 { parser: 'uint28', autovalue: 0 }
    segment seg_29 { parser: 'uint29', autovalue: 0 }

    segment seg_30 { parser: 'uint30', autovalue: 0 }
    segment seg_31 { parser: 'uint31', autovalue: 0 }
    segment seg_32 { parser: 'uint32', autovalue: 0 }
}

protocol dynamic_len {
    segment seg1 { parser: 'int8'}
    segment seg2[this.seg1] { parser: 'int8' }
}

protocol text_arr {
    segment iarr[3] { parser: 'int8' }
    segment sarr[3] { parser: 'string', length: 3}
}

protocol prot_xtra {
    segment seg1 {
        parser: {
            pack: PackFloat_D,
            unpack: UnpackFloat_D
        }
    }
    segment seg2 {
        parser: 'string',
        length: 2,
        autovalue: CheckCode(My_xor8)
    }
}

//设备
device dev_3 {

    udp_server srv_1 { ip: '127.0.0.1', port: 3000 }
    tcp_client clt_2 { ip: '127.0.0.1' }
    do do1 { minv: 3, maxv: 5 }
    ad ad1 { ratio: 16 }
    can can1 { baudrate: 9600}
}