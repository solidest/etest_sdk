/**
 * LR parser generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/path-to-output-parser-file.js
 */

'use strict';

/**
 * Matched token text.
 */
let yytext;

/**
 * Length of the matched token text.
 */
let yyleng;

/**
 * Storage object.
 */
let yy = {};

/**
 * Result of semantic action.
 */
let __;

/**
 * Result location object.
 */
let __loc;

function yyloc(start, end) {
  if (!yy.options.captureLocations) {
    return null;
  }

  // Epsilon doesn't produce location.
  if (!start || !end) {
    return start || end;
  }

  return {
    startOffset: start.startOffset,
    endOffset: end.endOffset,
    startLine: start.startLine,
    endLine: end.endLine,
    startColumn: start.startColumn,
    endColumn: end.endColumn,
  };
}

const EOF = '$';

/**
 * List of productions (generated by Syntax tool).
 */
const productions = [[-1,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1 }],
[0,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[0,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = joinList(_1, _2); }],
[1,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);newElement('protocol', _2, 'seglist', null, _2loc); }],
[1,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = newElement('protocol', _2,'seglist', _4, _2loc); }],
[1,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = null; }],
[1,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = {kind: 'device', value: _4}; }],
[1,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = null; }],
[1,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = {kind: 'topology', value: _4}; }],
[2,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[2,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = joinList(_1, _2) }],
[3,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = newElement('segment', _2, 'props', _3, _2loc); }],
[3,6,(_1,_2,_3,_4,_5,_6,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc) => { __loc = yyloc(_1loc, _6loc);__ = newElement('segment', _2, 'props', _6, _2loc, _4); }],
[3,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[3,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[4,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = newProtSeggroup(_2, null, _2loc); }],
[4,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = newProtSeggroup(_2, _4, _2loc); }],
[4,8,(_1,_2,_3,_4,_5,_6,_7,_8,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc,_7loc,_8loc) => { __loc = yyloc(_1loc, _8loc);__ = newProtSeggroup(_2, _7, _2loc, _4); }],
[5,6,(_1,_2,_3,_4,_5,_6,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc) => { __loc = yyloc(_1loc, _6loc);__ = newProtBranch('oneof', _3, null, _3loc); }],
[5,7,(_1,_2,_3,_4,_5,_6,_7,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc,_7loc) => { __loc = yyloc(_1loc, _7loc);__ = newProtBranch('oneof', _3, _6, _3loc); }],
[6,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[6,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = joinList(_1, _2); }],
[7,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'interface', value: _1, config: _3}; }],
[8,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[8,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1.concat(_2); }],
[9,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = []; }],
[9,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = _4; }],
[9,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = []; }],
[9,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = _4 }],
[9,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = []; }],
[9,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = _4; }],
[10,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[10,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[10,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[11,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = null; }],
[11,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = { kind: 'linking', name: _1, value: _4 }; }],
[12,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[12,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[12,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[13,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = null; }],
[13,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = {kind: 'uut', value: _4}; }],
[13,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = null; }],
[13,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = {kind: 'etest', value: _4}; }],
[14,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[14,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[14,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[15,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);_1.kind = 'binding'; _1.bind = _3; __ = _1; }],
[15,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);_1.kind = 'binding'; _1.bind = _3; __ = _1; }],
[16,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1) }],
[16,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[16,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1 }],
[17,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = { kind: 'connector', device: _1, interface: _3}; }],
[18,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[18,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[18,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[19,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = newList(null); }],
[19,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = _2; }],
[20,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[20,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[20,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[21,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = newProp(_1, _3, _1loc, _3loc); }],
[22,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[22,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[22,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = {kind: 'not', exp: _2}; }],
[22,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = {kind: 'uminus', exp: _2}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'not_eq', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'eq_eq', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'gt_eq', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'lt_eq', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'gt', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'lt', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'add', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'subtract', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'multiply', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'divide', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'and', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'or', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = _2; }],
[22,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = newKindList('array', null); }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = _2; }],
[22,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[23,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = { kind: _1 }; }],
[23,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = {kind: _1, params: _3}; }],
[24,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[24,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[24,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[25,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newKindList('array', _1); }],
[25,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinKindList(_1, _3); }],
[25,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[26,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'number', value: eval(yytext)}; }],
[26,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'number', value: eval(yytext)}; }],
[26,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[26,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[26,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'bool', value: true}; }],
[26,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'bool', value: false}; }],
[27,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newKindList('pid', _1); }],
[27,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinKindList(_1, _3); }],
[28,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'string', value: eval(yytext)}; }],
[28,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'string', value: eval(yytext)}; }],
[28,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'strhex',  value: yytext.replace(/%/g, '')}; }]];

/**
 * Encoded tokens map.
 */
const tokens = {"PROTOCOL":"29","ID":"30","{":"31","}":"32","DEVICE":"33","TOPOLOGY":"34","SEGMENT":"35","[":"36","]":"37","SEGMENTS":"38","ONEOF":"39","(":"40",")":"41","INTFTYPE":"42","LINKING":"43",":":"44","MAPPING":"45","BINDING":"46",",":"47","UUT":"48","ETEST":"49","STRING_TRIPLE":"50","STRING_SINGLE":"51","DOT":"52","NOT":"53","-":"54","NOT_EQ":"55","EQ_EQ":"56","GT_EQ":"57","LT_EQ":"58",">":"59","<":"60","+":"61","*":"62","/":"63","AND":"64","OR":"65","NUMBER":"66","NUMBER_HEX":"67","TRUE":"68","FALSE":"69","STRING_HEX":"70","$":"71"};

/**
 * Parsing table (generated by Syntax tool).
 */
const table = [{"0":1,"1":2,"29":"s3","33":"s4","34":"s5"},{"1":6,"29":"s3","33":"s4","34":"s5","71":"acc"},{"29":"r1","33":"r1","34":"r1","71":"r1"},{"30":"s7"},{"30":"s113"},{"30":"s123"},{"29":"r2","33":"r2","34":"r2","71":"r2"},{"31":"s8"},{"2":10,"3":11,"4":13,"5":14,"32":"s9","35":"s12","38":"s15","39":"s16"},{"29":"r3","33":"r3","34":"r3","71":"r3"},{"3":18,"4":13,"5":14,"32":"s17","35":"s12","38":"s15","39":"s16"},{"32":"r9","35":"r9","38":"r9","39":"r9"},{"30":"s19"},{"32":"r13","35":"r13","38":"r13","39":"r13"},{"32":"r14","35":"r14","38":"r14","39":"r14"},{"30":"s95"},{"40":"s101"},{"29":"r4","33":"r4","34":"r4","71":"r4"},{"32":"r10","35":"r10","38":"r10","39":"r10"},{"19":20,"31":"s22","36":"s21"},{"32":"r11","35":"r11","38":"r11","39":"r11"},{"19":25,"22":23,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"20":56,"21":57,"30":"s58","32":"s55"},{"37":"s41","54":"s49","55":"s42","56":"s43","57":"s44","58":"s45","59":"s46","60":"s47","61":"s48","62":"s50","63":"s51","64":"s52","65":"s53"},{"32":"r61","37":"r61","41":"r61","47":"r61","54":"r61","55":"r61","56":"r61","57":"r61","58":"r61","59":"r61","60":"r61","61":"r61","62":"r61","63":"r61","64":"r61","65":"r61"},{"32":"r62","37":"r62","41":"r62","47":"r62","54":"r62","55":"r62","56":"r62","57":"r62","58":"r62","59":"r62","60":"r62","61":"r62","62":"r62","63":"r62","64":"r62","65":"r62"},{"19":25,"22":76,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"19":25,"22":77,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"19":25,"22":78,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"19":25,"22":82,"23":30,"25":81,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","37":"s80","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"32":"r80","37":"r80","41":"r80","47":"r80","54":"r80","55":"r80","56":"r80","57":"r80","58":"r80","59":"r80","60":"r80","61":"r80","62":"r80","63":"r80","64":"r80","65":"r80"},{"32":"r89","37":"r89","41":"r89","47":"r89","54":"r89","55":"r89","56":"r89","57":"r89","58":"r89","59":"r89","60":"r89","61":"r89","62":"r89","63":"r89","64":"r89","65":"r89"},{"32":"r90","37":"r90","41":"r90","47":"r90","54":"r90","55":"r90","56":"r90","57":"r90","58":"r90","59":"r90","60":"r90","61":"r90","62":"r90","63":"r90","64":"r90","65":"r90"},{"32":"r91","37":"r91","41":"r91","47":"r91","54":"r91","55":"r91","56":"r91","57":"r91","58":"r91","59":"r91","60":"r91","61":"r91","62":"r91","63":"r91","64":"r91","65":"r91"},{"32":"r92","37":"r92","41":"r92","47":"r92","52":"s86","54":"r92","55":"r92","56":"r92","57":"r92","58":"r92","59":"r92","60":"r92","61":"r92","62":"r92","63":"r92","64":"r92","65":"r92"},{"32":"r93","37":"r93","41":"r93","47":"r93","54":"r93","55":"r93","56":"r93","57":"r93","58":"r93","59":"r93","60":"r93","61":"r93","62":"r93","63":"r93","64":"r93","65":"r93"},{"32":"r94","37":"r94","41":"r94","47":"r94","54":"r94","55":"r94","56":"r94","57":"r94","58":"r94","59":"r94","60":"r94","61":"r94","62":"r94","63":"r94","64":"r94","65":"r94"},{"32":"r97","37":"r97","41":"r97","47":"r97","54":"r97","55":"r97","56":"r97","57":"r97","58":"r97","59":"r97","60":"r97","61":"r97","62":"r97","63":"r97","64":"r97","65":"r97"},{"32":"r98","37":"r98","41":"r98","47":"r98","54":"r98","55":"r98","56":"r98","57":"r98","58":"r98","59":"r98","60":"r98","61":"r98","62":"r98","63":"r98","64":"r98","65":"r98"},{"32":"r99","37":"r99","41":"r99","47":"r99","54":"r99","55":"r99","56":"r99","57":"r99","58":"r99","59":"r99","60":"r99","61":"r99","62":"r99","63":"r99","64":"r99","65":"r99"},{"32":"r95","37":"r95","40":"s88","41":"r95","47":"r95","52":"r95","54":"r95","55":"r95","56":"r95","57":"r95","58":"r95","59":"r95","60":"r95","61":"r95","62":"r95","63":"r95","64":"r95","65":"r95"},{"19":54,"31":"s22"},{"19":25,"22":64,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"19":25,"22":65,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"19":25,"22":66,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"19":25,"22":67,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"19":25,"22":68,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"19":25,"22":69,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"19":25,"22":70,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"19":25,"22":71,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"19":25,"22":72,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"19":25,"22":73,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"19":25,"22":74,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"19":25,"22":75,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"32":"r12","35":"r12","38":"r12","39":"r12"},{"32":"r55","35":"r55","37":"r55","38":"r55","39":"r55","41":"r55","42":"r55","47":"r55","54":"r55","55":"r55","56":"r55","57":"r55","58":"r55","59":"r55","60":"r55","61":"r55","62":"r55","63":"r55","64":"r55","65":"r55"},{"32":"s59","47":"s60"},{"32":"r57","47":"r57"},{"44":"s62"},{"32":"r56","35":"r56","37":"r56","38":"r56","39":"r56","41":"r56","42":"r56","47":"r56","54":"r56","55":"r56","56":"r56","57":"r56","58":"r56","59":"r56","60":"r56","61":"r56","62":"r56","63":"r56","64":"r56","65":"r56"},{"21":61,"30":"s58","32":"r59","47":"r59"},{"32":"r58","47":"r58"},{"19":25,"22":63,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"32":"r60","47":"r60","54":"s49","55":"s42","56":"s43","57":"s44","58":"s45","59":"s46","60":"s47","61":"s48","62":"s50","63":"s51","64":"s52","65":"s53"},{"32":"r65","37":"r65","41":"r65","47":"r65","54":"s49","55":"r65","56":"r65","57":"r65","58":"r65","59":"r65","60":"r65","61":"s48","62":"s50","63":"s51","64":"r65","65":"r65"},{"32":"r66","37":"r66","41":"r66","47":"r66","54":"s49","55":"r66","56":"r66","57":"r66","58":"r66","59":"r66","60":"r66","61":"s48","62":"s50","63":"s51","64":"r66","65":"r66"},{"32":"r67","37":"r67","41":"r67","47":"r67","54":"s49","55":"r67","56":"r67","57":"r67","58":"r67","59":"r67","60":"r67","61":"s48","62":"s50","63":"s51","64":"r67","65":"r67"},{"32":"r68","37":"r68","41":"r68","47":"r68","54":"s49","55":"r68","56":"r68","57":"r68","58":"r68","59":"r68","60":"r68","61":"s48","62":"s50","63":"s51","64":"r68","65":"r68"},{"32":"r69","37":"r69","41":"r69","47":"r69","54":"s49","55":"r69","56":"r69","57":"r69","58":"r69","59":"r69","60":"r69","61":"s48","62":"s50","63":"s51","64":"r69","65":"r69"},{"32":"r70","37":"r70","41":"r70","47":"r70","54":"s49","55":"r70","56":"r70","57":"r70","58":"r70","59":"r70","60":"r70","61":"s48","62":"s50","63":"s51","64":"r70","65":"r70"},{"32":"r71","37":"r71","41":"r71","47":"r71","54":"r71","55":"r71","56":"r71","57":"r71","58":"r71","59":"r71","60":"r71","61":"r71","62":"s50","63":"s51","64":"r71","65":"r71"},{"32":"r72","37":"r72","41":"r72","47":"r72","54":"r72","55":"r72","56":"r72","57":"r72","58":"r72","59":"r72","60":"r72","61":"r72","62":"s50","63":"s51","64":"r72","65":"r72"},{"32":"r73","37":"r73","41":"r73","47":"r73","54":"r73","55":"r73","56":"r73","57":"r73","58":"r73","59":"r73","60":"r73","61":"r73","62":"r73","63":"r73","64":"r73","65":"r73"},{"32":"r74","37":"r74","41":"r74","47":"r74","54":"r74","55":"r74","56":"r74","57":"r74","58":"r74","59":"r74","60":"r74","61":"r74","62":"r74","63":"r74","64":"r74","65":"r74"},{"32":"r75","37":"r75","41":"r75","47":"r75","54":"s49","55":"s42","56":"s43","57":"s44","58":"s45","59":"s46","60":"s47","61":"s48","62":"s50","63":"s51","64":"r75","65":"r75"},{"32":"r76","37":"r76","41":"r76","47":"r76","54":"s49","55":"s42","56":"s43","57":"s44","58":"s45","59":"s46","60":"s47","61":"s48","62":"s50","63":"s51","64":"r76","65":"r76"},{"32":"r63","37":"r63","41":"r63","47":"r63","54":"r63","55":"r63","56":"r63","57":"r63","58":"r63","59":"r63","60":"r63","61":"r63","62":"r63","63":"r63","64":"r63","65":"r63"},{"32":"r64","37":"r64","41":"r64","47":"r64","54":"r64","55":"r64","56":"r64","57":"r64","58":"r64","59":"r64","60":"r64","61":"r64","62":"r64","63":"r64","64":"r64","65":"r64"},{"41":"s79","54":"s49","55":"s42","56":"s43","57":"s44","58":"s45","59":"s46","60":"s47","61":"s48","62":"s50","63":"s51","64":"s52","65":"s53"},{"32":"r77","37":"r77","41":"r77","47":"r77","54":"r77","55":"r77","56":"r77","57":"r77","58":"r77","59":"r77","60":"r77","61":"r77","62":"r77","63":"r77","64":"r77","65":"r77"},{"32":"r78","37":"r78","41":"r78","47":"r78","54":"r78","55":"r78","56":"r78","57":"r78","58":"r78","59":"r78","60":"r78","61":"r78","62":"r78","63":"r78","64":"r78","65":"r78"},{"37":"s83","47":"s84"},{"37":"r86","47":"r86","54":"s49","55":"s42","56":"s43","57":"s44","58":"s45","59":"s46","60":"s47","61":"s48","62":"s50","63":"s51","64":"s52","65":"s53"},{"32":"r79","37":"r79","41":"r79","47":"r79","54":"r79","55":"r79","56":"r79","57":"r79","58":"r79","59":"r79","60":"r79","61":"r79","62":"r79","63":"r79","64":"r79","65":"r79"},{"19":25,"22":85,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","37":"r88","40":"s28","47":"r88","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"37":"r87","47":"r87","54":"s49","55":"s42","56":"s43","57":"s44","58":"s45","59":"s46","60":"s47","61":"s48","62":"s50","63":"s51","64":"s52","65":"s53"},{"30":"s87"},{"32":"r96","37":"r96","41":"r96","47":"r96","52":"r96","54":"r96","55":"r96","56":"r96","57":"r96","58":"r96","59":"r96","60":"r96","61":"r96","62":"r96","63":"r96","64":"r96","65":"r96"},{"19":25,"22":91,"23":30,"24":90,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","41":"s89","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"32":"r81","37":"r81","41":"r81","47":"r81","54":"r81","55":"r81","56":"r81","57":"r81","58":"r81","59":"r81","60":"r81","61":"r81","62":"r81","63":"r81","64":"r81","65":"r81"},{"41":"s92","47":"s93"},{"41":"r83","47":"r83","54":"s49","55":"s42","56":"s43","57":"s44","58":"s45","59":"s46","60":"s47","61":"s48","62":"s50","63":"s51","64":"s52","65":"s53"},{"32":"r82","37":"r82","41":"r82","47":"r82","54":"r82","55":"r82","56":"r82","57":"r82","58":"r82","59":"r82","60":"r82","61":"r82","62":"r82","63":"r82","64":"r82","65":"r82"},{"19":25,"22":94,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","41":"r85","47":"r85","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"41":"r84","47":"r84","54":"s49","55":"s42","56":"s43","57":"s44","58":"s45","59":"s46","60":"s47","61":"s48","62":"s50","63":"s51","64":"s52","65":"s53"},{"31":"s96","36":"s97"},{"2":99,"3":11,"4":13,"5":14,"32":"s98","35":"s12","38":"s15","39":"s16"},{"19":25,"22":108,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"32":"r15","35":"r15","38":"r15","39":"r15"},{"3":18,"4":13,"5":14,"32":"s100","35":"s12","38":"s15","39":"s16"},{"32":"r16","35":"r16","38":"r16","39":"r16"},{"19":25,"22":102,"23":30,"26":24,"27":34,"28":33,"30":"s40","31":"s22","36":"s29","40":"s28","50":"s37","51":"s38","53":"s26","54":"s27","66":"s31","67":"s32","68":"s35","69":"s36","70":"s39"},{"41":"s103","54":"s49","55":"s42","56":"s43","57":"s44","58":"s45","59":"s46","60":"s47","61":"s48","62":"s50","63":"s51","64":"s52","65":"s53"},{"31":"s104"},{"2":106,"3":11,"4":13,"5":14,"32":"s105","35":"s12","38":"s15","39":"s16"},{"32":"r18","35":"r18","38":"r18","39":"r18"},{"3":18,"4":13,"5":14,"32":"s107","35":"s12","38":"s15","39":"s16"},{"32":"r19","35":"r19","38":"r19","39":"r19"},{"37":"s109","54":"s49","55":"s42","56":"s43","57":"s44","58":"s45","59":"s46","60":"s47","61":"s48","62":"s50","63":"s51","64":"s52","65":"s53"},{"31":"s110"},{"2":111,"3":11,"4":13,"5":14,"35":"s12","38":"s15","39":"s16"},{"3":18,"4":13,"5":14,"32":"s112","35":"s12","38":"s15","39":"s16"},{"32":"r17","35":"r17","38":"r17","39":"r17"},{"31":"s114"},{"6":116,"7":117,"32":"s115","42":"s118"},{"29":"r5","33":"r5","34":"r5","71":"r5"},{"7":120,"32":"s119","42":"s118"},{"32":"r20","42":"r20"},{"30":"s121"},{"29":"r6","33":"r6","34":"r6","71":"r6"},{"32":"r21","42":"r21"},{"19":122,"31":"s22"},{"32":"r22","42":"r22"},{"31":"s124"},{"8":126,"9":127,"32":"s125","43":"s128","45":"s129","46":"s130"},{"29":"r7","33":"r7","34":"r7","71":"r7"},{"9":132,"32":"s131","43":"s128","45":"s129","46":"s130"},{"32":"r23","43":"r23","45":"r23","46":"r23"},{"44":"s133"},{"44":"s153"},{"44":"s176"},{"29":"r8","33":"r8","34":"r8","71":"r8"},{"32":"r24","43":"r24","45":"r24","46":"r24"},{"31":"s134"},{"10":136,"11":137,"30":"s138","32":"s135"},{"32":"r25","43":"r25","45":"r25","46":"r25"},{"32":"s139","47":"s140"},{"32":"r31","47":"r31"},{"44":"s142"},{"32":"r26","43":"r26","45":"r26","46":"r26"},{"11":141,"30":"s138","32":"r33","47":"r33"},{"32":"r32","47":"r32"},{"36":"s143"},{"16":145,"17":146,"30":"s147","37":"s144"},{"32":"r34","47":"r34"},{"37":"s148","47":"s149"},{"37":"r48","47":"r48"},{"52":"s151"},{"32":"r35","47":"r35"},{"17":150,"30":"s147","37":"r50","47":"r50"},{"37":"r49","47":"r49"},{"30":"s152"},{"37":"r51","44":"r51","47":"r51"},{"31":"s154"},{"12":156,"13":157,"32":"s155","48":"s158","49":"s159"},{"32":"r27","43":"r27","45":"r27","46":"r27"},{"32":"s160","47":"s161"},{"32":"r36","47":"r36"},{"44":"s163"},{"44":"s171"},{"32":"r28","43":"r28","45":"r28","46":"r28"},{"13":162,"32":"r38","47":"r38","48":"s158","49":"s159"},{"32":"r37","47":"r37"},{"36":"s164"},{"18":166,"30":"s167","37":"s165"},{"32":"r39","47":"r39"},{"37":"s168","47":"s169"},{"37":"r52","47":"r52"},{"32":"r40","47":"r40"},{"30":"s170","37":"r54","47":"r54"},{"37":"r53","47":"r53"},{"36":"s172"},{"18":174,"30":"s167","37":"s173"},{"32":"r41","47":"r41"},{"37":"s175","47":"s169"},{"32":"r42","47":"r42"},{"31":"s177"},{"14":179,"15":180,"17":181,"30":"s147","32":"s178"},{"32":"r29","43":"r29","45":"r29","46":"r29"},{"32":"s182","47":"s183"},{"32":"r43","47":"r43"},{"44":"s185"},{"32":"r30","43":"r30","45":"r30","46":"r30"},{"15":184,"17":181,"30":"s147","32":"r45","47":"r45"},{"32":"r44","47":"r44"},{"50":"s186","51":"s187"},{"32":"r46","47":"r46"},{"32":"r47","47":"r47"}];

/**
 * Parsing stack.
 */
const stack = [];

/**
 * Tokenizer instance.
 */
let tokenizer;
/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 * See `--custom-tokinzer` to skip this generation, and use a custom one.
 */

const lexRules = [[/^\/\*[^*]*\*+([^\/][^*]*\*+)*\//, function() { /*return 'COMMENT_BLOCK'*/ }],
[/^\/\/[^\r\n]*/, function() { /*return 'COMMENT_LINE'*/ }],
[/^\"([^\\\n"]|\\.)*\"/, function() { return 'STRING_TRIPLE' }],
[/^'([^\\\n']|\\.)*'/, function() { return 'STRING_SINGLE' }],
[/^%[0-9A-Fa-f\s]*%/, function() { return 'STRING_HEX' }],
[/^\s+/, function() { /* return 'WHITESPACE' */ }],
[/^\n/, function() { /* return 'NEWLINE' */ }],
[/^\bprotocol\b/, function() { if(this.getCurrentState()!=='INITIAL') this.popState(); this.pushState('protocol'); return 'PROTOCOL'; }],
[/^\bsegments\b/, function() { return 'SEGMENTS' }],
[/^\bsegment\b/, function() { return 'SEGMENT' }],
[/^\boneof\b/, function() { return 'ONEOF' }],
[/^\bdevice\b/, function() { if(this.getCurrentState()!=='INITIAL') this.popState(); this.pushState('device'); return 'DEVICE'; }],
[/^\b(udp_server|udp_client|tcp_server|tcp_client|serial_ttl|serial_232|serial_422|serial_485|serial_usb|can|di|do|ad|da)\b/, function() { return 'INTFTYPE' }],
[/^\btopology\b/, function() { if(this.getCurrentState()!=='INITIAL') this.popState(); this.pushState('topology'); return 'TOPOLOGY'; }],
[/^\blinking\b/, function() { return 'LINKING' }],
[/^\bmapping\b/, function() { return 'MAPPING' }],
[/^\bbinding\b/, function() { return 'BINDING' }],
[/^\buut\b/, function() { return 'UUT' }],
[/^\betest\b/, function() { return 'ETEST' }],
[/^true/, function() { return 'TRUE' }],
[/^false/, function() { return 'FALSE' }],
[/^0[xX][0-9a-fA-F]+/, function() { return 'NUMBER_HEX' }],
[/^[0-9]+(?:\.[0-9]+)?/, function() { return 'NUMBER' }],
[/^[a-zA-Z_$][a-zA-Z0-9_]*/, function() { return 'ID' }],
[/^!=/, function() { return 'NOT_EQ' }],
[/^!/, function() { return 'NOT' }],
[/^==/, function() { return 'EQ_EQ' }],
[/^>=/, function() { return 'GT_EQ' }],
[/^<=/, function() { return 'LT_EQ' }],
[/^&&/, function() { return 'AND' }],
[/^\|\|/, function() { return 'OR' }],
[/^{/, function() { return '{' }],
[/^}/, function() { return '}' }],
[/^]/, function() { return ']' }],
[/^\[/, function() { return '[' }],
[/^,/, function() { return ',' }],
[/^\:/, function() { return ':' }],
[/^\./, function() { return 'DOT' }],
[/^\+/, function() { return '+' }],
[/^-/, function() { return '-' }],
[/^\*/, function() { return '*' }],
[/^\//, function() { return '/' }],
[/^\(/, function() { return '(' }],
[/^\)/, function() { return ')' }],
[/^>/, function() { return '>' }],
[/^</, function() { return '<' }]];
const lexRulesByConditions = {"INITIAL":[0,1,2,3,4,5,6,7,11,13,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"protocol":[0,1,2,3,4,5,6,7,8,9,10,11,13,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"device":[0,1,2,3,4,5,6,7,11,12,13,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"topology":[0,1,2,3,4,5,6,7,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45]};

const EOF_TOKEN = {
  type: EOF,
  value: '',
};

tokenizer = {
  initString(string) {
    this._string = string;
    this._cursor = 0;

    this._states = ['INITIAL'];
    this._tokensQueue = [];

    this._currentLine = 1;
    this._currentColumn = 0;
    this._currentLineBeginOffset = 0;

    /**
     * Matched token location data.
     */
    this._tokenStartOffset = 0;
    this._tokenEndOffset = 0;
    this._tokenStartLine = 1;
    this._tokenEndLine = 1;
    this._tokenStartColumn = 0;
    this._tokenEndColumn = 0;

    return this;
  },

  /**
   * Returns tokenizer states.
   */
  getStates() {
    return this._states;
  },

  getCurrentState() {
    return this._states[this._states.length - 1];
  },

  pushState(state) {
    this._states.push(state);
  },

  begin(state) {
    this.pushState(state);
  },

  popState() {
    if (this._states.length > 1) {
      return this._states.pop();
    }
    return this._states[0];
  },

  getNextToken() {
    // Something was queued, return it.
    if (this._tokensQueue.length > 0) {
      return this.onToken(this._toToken(this._tokensQueue.shift()));
    }

    if (!this.hasMoreTokens()) {
      return this.onToken(EOF_TOKEN);
    }

    let string = this._string.slice(this._cursor);
    let lexRulesForState = lexRulesByConditions[this.getCurrentState()];

    for (let i = 0; i < lexRulesForState.length; i++) {
      let lexRuleIndex = lexRulesForState[i];
      let lexRule = lexRules[lexRuleIndex];

      let matched = this._match(string, lexRule[0]);

      // Manual handling of EOF token (the end of string). Return it
      // as `EOF` symbol.
      if (string === '' && matched === '') {
        this._cursor++;
      }

      if (matched !== null) {
        yytext = matched;
        yyleng = yytext.length;
        let token = lexRule[1].call(this);

        if (!token) {
          return this.getNextToken();
        }

        // If multiple tokens are returned, save them to return
        // on next `getNextToken` call.

        if (Array.isArray(token)) {
          const tokensToQueue = token.slice(1);
          token = token[0];
          if (tokensToQueue.length > 0) {
            this._tokensQueue.unshift(...tokensToQueue);
          }
        }

        return this.onToken(this._toToken(token, yytext));
      }
    }

    if (this.isEOF()) {
      this._cursor++;
      return EOF_TOKEN;
    }

    this.throwUnexpectedToken(
      string[0],
      this._currentLine,
      this._currentColumn
    );
  },

  /**
   * Throws default "Unexpected token" exception, showing the actual
   * line from the source, pointing with the ^ marker to the bad token.
   * In addition, shows `line:column` location.
   */
  throwUnexpectedToken(symbol, line, column) {
    const lineSource = this._string.split('\n')[line - 1];
    let lineData = '';

    if (lineSource) {
      const pad = ' '.repeat(column);
      lineData = '\n\n' + lineSource + '\n' + pad + '^\n';
    }

    throw new SyntaxError(
      `${lineData}Unexpected token: "${symbol}" ` +
      `at ${line}:${column}.`
    );
  },

  getCursor() {
    return this._cursor;
  },

  getCurrentLine() {
    return this._currentLine;
  },

  getCurrentColumn() {
    return this._currentColumn;
  },

  _captureLocation(matched) {
    const nlRe = /\n/g;

    // Absolute offsets.
    this._tokenStartOffset = this._cursor;

    // Line-based locations, start.
    this._tokenStartLine = this._currentLine;
    this._tokenStartColumn =
      this._tokenStartOffset - this._currentLineBeginOffset;

    // Extract `\n` in the matched token.
    let nlMatch;
    while ((nlMatch = nlRe.exec(matched)) !== null) {
      this._currentLine++;
      this._currentLineBeginOffset = this._tokenStartOffset + nlMatch.index + 1;
    }

    this._tokenEndOffset = this._cursor + matched.length;

    // Line-based locations, end.
    this._tokenEndLine = this._currentLine;
    this._tokenEndColumn = this._currentColumn =
      (this._tokenEndOffset - this._currentLineBeginOffset);
  },

  _toToken(tokenType, yytext = '') {
    return {
      // Basic data.
      type: tokenType,
      value: yytext,

      // Location data.
      startOffset: this._tokenStartOffset,
      endOffset: this._tokenEndOffset,
      startLine: this._tokenStartLine,
      endLine: this._tokenEndLine,
      startColumn: this._tokenStartColumn,
      endColumn: this._tokenEndColumn,
    };
  },

  isEOF() {
    return this._cursor === this._string.length;
  },

  hasMoreTokens() {
    return this._cursor <= this._string.length;
  },

  _match(string, regexp) {
    let matched = string.match(regexp);
    if (matched) {
      // Handle `\n` in the matched token to track line numbers.
      this._captureLocation(matched[0]);
      this._cursor += matched[0].length;
      return matched[0];
    }
    return null;
  },

  /**
   * Allows analyzing, and transforming token. Default implementation
   * just passes the token through.
   */
  onToken(token) {
    return token;
  },
};

/**
 * Expose tokenizer so it can be accessed in semantic actions.
 */
yy.lexer = tokenizer;
yy.tokenizer = tokenizer;

/**
 * Global parsing options. Some options can be shadowed per
 * each `parse` call, if the optations are passed.
 *
 * Initalized to the `captureLocations` which is passed
 * from the generator. Other options can be added at runtime.
 */
yy.options = {
  captureLocations: true,
};

/**
 * Parsing module.
 */
const yyparse = {
  /**
   * Sets global parsing options.
   */
  setOptions(options) {
    yy.options = options;
    return this;
  },

  /**
   * Returns parsing options.
   */
  getOptions() {
    return yy.options;
  },

  /**
   * Parses a string.
   */
  parse(string, parseOptions) {
    if (!tokenizer) {
      throw new Error(`Tokenizer instance wasn't specified.`);
    }

    tokenizer.initString(string);

    /**
     * If parse options are passed, override global parse options for
     * this call, and later restore global options.
     */
    let globalOptions = yy.options;
    if (parseOptions) {
      yy.options = Object.assign({}, yy.options, parseOptions);
    }

    /**
     * Allow callers to do setup work based on the
     * parsing string, and passed options.
     */
    yyparse.onParseBegin(string, tokenizer, yy.options);

    stack.length = 0;
    stack.push(0);

    let token = tokenizer.getNextToken();
    let shiftedToken = null;

    do {
      if (!token) {
        // Restore options.
        yy.options = globalOptions;
        unexpectedEndOfInput();
      }

      let state = stack[stack.length - 1];
      let column = tokens[token.type];

      if (!table[state].hasOwnProperty(column)) {
        yy.options = globalOptions;
        unexpectedToken(token);
      }

      let entry = table[state][column];

      // Shift action.
      if (entry[0] === 's') {
        let loc = null;

        if (yy.options.captureLocations) {
          loc = {
            startOffset: token.startOffset,
            endOffset: token.endOffset,
            startLine: token.startLine,
            endLine: token.endLine,
            startColumn: token.startColumn,
            endColumn: token.endColumn,
          };
        }

        shiftedToken = this.onShift(token);

        stack.push(
          {symbol: tokens[shiftedToken.type], semanticValue: shiftedToken.value, loc},
          Number(entry.slice(1))
        );

        token = tokenizer.getNextToken();
      }

      // Reduce action.
      else if (entry[0] === 'r') {
        let productionNumber = entry.slice(1);
        let production = productions[productionNumber];
        let hasSemanticAction = typeof production[2] === 'function';
        let semanticValueArgs = hasSemanticAction ? [] : null;

        const locationArgs = (
          hasSemanticAction && yy.options.captureLocations
            ? []
            : null
        );

        if (production[1] !== 0) {
          let rhsLength = production[1];
          while (rhsLength-- > 0) {
            stack.pop();
            let stackEntry = stack.pop();

            if (hasSemanticAction) {
              semanticValueArgs.unshift(stackEntry.semanticValue);

              if (locationArgs) {
                locationArgs.unshift(stackEntry.loc);
              }
            }
          }
        }

        const reduceStackEntry = {symbol: production[0]};

        if (hasSemanticAction) {
          yytext = shiftedToken ? shiftedToken.value : null;
          yyleng = shiftedToken ? shiftedToken.value.length : null;

          const semanticActionArgs = (
            locationArgs !== null
              ? semanticValueArgs.concat(locationArgs)
              : semanticValueArgs
          );

          production[2](...semanticActionArgs);

          reduceStackEntry.semanticValue = __;

          if (locationArgs) {
            reduceStackEntry.loc = __loc;
          }
        }

        const nextState = stack[stack.length - 1];
        const symbolToReduceWith = production[0];

        stack.push(
          reduceStackEntry,
          table[nextState][symbolToReduceWith]
        );
      }

      // Accept.
      else if (entry === 'acc') {
        stack.pop();
        let parsed = stack.pop();

        if (stack.length !== 1 ||
            stack[0] !== 0 ||
            tokenizer.hasMoreTokens()) {
          // Restore options.
          yy.options = globalOptions;
          unexpectedToken(token);
        }

        if (parsed.hasOwnProperty('semanticValue')) {
          yy.options = globalOptions;
          yyparse.onParseEnd(parsed.semanticValue);
          return parsed.semanticValue;
        }

        yyparse.onParseEnd();

        // Restore options.
        yy.options = globalOptions;
        return true;
      }

    } while (tokenizer.hasMoreTokens() || stack.length > 1);
  },

  setTokenizer(customTokenizer) {
    tokenizer = customTokenizer;
    return yyparse;
  },

  getTokenizer() {
    return tokenizer;
  },

  onParseBegin(string, tokenizer, options) {},
  onParseEnd(parsed) {},

  /**
   * Allows analyzing, and transforming shifted token. Default implementation
   * just passes the token through.
   */
  onShift(token) {
    return token;
  },
};



    function newList(item) {
      if(item) {
        return [item];
      } else {
        return [];
      }
    }

    function joinList(list, item) {
      if(list && item) {
        list.push(item);
      }
      return list;
    }

    function newKindList(kind, item) {
      if(item) {
        return {kind: kind, list: [item]};
      } else {
        return {kind: kind, list: []};
      }
    }

    function joinKindList(list, item) {
      if(list && list.list && item) {
        list.list.push(item);
      }
      return list;
    }

    function newProp(id, exp, id_loc, exp_loc) {
      return {
        kind: 'prop',
        name: id,
        value: exp,
        name_from: id_loc.startOffset,
        name_to: id_loc.endOffset,
        name_line: id_loc.startLine,
        value_from: exp_loc.startOffset,
        value_to: exp_loc.endOffset,
        value_line: exp_loc.startLine,
      }
    }

    function newProtBranch(kind, exp, seglist, exp_loc) {
      return {
        kind: kind,
        exp: exp,
        seglist: seglist,
        exp_from: exp_loc.startOffset,
        exp_to: exp_loc.endOffset,
        exp_line: exp_loc.startLine,
      }
    }

    function newProtSeggroup(name, seglist, name_loc, repeated) {
      let res = {
        kind: 'seggroup',
        name: name,
        seglist: seglist,
        name_from: name_loc.startOffset,
        name_to: name_loc.endOffset,
        name_line: name_loc.startLine,
      }
      if(repeated) {
        res.repeated = repeated;
      }
      return res;
    }

    function newElement(kind, name, body_name, body, name_loc, repeated) {
      let res = {
        kind: kind,
        name: name,
        name_from: name_loc.startOffset,
        name_to: name_loc.endOffset,
        name_line: name_loc.startLine,
      }
      res[body_name] = body;
      if(repeated) {
        res.repeated = repeated;
      }
      return res;
    }




function unexpectedToken(token) {
  if (token.type === EOF) {
    unexpectedEndOfInput();
  }

  tokenizer.throwUnexpectedToken(
    token.value,
    token.startLine,
    token.startColumn
  );
}

function unexpectedEndOfInput() {
  parseError(`Unexpected end of input.`);
}

function parseError(message) {
  throw new SyntaxError(message);
}

module.exports = yyparse;
