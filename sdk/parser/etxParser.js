/**
 * LR parser generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/path-to-output-parser-file.js
 */

'use strict';

/**
 * Matched token text.
 */
let yytext;

/**
 * Length of the matched token text.
 */
let yyleng;

/**
 * Storage object.
 */
let yy = {};

/**
 * Result of semantic action.
 */
let __;

/**
 * Result location object.
 */
let __loc;

function yyloc(start, end) {
  if (!yy.options.captureLocations) {
    return null;
  }

  // Epsilon doesn't produce location.
  if (!start || !end) {
    return start || end;
  }

  return {
    startOffset: start.startOffset,
    endOffset: end.endOffset,
    startLine: start.startLine,
    endLine: end.endLine,
    startColumn: start.startColumn,
    endColumn: end.endColumn,
  };
}

const EOF = '$';

/**
 * List of productions (generated by Syntax tool).
 */
const productions = [[-1,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1 }],
[0,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[0,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = joinList(_1, _2); }],
[1,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);newElement('protocol', _2, 'seglist', null, _2loc); }],
[1,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = newElement('protocol', _2,'seglist', _4, _2loc); }],
[1,4],
[1,5],
[2,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[2,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = joinList(_1, _2) }],
[3,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = newElement('segment', _2, 'props', _3, _2loc); }],
[3,6,(_1,_2,_3,_4,_5,_6,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc) => { __loc = yyloc(_1loc, _6loc);__ = newElement('segment', _2, 'props', _6, _2loc, _4); }],
[3,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[3,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[4,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = newProtSeggroup(_2, null, _2loc); }],
[4,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = newProtSeggroup(_2, _4, _2loc); }],
[4,8,(_1,_2,_3,_4,_5,_6,_7,_8,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc,_7loc,_8loc) => { __loc = yyloc(_1loc, _8loc);__ = newProtSeggroup(_2, _7, _2loc, _4); }],
[5,6,(_1,_2,_3,_4,_5,_6,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc) => { __loc = yyloc(_1loc, _6loc);__ = newProtBranch('oneof', _3, null, _3loc); }],
[5,7,(_1,_2,_3,_4,_5,_6,_7,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc,_7loc) => { __loc = yyloc(_1loc, _7loc);__ = newProtBranch('oneof', _3, _6, _3loc); }],
[6,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = newList(null); }],
[6,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = _2; }],
[7,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[7,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[7,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[8,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = newProp(_1, _3, _1loc, _3loc); }],
[9,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[9,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[9,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = {kind: 'not', exp: _2}; }],
[9,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = {kind: 'uminus', exp: _2}; }],
[9,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'not_eq', left: _1, right: _3}; }],
[9,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'eq_eq', left: _1, right: _3}; }],
[9,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'gt_eq', left: _1, right: _3}; }],
[9,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'lt_eq', left: _1, right: _3}; }],
[9,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'gt', left: _1, right: _3}; }],
[9,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'lt', left: _1, right: _3}; }],
[9,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'add', left: _1, right: _3}; }],
[9,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'subtract', left: _1, right: _3}; }],
[9,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'multiply', left: _1, right: _3}; }],
[9,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'divide', left: _1, right: _3}; }],
[9,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'and', left: _1, right: _3}; }],
[9,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'or', left: _1, right: _3}; }],
[9,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = _2; }],
[9,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = newKindList('array', null); }],
[9,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = _2; }],
[9,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[10,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'fn_call', pname: _1}; }],
[10,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = {kind: 'fn_call', pname: _1, args: _3}; }],
[11,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newKindList('array', _1); }],
[11,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinKindList(_1, _3); }],
[11,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[12,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'number', value: eval(yytext)}; }],
[12,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'number', value: eval(yytext)}; }],
[12,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[12,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[13,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newKindList('pid', _1); }],
[13,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinKindList(_1, _3); }],
[14,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'string', value: eval(yytext)}; }],
[14,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'string', value: eval(yytext)}; }],
[14,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'strhex',  value: yytext.replace(/%/g, '')}; }]];

/**
 * Encoded tokens map.
 */
const tokens = {"PROTOCOL":"15","ID":"16","{":"17","}":"18","PROGRAM":"19","program_element_list":"20","SEGMENT":"21","[":"22","]":"23","SEGMENTS":"24","ONEOF":"25","(":"26",")":"27",",":"28",":":"29","NOT":"30","-":"31","NOT_EQ":"32","EQ_EQ":"33","GT_EQ":"34","LT_EQ":"35",">":"36","<":"37","+":"38","*":"39","/":"40","AND":"41","OR":"42","NUMBER":"43","NUMBER_HEX":"44","DOT":"45","STRING_TRIPLE":"46","STRING_SINGLE":"47","STRING_HEX":"48","$":"49"};

/**
 * Parsing table (generated by Syntax tool).
 */
const table = [{"0":1,"1":2,"15":"s3","19":"s4"},{"1":5,"15":"s3","19":"s4","49":"acc"},{"15":"r1","19":"r1","49":"r1"},{"16":"s6"},{"16":"s107"},{"15":"r2","19":"r2","49":"r2"},{"17":"s7"},{"2":9,"3":10,"4":12,"5":13,"18":"s8","21":"s11","24":"s14","25":"s15"},{"15":"r3","19":"r3","49":"r3"},{"3":17,"4":12,"5":13,"18":"s16","21":"s11","24":"s14","25":"s15"},{"18":"r7","21":"r7","24":"r7","25":"r7"},{"16":"s18"},{"18":"r11","21":"r11","24":"r11","25":"r11"},{"18":"r12","21":"r12","24":"r12","25":"r12"},{"16":"s89"},{"26":"s95"},{"15":"r4","19":"r4","49":"r4"},{"18":"r8","21":"r8","24":"r8","25":"r8"},{"6":19,"17":"s21","22":"s20"},{"18":"r9","21":"r9","24":"r9","25":"r9"},{"6":24,"9":22,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"7":53,"8":54,"16":"s55","18":"s52"},{"23":"s38","31":"s46","32":"s39","33":"s40","34":"s41","35":"s42","36":"s43","37":"s44","38":"s45","39":"s47","40":"s48","41":"s49","42":"s50"},{"18":"r24","23":"r24","27":"r24","28":"r24","31":"r24","32":"r24","33":"r24","34":"r24","35":"r24","36":"r24","37":"r24","38":"r24","39":"r24","40":"r24","41":"r24","42":"r24"},{"18":"r25","23":"r25","27":"r25","28":"r25","31":"r25","32":"r25","33":"r25","34":"r25","35":"r25","36":"r25","37":"r25","38":"r25","39":"r25","40":"r25","41":"r25","42":"r25"},{"6":24,"9":73,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"6":24,"9":74,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"6":24,"9":75,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"6":24,"9":79,"10":29,"11":78,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","23":"s77","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"18":"r43","23":"r43","27":"r43","28":"r43","31":"r43","32":"r43","33":"r43","34":"r43","35":"r43","36":"r43","37":"r43","38":"r43","39":"r43","40":"r43","41":"r43","42":"r43"},{"18":"r49","23":"r49","27":"r49","28":"r49","31":"r49","32":"r49","33":"r49","34":"r49","35":"r49","36":"r49","37":"r49","38":"r49","39":"r49","40":"r49","41":"r49","42":"r49"},{"18":"r50","23":"r50","27":"r50","28":"r50","31":"r50","32":"r50","33":"r50","34":"r50","35":"r50","36":"r50","37":"r50","38":"r50","39":"r50","40":"r50","41":"r50","42":"r50"},{"18":"r51","23":"r51","27":"r51","28":"r51","31":"r51","32":"r51","33":"r51","34":"r51","35":"r51","36":"r51","37":"r51","38":"r51","39":"r51","40":"r51","41":"r51","42":"r51"},{"18":"r52","23":"r52","26":"s84","27":"r52","28":"r52","31":"r52","32":"r52","33":"r52","34":"r52","35":"r52","36":"r52","37":"r52","38":"r52","39":"r52","40":"r52","41":"r52","42":"r52","45":"s83"},{"18":"r55","23":"r55","27":"r55","28":"r55","31":"r55","32":"r55","33":"r55","34":"r55","35":"r55","36":"r55","37":"r55","38":"r55","39":"r55","40":"r55","41":"r55","42":"r55"},{"18":"r56","23":"r56","27":"r56","28":"r56","31":"r56","32":"r56","33":"r56","34":"r56","35":"r56","36":"r56","37":"r56","38":"r56","39":"r56","40":"r56","41":"r56","42":"r56"},{"18":"r57","23":"r57","27":"r57","28":"r57","31":"r57","32":"r57","33":"r57","34":"r57","35":"r57","36":"r57","37":"r57","38":"r57","39":"r57","40":"r57","41":"r57","42":"r57"},{"18":"r53","23":"r53","26":"r53","27":"r53","28":"r53","31":"r53","32":"r53","33":"r53","34":"r53","35":"r53","36":"r53","37":"r53","38":"r53","39":"r53","40":"r53","41":"r53","42":"r53","45":"r53"},{"6":51,"17":"s21"},{"6":24,"9":61,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"6":24,"9":62,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"6":24,"9":63,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"6":24,"9":64,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"6":24,"9":65,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"6":24,"9":66,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"6":24,"9":67,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"6":24,"9":68,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"6":24,"9":69,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"6":24,"9":70,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"6":24,"9":71,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"6":24,"9":72,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"18":"r10","21":"r10","24":"r10","25":"r10"},{"18":"r18","21":"r18","23":"r18","24":"r18","25":"r18","27":"r18","28":"r18","31":"r18","32":"r18","33":"r18","34":"r18","35":"r18","36":"r18","37":"r18","38":"r18","39":"r18","40":"r18","41":"r18","42":"r18"},{"18":"s56","28":"s57"},{"18":"r20","28":"r20"},{"29":"s59"},{"18":"r19","21":"r19","23":"r19","24":"r19","25":"r19","27":"r19","28":"r19","31":"r19","32":"r19","33":"r19","34":"r19","35":"r19","36":"r19","37":"r19","38":"r19","39":"r19","40":"r19","41":"r19","42":"r19"},{"8":58,"16":"s55","18":"r22","28":"r22"},{"18":"r21","28":"r21"},{"6":24,"9":60,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"18":"r23","28":"r23","31":"s46","32":"s39","33":"s40","34":"s41","35":"s42","36":"s43","37":"s44","38":"s45","39":"s47","40":"s48","41":"s49","42":"s50"},{"18":"r28","23":"r28","27":"r28","28":"r28","31":"s46","32":"r28","33":"r28","34":"r28","35":"r28","36":"r28","37":"r28","38":"s45","39":"s47","40":"s48","41":"r28","42":"r28"},{"18":"r29","23":"r29","27":"r29","28":"r29","31":"s46","32":"r29","33":"r29","34":"r29","35":"r29","36":"r29","37":"r29","38":"s45","39":"s47","40":"s48","41":"r29","42":"r29"},{"18":"r30","23":"r30","27":"r30","28":"r30","31":"s46","32":"r30","33":"r30","34":"r30","35":"r30","36":"r30","37":"r30","38":"s45","39":"s47","40":"s48","41":"r30","42":"r30"},{"18":"r31","23":"r31","27":"r31","28":"r31","31":"s46","32":"r31","33":"r31","34":"r31","35":"r31","36":"r31","37":"r31","38":"s45","39":"s47","40":"s48","41":"r31","42":"r31"},{"18":"r32","23":"r32","27":"r32","28":"r32","31":"s46","32":"r32","33":"r32","34":"r32","35":"r32","36":"r32","37":"r32","38":"s45","39":"s47","40":"s48","41":"r32","42":"r32"},{"18":"r33","23":"r33","27":"r33","28":"r33","31":"s46","32":"r33","33":"r33","34":"r33","35":"r33","36":"r33","37":"r33","38":"s45","39":"s47","40":"s48","41":"r33","42":"r33"},{"18":"r34","23":"r34","27":"r34","28":"r34","31":"r34","32":"r34","33":"r34","34":"r34","35":"r34","36":"r34","37":"r34","38":"r34","39":"s47","40":"s48","41":"r34","42":"r34"},{"18":"r35","23":"r35","27":"r35","28":"r35","31":"r35","32":"r35","33":"r35","34":"r35","35":"r35","36":"r35","37":"r35","38":"r35","39":"s47","40":"s48","41":"r35","42":"r35"},{"18":"r36","23":"r36","27":"r36","28":"r36","31":"r36","32":"r36","33":"r36","34":"r36","35":"r36","36":"r36","37":"r36","38":"r36","39":"r36","40":"r36","41":"r36","42":"r36"},{"18":"r37","23":"r37","27":"r37","28":"r37","31":"r37","32":"r37","33":"r37","34":"r37","35":"r37","36":"r37","37":"r37","38":"r37","39":"r37","40":"r37","41":"r37","42":"r37"},{"18":"r38","23":"r38","27":"r38","28":"r38","31":"s46","32":"s39","33":"s40","34":"s41","35":"s42","36":"s43","37":"s44","38":"s45","39":"s47","40":"s48","41":"r38","42":"r38"},{"18":"r39","23":"r39","27":"r39","28":"r39","31":"s46","32":"s39","33":"s40","34":"s41","35":"s42","36":"s43","37":"s44","38":"s45","39":"s47","40":"s48","41":"r39","42":"r39"},{"18":"r26","23":"r26","27":"r26","28":"r26","31":"r26","32":"r26","33":"r26","34":"r26","35":"r26","36":"r26","37":"r26","38":"r26","39":"r26","40":"r26","41":"r26","42":"r26"},{"18":"r27","23":"r27","27":"r27","28":"r27","31":"r27","32":"r27","33":"r27","34":"r27","35":"r27","36":"r27","37":"r27","38":"r27","39":"r27","40":"r27","41":"r27","42":"r27"},{"27":"s76","31":"s46","32":"s39","33":"s40","34":"s41","35":"s42","36":"s43","37":"s44","38":"s45","39":"s47","40":"s48","41":"s49","42":"s50"},{"18":"r40","23":"r40","27":"r40","28":"r40","31":"r40","32":"r40","33":"r40","34":"r40","35":"r40","36":"r40","37":"r40","38":"r40","39":"r40","40":"r40","41":"r40","42":"r40"},{"18":"r41","23":"r41","27":"r41","28":"r41","31":"r41","32":"r41","33":"r41","34":"r41","35":"r41","36":"r41","37":"r41","38":"r41","39":"r41","40":"r41","41":"r41","42":"r41"},{"23":"s80","28":"s81"},{"23":"r46","27":"r46","28":"r46","31":"s46","32":"s39","33":"s40","34":"s41","35":"s42","36":"s43","37":"s44","38":"s45","39":"s47","40":"s48","41":"s49","42":"s50"},{"18":"r42","23":"r42","27":"r42","28":"r42","31":"r42","32":"r42","33":"r42","34":"r42","35":"r42","36":"r42","37":"r42","38":"r42","39":"r42","40":"r42","41":"r42","42":"r42"},{"6":24,"9":82,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","23":"r48","26":"s27","27":"r48","28":"r48","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"23":"r47","27":"r47","28":"r47","31":"s46","32":"s39","33":"s40","34":"s41","35":"s42","36":"s43","37":"s44","38":"s45","39":"s47","40":"s48","41":"s49","42":"s50"},{"16":"s85"},{"6":24,"9":79,"10":29,"11":87,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","27":"s86","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"18":"r54","23":"r54","26":"r54","27":"r54","28":"r54","31":"r54","32":"r54","33":"r54","34":"r54","35":"r54","36":"r54","37":"r54","38":"r54","39":"r54","40":"r54","41":"r54","42":"r54","45":"r54"},{"18":"r44","23":"r44","27":"r44","28":"r44","31":"r44","32":"r44","33":"r44","34":"r44","35":"r44","36":"r44","37":"r44","38":"r44","39":"r44","40":"r44","41":"r44","42":"r44"},{"27":"s88","28":"s81"},{"18":"r45","23":"r45","27":"r45","28":"r45","31":"r45","32":"r45","33":"r45","34":"r45","35":"r45","36":"r45","37":"r45","38":"r45","39":"r45","40":"r45","41":"r45","42":"r45"},{"17":"s90","22":"s91"},{"2":93,"3":10,"4":12,"5":13,"18":"s92","21":"s11","24":"s14","25":"s15"},{"6":24,"9":102,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"18":"r13","21":"r13","24":"r13","25":"r13"},{"3":17,"4":12,"5":13,"18":"s94","21":"s11","24":"s14","25":"s15"},{"18":"r14","21":"r14","24":"r14","25":"r14"},{"6":24,"9":96,"10":29,"12":23,"13":33,"14":32,"16":"s37","17":"s21","22":"s28","26":"s27","30":"s25","31":"s26","43":"s30","44":"s31","46":"s34","47":"s35","48":"s36"},{"27":"s97","31":"s46","32":"s39","33":"s40","34":"s41","35":"s42","36":"s43","37":"s44","38":"s45","39":"s47","40":"s48","41":"s49","42":"s50"},{"17":"s98"},{"2":100,"3":10,"4":12,"5":13,"18":"s99","21":"s11","24":"s14","25":"s15"},{"18":"r16","21":"r16","24":"r16","25":"r16"},{"3":17,"4":12,"5":13,"18":"s101","21":"s11","24":"s14","25":"s15"},{"18":"r17","21":"r17","24":"r17","25":"r17"},{"23":"s103","31":"s46","32":"s39","33":"s40","34":"s41","35":"s42","36":"s43","37":"s44","38":"s45","39":"s47","40":"s48","41":"s49","42":"s50"},{"17":"s104"},{"2":105,"3":10,"4":12,"5":13,"21":"s11","24":"s14","25":"s15"},{"3":17,"4":12,"5":13,"18":"s106","21":"s11","24":"s14","25":"s15"},{"18":"r15","21":"r15","24":"r15","25":"r15"},{"17":"s108"},{"18":"s109","20":"s110"},{"15":"r5","19":"r5","49":"r5"},{"18":"s111"},{"15":"r6","19":"r6","49":"r6"}];

/**
 * Parsing stack.
 */
const stack = [];

/**
 * Tokenizer instance.
 */
let tokenizer;
/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 * See `--custom-tokinzer` to skip this generation, and use a custom one.
 */

const lexRules = [[/^\/\*[^*]*\*+([^\/][^*]*\*+)*\//, function() { /*return 'COMMENT_BLOCK'*/ }],
[/^\/\/[^\r\n]*/, function() { /*return 'COMMENT_LINE'*/ }],
[/^\"([^\\\n"]|\\.)*\"/, function() { return 'STRING_TRIPLE' }],
[/^'([^\\\n']|\\.)*'/, function() { return 'STRING_SINGLE' }],
[/^%[0-9A-Fa-f\s]*%/, function() { return 'STRING_HEX' }],
[/^\s+/, function() { /* return 'WHITESPACE' */ }],
[/^\n/, function() { /* return 'NEWLINE' */ }],
[/^protocol/, function() { return 'PROTOCOL' }],
[/^program/, function() { return 'PROGRAM' }],
[/^segments/, function() { return 'SEGMENTS' }],
[/^segment/, function() { return 'SEGMENT' }],
[/^oneof/, function() { return 'ONEOF' }],
[/^0[xX][0-9a-fA-F]+/, function() { return 'NUMBER_HEX' }],
[/^[0-9]+(?:\.[0-9]+)?/, function() { return 'NUMBER' }],
[/^[a-zA-Z_$][a-zA-Z0-9_]*/, function() { return 'ID' }],
[/^!=/, function() { return 'NOT_EQ' }],
[/^!/, function() { return 'NOT' }],
[/^==/, function() { return 'EQ_EQ' }],
[/^>=/, function() { return 'GT_EQ' }],
[/^<=/, function() { return 'LT_EQ' }],
[/^&&/, function() { return 'AND' }],
[/^\|\|/, function() { return 'OR' }],
[/^{/, function() { return '{' }],
[/^}/, function() { return '}' }],
[/^]/, function() { return ']' }],
[/^\[/, function() { return '[' }],
[/^,/, function() { return ',' }],
[/^\:/, function() { return ':' }],
[/^\./, function() { return 'DOT' }],
[/^\+/, function() { return '+' }],
[/^-/, function() { return '-' }],
[/^\*/, function() { return '*' }],
[/^\//, function() { return '/' }],
[/^\(/, function() { return '(' }],
[/^\)/, function() { return ')' }],
[/^>/, function() { return '>' }],
[/^</, function() { return '<' }]];
const lexRulesByConditions = {"INITIAL":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]};

const EOF_TOKEN = {
  type: EOF,
  value: '',
};

tokenizer = {
  initString(string) {
    this._string = string;
    this._cursor = 0;

    this._states = ['INITIAL'];
    this._tokensQueue = [];

    this._currentLine = 1;
    this._currentColumn = 0;
    this._currentLineBeginOffset = 0;

    /**
     * Matched token location data.
     */
    this._tokenStartOffset = 0;
    this._tokenEndOffset = 0;
    this._tokenStartLine = 1;
    this._tokenEndLine = 1;
    this._tokenStartColumn = 0;
    this._tokenEndColumn = 0;

    return this;
  },

  /**
   * Returns tokenizer states.
   */
  getStates() {
    return this._states;
  },

  getCurrentState() {
    return this._states[this._states.length - 1];
  },

  pushState(state) {
    this._states.push(state);
  },

  begin(state) {
    this.pushState(state);
  },

  popState() {
    if (this._states.length > 1) {
      return this._states.pop();
    }
    return this._states[0];
  },

  getNextToken() {
    // Something was queued, return it.
    if (this._tokensQueue.length > 0) {
      return this.onToken(this._toToken(this._tokensQueue.shift()));
    }

    if (!this.hasMoreTokens()) {
      return this.onToken(EOF_TOKEN);
    }

    let string = this._string.slice(this._cursor);
    let lexRulesForState = lexRulesByConditions[this.getCurrentState()];

    for (let i = 0; i < lexRulesForState.length; i++) {
      let lexRuleIndex = lexRulesForState[i];
      let lexRule = lexRules[lexRuleIndex];

      let matched = this._match(string, lexRule[0]);

      // Manual handling of EOF token (the end of string). Return it
      // as `EOF` symbol.
      if (string === '' && matched === '') {
        this._cursor++;
      }

      if (matched !== null) {
        yytext = matched;
        yyleng = yytext.length;
        let token = lexRule[1].call(this);

        if (!token) {
          return this.getNextToken();
        }

        // If multiple tokens are returned, save them to return
        // on next `getNextToken` call.

        if (Array.isArray(token)) {
          const tokensToQueue = token.slice(1);
          token = token[0];
          if (tokensToQueue.length > 0) {
            this._tokensQueue.unshift(...tokensToQueue);
          }
        }

        return this.onToken(this._toToken(token, yytext));
      }
    }

    if (this.isEOF()) {
      this._cursor++;
      return EOF_TOKEN;
    }

    this.throwUnexpectedToken(
      string[0],
      this._currentLine,
      this._currentColumn
    );
  },

  /**
   * Throws default "Unexpected token" exception, showing the actual
   * line from the source, pointing with the ^ marker to the bad token.
   * In addition, shows `line:column` location.
   */
  throwUnexpectedToken(symbol, line, column) {
    const lineSource = this._string.split('\n')[line - 1];
    let lineData = '';

    if (lineSource) {
      const pad = ' '.repeat(column);
      lineData = '\n\n' + lineSource + '\n' + pad + '^\n';
    }

    throw new SyntaxError(
      `${lineData}Unexpected token: "${symbol}" ` +
      `at ${line}:${column}.`
    );
  },

  getCursor() {
    return this._cursor;
  },

  getCurrentLine() {
    return this._currentLine;
  },

  getCurrentColumn() {
    return this._currentColumn;
  },

  _captureLocation(matched) {
    const nlRe = /\n/g;

    // Absolute offsets.
    this._tokenStartOffset = this._cursor;

    // Line-based locations, start.
    this._tokenStartLine = this._currentLine;
    this._tokenStartColumn =
      this._tokenStartOffset - this._currentLineBeginOffset;

    // Extract `\n` in the matched token.
    let nlMatch;
    while ((nlMatch = nlRe.exec(matched)) !== null) {
      this._currentLine++;
      this._currentLineBeginOffset = this._tokenStartOffset + nlMatch.index + 1;
    }

    this._tokenEndOffset = this._cursor + matched.length;

    // Line-based locations, end.
    this._tokenEndLine = this._currentLine;
    this._tokenEndColumn = this._currentColumn =
      (this._tokenEndOffset - this._currentLineBeginOffset);
  },

  _toToken(tokenType, yytext = '') {
    return {
      // Basic data.
      type: tokenType,
      value: yytext,

      // Location data.
      startOffset: this._tokenStartOffset,
      endOffset: this._tokenEndOffset,
      startLine: this._tokenStartLine,
      endLine: this._tokenEndLine,
      startColumn: this._tokenStartColumn,
      endColumn: this._tokenEndColumn,
    };
  },

  isEOF() {
    return this._cursor === this._string.length;
  },

  hasMoreTokens() {
    return this._cursor <= this._string.length;
  },

  _match(string, regexp) {
    let matched = string.match(regexp);
    if (matched) {
      // Handle `\n` in the matched token to track line numbers.
      this._captureLocation(matched[0]);
      this._cursor += matched[0].length;
      return matched[0];
    }
    return null;
  },

  /**
   * Allows analyzing, and transforming token. Default implementation
   * just passes the token through.
   */
  onToken(token) {
    return token;
  },
};

/**
 * Expose tokenizer so it can be accessed in semantic actions.
 */
yy.lexer = tokenizer;
yy.tokenizer = tokenizer;

/**
 * Global parsing options. Some options can be shadowed per
 * each `parse` call, if the optations are passed.
 *
 * Initalized to the `captureLocations` which is passed
 * from the generator. Other options can be added at runtime.
 */
yy.options = {
  captureLocations: true,
};

/**
 * Parsing module.
 */
const yyparse = {
  /**
   * Sets global parsing options.
   */
  setOptions(options) {
    yy.options = options;
    return this;
  },

  /**
   * Returns parsing options.
   */
  getOptions() {
    return yy.options;
  },

  /**
   * Parses a string.
   */
  parse(string, parseOptions) {
    if (!tokenizer) {
      throw new Error(`Tokenizer instance wasn't specified.`);
    }

    tokenizer.initString(string);

    /**
     * If parse options are passed, override global parse options for
     * this call, and later restore global options.
     */
    let globalOptions = yy.options;
    if (parseOptions) {
      yy.options = Object.assign({}, yy.options, parseOptions);
    }

    /**
     * Allow callers to do setup work based on the
     * parsing string, and passed options.
     */
    yyparse.onParseBegin(string, tokenizer, yy.options);

    stack.length = 0;
    stack.push(0);

    let token = tokenizer.getNextToken();
    let shiftedToken = null;

    do {
      if (!token) {
        // Restore options.
        yy.options = globalOptions;
        unexpectedEndOfInput();
      }

      let state = stack[stack.length - 1];
      let column = tokens[token.type];

      if (!table[state].hasOwnProperty(column)) {
        yy.options = globalOptions;
        unexpectedToken(token);
      }

      let entry = table[state][column];

      // Shift action.
      if (entry[0] === 's') {
        let loc = null;

        if (yy.options.captureLocations) {
          loc = {
            startOffset: token.startOffset,
            endOffset: token.endOffset,
            startLine: token.startLine,
            endLine: token.endLine,
            startColumn: token.startColumn,
            endColumn: token.endColumn,
          };
        }

        shiftedToken = this.onShift(token);

        stack.push(
          {symbol: tokens[shiftedToken.type], semanticValue: shiftedToken.value, loc},
          Number(entry.slice(1))
        );

        token = tokenizer.getNextToken();
      }

      // Reduce action.
      else if (entry[0] === 'r') {
        let productionNumber = entry.slice(1);
        let production = productions[productionNumber];
        let hasSemanticAction = typeof production[2] === 'function';
        let semanticValueArgs = hasSemanticAction ? [] : null;

        const locationArgs = (
          hasSemanticAction && yy.options.captureLocations
            ? []
            : null
        );

        if (production[1] !== 0) {
          let rhsLength = production[1];
          while (rhsLength-- > 0) {
            stack.pop();
            let stackEntry = stack.pop();

            if (hasSemanticAction) {
              semanticValueArgs.unshift(stackEntry.semanticValue);

              if (locationArgs) {
                locationArgs.unshift(stackEntry.loc);
              }
            }
          }
        }

        const reduceStackEntry = {symbol: production[0]};

        if (hasSemanticAction) {
          yytext = shiftedToken ? shiftedToken.value : null;
          yyleng = shiftedToken ? shiftedToken.value.length : null;

          const semanticActionArgs = (
            locationArgs !== null
              ? semanticValueArgs.concat(locationArgs)
              : semanticValueArgs
          );

          production[2](...semanticActionArgs);

          reduceStackEntry.semanticValue = __;

          if (locationArgs) {
            reduceStackEntry.loc = __loc;
          }
        }

        const nextState = stack[stack.length - 1];
        const symbolToReduceWith = production[0];

        stack.push(
          reduceStackEntry,
          table[nextState][symbolToReduceWith]
        );
      }

      // Accept.
      else if (entry === 'acc') {
        stack.pop();
        let parsed = stack.pop();

        if (stack.length !== 1 ||
            stack[0] !== 0 ||
            tokenizer.hasMoreTokens()) {
          // Restore options.
          yy.options = globalOptions;
          unexpectedToken(token);
        }

        if (parsed.hasOwnProperty('semanticValue')) {
          yy.options = globalOptions;
          yyparse.onParseEnd(parsed.semanticValue);
          return parsed.semanticValue;
        }

        yyparse.onParseEnd();

        // Restore options.
        yy.options = globalOptions;
        return true;
      }

    } while (tokenizer.hasMoreTokens() || stack.length > 1);
  },

  setTokenizer(customTokenizer) {
    tokenizer = customTokenizer;
    return yyparse;
  },

  getTokenizer() {
    return tokenizer;
  },

  onParseBegin(string, tokenizer, options) {},
  onParseEnd(parsed) {},

  /**
   * Allows analyzing, and transforming shifted token. Default implementation
   * just passes the token through.
   */
  onShift(token) {
    return token;
  },
};



    function newList(item) {
      if(item) {
        return [item];
      } else {
        return [];
      }
    }

    function joinList(list, item) {
      if(list && item) {
        list.push(item);
      }
      return list;
    }

    function newKindList(kind, item) {
      if(item) {
        return {kind: kind, list: [item]};
      } else {
        return {kind: kind, list: []};
      }
    }

    function joinKindList(list, item) {
      if(list && list.list && item) {
        list.list.push(item);
      }
      return list;
    }

    function newProp(id, exp, id_loc, exp_loc) {
      return {
        kind: 'prop',
        name: id,
        value: exp,
        name_from: id_loc.startOffset,
        name_to: id_loc.endOffset,
        name_line: id_loc.startLine,
        value_from: exp_loc.startOffset,
        value_to: exp_loc.endOffset,
        value_line: exp_loc.startLine,
      }
    }

    function newProtBranch(kind, exp, seglist, exp_loc) {
      return {
        kind: kind,
        exp: exp,
        seglist: seglist,
        exp_from: exp_loc.startOffset,
        exp_to: exp_loc.endOffset,
        exp_line: exp_loc.startLine,
      }
    }

    function newProtSeggroup(name, seglist, name_loc, repeated) {
      let res = {
        kind: 'seggroup',
        name: name,
        seglist: seglist,
        name_from: name_loc.startOffset,
        name_to: name_loc.endOffset,
        name_line: name_loc.startLine,
      }
      if(repeated) {
        res.repeated = repeated;
      }
      return res;
    }

    function newElement(kind, name, body_name, body, name_loc, repeated) {
      let res = {
        kind: kind,
        name: name,
        name_from: name_loc.startOffset,
        name_to: name_loc.endOffset,
        name_line: name_loc.startLine,
      }
      res[body_name] = body;
      if(repeated) {
        res.repeated = repeated;
      }
      return res;
    }




function unexpectedToken(token) {
  if (token.type === EOF) {
    unexpectedEndOfInput();
  }

  tokenizer.throwUnexpectedToken(
    token.value,
    token.startLine,
    token.startColumn
  );
}

function unexpectedEndOfInput() {
  parseError(`Unexpected end of input.`);
}

function parseError(message) {
  throw new SyntaxError(message);
}

module.exports = yyparse;
