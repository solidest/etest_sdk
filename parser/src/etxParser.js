/**
 * LR parser generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/path-to-output-parser-file.js
 */

'use strict';

/**
 * Matched token text.
 */
let yytext;

/**
 * Length of the matched token text.
 */
let yyleng;

/**
 * Storage object.
 */
let yy = {};

/**
 * Result of semantic action.
 */
let __;

/**
 * Result location object.
 */
let __loc;

function yyloc(start, end) {
  if (!yy.options.captureLocations) {
    return null;
  }

  // Epsilon doesn't produce location.
  if (!start || !end) {
    return start || end;
  }

  return {
    startOffset: start.startOffset,
    endOffset: end.endOffset,
    startLine: start.startLine,
    endLine: end.endLine,
    startColumn: start.startColumn,
    endColumn: end.endColumn,
  };
}

const EOF = '$';

/**
 * List of productions (generated by Syntax tool).
 */
const productions = [[-1,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1 }],
[0,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[0,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = joinList(_1, _2); }],
[1,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);let res = newElement('protocol', _3, 'seglist', null, _3loc); res.bittype = 'lr'; __ = res;  }],
[1,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);let res = newElement('protocol', _3, 'seglist', null, _3loc); res.bittype = 'rl'; __ = res;  }],
[1,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = newElement('protocol', _2, 'seglist', null, _2loc); }],
[1,6,(_1,_2,_3,_4,_5,_6,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc) => { __loc = yyloc(_1loc, _6loc);let res = newElement('protocol', _3, 'seglist', _5, _3loc); res.bittype = 'lr'; __ = res;  }],
[1,6,(_1,_2,_3,_4,_5,_6,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc) => { __loc = yyloc(_1loc, _6loc);let res = newElement('protocol', _3, 'seglist', _5, _3loc); res.bittype = 'rl'; __ = res;  }],
[1,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = newElement('protocol', _2,'seglist', _4, _2loc); }],
[1,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = {kind: 'device', name: _2, value: null}; }],
[1,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = {kind: 'device', name: _2, value: _4}; }],
[1,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = {kind: 'topology', name: _2, value: null}; }],
[1,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = {kind: 'topology', name: _2, value: _4}; }],
[2,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[2,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = joinList(_1, _2); }],
[3,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = newElement('segment', _2, 'props', _3, _2loc); }],
[3,6,(_1,_2,_3,_4,_5,_6,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc) => { __loc = yyloc(_1loc, _6loc);__ = newElement('segment', _2, 'props', _6, _2loc, _4); }],
[3,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[3,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = newOneof(_3); }],
[4,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = newProtSeggroup(_2, null, _2loc); }],
[4,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = newProtSeggroup(_2, _4, _2loc); }],
[4,8,(_1,_2,_3,_4,_5,_6,_7,_8,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc,_7loc,_8loc) => { __loc = yyloc(_1loc, _8loc);__ = newProtSeggroup(_2, _7, _2loc, _4); }],
[5,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[5,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = joinList(_1, _2); }],
[6,8,(_1,_2,_3,_4,_5,_6,_7,_8,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc,_7loc,_8loc) => { __loc = yyloc(_1loc, _8loc);__ = newBranch(_6, _3, _8, _3loc); }],
[7,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[7,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = joinList(_1, _2); }],
[8,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'connector', name: _2, type: _1, config: _3}; }],
[9,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[9,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1.concat(_2); }],
[10,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = []; }],
[10,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = _4; }],
[10,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = []; }],
[10,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = _4 }],
[10,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = []; }],
[10,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = _4; }],
[11,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[11,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[11,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[12,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = null; }],
[12,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = { kind: 'linking', name: _1, value: _4 }; }],
[13,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[13,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[13,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[14,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = null; }],
[14,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = {kind: 'uut', value: _4}; }],
[14,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = null; }],
[14,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = {kind: 'etest', value: _4}; }],
[14,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = null; }],
[14,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = {kind: 'simu', value: _4}; }],
[15,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[15,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[15,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[16,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);_1.kind = 'binding'; _1.bind = eval(_3); __ = _1; }],
[16,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);_1.kind = 'binding'; _1.bind = eval(_3); __ = _1; }],
[17,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1) }],
[17,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[17,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1 }],
[18,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = { kind: 'dev_connector', device: _1, connector: _3}; }],
[19,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[19,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[19,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[20,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = newList(null); }],
[20,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = _2; }],
[21,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[21,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[21,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = newProp(_1, _3, _1loc, _3loc); }],
[23,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[23,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[23,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = {kind: 'not', exp: _2}; }],
[23,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = {kind: 'uminus', exp: _2}; }],
[23,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'not_eq', left: _1, right: _3}; }],
[23,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'eq_eq', left: _1, right: _3}; }],
[23,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'gt_eq', left: _1, right: _3}; }],
[23,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'lt_eq', left: _1, right: _3}; }],
[23,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'gt', left: _1, right: _3}; }],
[23,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'lt', left: _1, right: _3}; }],
[23,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'add', left: _1, right: _3}; }],
[23,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'subtract', left: _1, right: _3}; }],
[23,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'multiply', left: _1, right: _3}; }],
[23,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'divide', left: _1, right: _3}; }],
[23,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'and', left: _1, right: _3}; }],
[23,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'or', left: _1, right: _3}; }],
[23,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = _2; }],
[23,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = newKindList('array', null); }],
[23,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = _2; }],
[23,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[24,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = { kind: _1 }; }],
[24,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = {kind: _1, params: _3}; }],
[25,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[25,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[25,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[26,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newKindList('array', _1); }],
[26,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinKindList(_1, _3); }],
[26,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[27,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'number', value: eval(yytext)}; }],
[27,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'number', value: eval(yytext)}; }],
[27,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[27,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[27,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'bool', value: true}; }],
[27,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'bool', value: false}; }],
[28,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newKindList('pid', _1); }],
[28,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinKindList(_1, _3); }],
[29,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'string', value: eval(yytext)}; }],
[29,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'string', value: eval(yytext)}; }],
[29,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'strhex',  value: yytext.replace(/%/g, '')}; }]];

/**
 * Encoded tokens map.
 */
const tokens = {"BITLR":"30","PROTOCOL":"31","ID":"32","{":"33","}":"34","BITRL":"35","DEVICE":"36","TOPOLOGY":"37","SEGMENT":"38","[":"39","]":"40","ONEOF":"41","SEGMENTS":"42","WHEN":"43","(":"44",")":"45","AS":"46",":":"47","INTFTYPE":"48","LINKING":"49","MAPPING":"50","BINDING":"51",",":"52","UUT":"53","ETEST":"54","SIMU":"55","STRING_TRIPLE":"56","STRING_SINGLE":"57","DOT":"58","NOT":"59","-":"60","NOT_EQ":"61","EQ_EQ":"62","GT_EQ":"63","LT_EQ":"64",">":"65","<":"66","+":"67","*":"68","/":"69","AND":"70","OR":"71","NUMBER":"72","NUMBER_HEX":"73","TRUE":"74","FALSE":"75","STRING_HEX":"76","$":"77"};

/**
 * Parsing table (generated by Syntax tool).
 */
const table = [{"0":1,"1":2,"30":"s3","31":"s5","35":"s4","36":"s6","37":"s7"},{"1":8,"30":"s3","31":"s5","35":"s4","36":"s6","37":"s7","77":"acc"},{"30":"r1","31":"r1","35":"r1","36":"r1","37":"r1","77":"r1"},{"31":"s9"},{"31":"s121"},{"32":"s127"},{"32":"s132"},{"32":"s142"},{"30":"r2","31":"r2","35":"r2","36":"r2","37":"r2","77":"r2"},{"32":"s10"},{"33":"s11"},{"2":13,"3":14,"4":16,"34":"s12","38":"s15","41":"s17","42":"s18"},{"30":"r3","31":"r3","35":"r3","36":"r3","37":"r3","77":"r3"},{"3":20,"4":16,"34":"s19","38":"s15","41":"s17","42":"s18"},{"34":"r13","38":"r13","41":"r13","42":"r13","43":"r13"},{"32":"s21"},{"34":"r17","38":"r17","41":"r17","42":"r17","43":"r17"},{"33":"s97"},{"32":"s110"},{"30":"r6","31":"r6","35":"r6","36":"r6","37":"r6","77":"r6"},{"34":"r14","38":"r14","41":"r14","42":"r14","43":"r14"},{"20":22,"33":"s24","39":"s23"},{"34":"r15","38":"r15","41":"r15","42":"r15","43":"r15"},{"20":27,"23":25,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"21":58,"22":59,"32":"s60","34":"s57"},{"40":"s43","60":"s51","61":"s44","62":"s45","63":"s46","64":"s47","65":"s48","66":"s49","67":"s50","68":"s52","69":"s53","70":"s54","71":"s55"},{"34":"r68","40":"r68","45":"r68","52":"r68","60":"r68","61":"r68","62":"r68","63":"r68","64":"r68","65":"r68","66":"r68","67":"r68","68":"r68","69":"r68","70":"r68","71":"r68"},{"34":"r69","40":"r69","45":"r69","52":"r69","60":"r69","61":"r69","62":"r69","63":"r69","64":"r69","65":"r69","66":"r69","67":"r69","68":"r69","69":"r69","70":"r69","71":"r69"},{"20":27,"23":78,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"20":27,"23":79,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"20":27,"23":80,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"20":27,"23":84,"24":32,"26":83,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","40":"s82","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"34":"r87","40":"r87","45":"r87","52":"r87","60":"r87","61":"r87","62":"r87","63":"r87","64":"r87","65":"r87","66":"r87","67":"r87","68":"r87","69":"r87","70":"r87","71":"r87"},{"34":"r96","40":"r96","45":"r96","52":"r96","60":"r96","61":"r96","62":"r96","63":"r96","64":"r96","65":"r96","66":"r96","67":"r96","68":"r96","69":"r96","70":"r96","71":"r96"},{"34":"r97","40":"r97","45":"r97","52":"r97","60":"r97","61":"r97","62":"r97","63":"r97","64":"r97","65":"r97","66":"r97","67":"r97","68":"r97","69":"r97","70":"r97","71":"r97"},{"34":"r98","40":"r98","45":"r98","52":"r98","60":"r98","61":"r98","62":"r98","63":"r98","64":"r98","65":"r98","66":"r98","67":"r98","68":"r98","69":"r98","70":"r98","71":"r98"},{"34":"r99","40":"r99","45":"r99","52":"r99","58":"s88","60":"r99","61":"r99","62":"r99","63":"r99","64":"r99","65":"r99","66":"r99","67":"r99","68":"r99","69":"r99","70":"r99","71":"r99"},{"34":"r100","40":"r100","45":"r100","52":"r100","60":"r100","61":"r100","62":"r100","63":"r100","64":"r100","65":"r100","66":"r100","67":"r100","68":"r100","69":"r100","70":"r100","71":"r100"},{"34":"r101","40":"r101","45":"r101","52":"r101","60":"r101","61":"r101","62":"r101","63":"r101","64":"r101","65":"r101","66":"r101","67":"r101","68":"r101","69":"r101","70":"r101","71":"r101"},{"34":"r104","40":"r104","45":"r104","52":"r104","60":"r104","61":"r104","62":"r104","63":"r104","64":"r104","65":"r104","66":"r104","67":"r104","68":"r104","69":"r104","70":"r104","71":"r104"},{"34":"r105","40":"r105","45":"r105","52":"r105","60":"r105","61":"r105","62":"r105","63":"r105","64":"r105","65":"r105","66":"r105","67":"r105","68":"r105","69":"r105","70":"r105","71":"r105"},{"34":"r106","40":"r106","45":"r106","52":"r106","60":"r106","61":"r106","62":"r106","63":"r106","64":"r106","65":"r106","66":"r106","67":"r106","68":"r106","69":"r106","70":"r106","71":"r106"},{"34":"r102","40":"r102","44":"s90","45":"r102","52":"r102","58":"r102","60":"r102","61":"r102","62":"r102","63":"r102","64":"r102","65":"r102","66":"r102","67":"r102","68":"r102","69":"r102","70":"r102","71":"r102"},{"20":56,"33":"s24"},{"20":27,"23":66,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"20":27,"23":67,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"20":27,"23":68,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"20":27,"23":69,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"20":27,"23":70,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"20":27,"23":71,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"20":27,"23":72,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"20":27,"23":73,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"20":27,"23":74,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"20":27,"23":75,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"20":27,"23":76,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"20":27,"23":77,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"34":"r16","38":"r16","41":"r16","42":"r16","43":"r16"},{"34":"r62","38":"r62","40":"r62","41":"r62","42":"r62","43":"r62","45":"r62","48":"r62","52":"r62","60":"r62","61":"r62","62":"r62","63":"r62","64":"r62","65":"r62","66":"r62","67":"r62","68":"r62","69":"r62","70":"r62","71":"r62"},{"34":"s61","52":"s62"},{"34":"r64","52":"r64"},{"47":"s64"},{"34":"r63","38":"r63","40":"r63","41":"r63","42":"r63","43":"r63","45":"r63","48":"r63","52":"r63","60":"r63","61":"r63","62":"r63","63":"r63","64":"r63","65":"r63","66":"r63","67":"r63","68":"r63","69":"r63","70":"r63","71":"r63"},{"22":63,"32":"s60","34":"r66","52":"r66"},{"34":"r65","52":"r65"},{"20":27,"23":65,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"34":"r67","52":"r67","60":"s51","61":"s44","62":"s45","63":"s46","64":"s47","65":"s48","66":"s49","67":"s50","68":"s52","69":"s53","70":"s54","71":"s55"},{"34":"r72","40":"r72","45":"r72","52":"r72","60":"s51","61":"r72","62":"r72","63":"r72","64":"r72","65":"r72","66":"r72","67":"s50","68":"s52","69":"s53","70":"r72","71":"r72"},{"34":"r73","40":"r73","45":"r73","52":"r73","60":"s51","61":"r73","62":"r73","63":"r73","64":"r73","65":"r73","66":"r73","67":"s50","68":"s52","69":"s53","70":"r73","71":"r73"},{"34":"r74","40":"r74","45":"r74","52":"r74","60":"s51","61":"r74","62":"r74","63":"r74","64":"r74","65":"r74","66":"r74","67":"s50","68":"s52","69":"s53","70":"r74","71":"r74"},{"34":"r75","40":"r75","45":"r75","52":"r75","60":"s51","61":"r75","62":"r75","63":"r75","64":"r75","65":"r75","66":"r75","67":"s50","68":"s52","69":"s53","70":"r75","71":"r75"},{"34":"r76","40":"r76","45":"r76","52":"r76","60":"s51","61":"r76","62":"r76","63":"r76","64":"r76","65":"r76","66":"r76","67":"s50","68":"s52","69":"s53","70":"r76","71":"r76"},{"34":"r77","40":"r77","45":"r77","52":"r77","60":"s51","61":"r77","62":"r77","63":"r77","64":"r77","65":"r77","66":"r77","67":"s50","68":"s52","69":"s53","70":"r77","71":"r77"},{"34":"r78","40":"r78","45":"r78","52":"r78","60":"r78","61":"r78","62":"r78","63":"r78","64":"r78","65":"r78","66":"r78","67":"r78","68":"s52","69":"s53","70":"r78","71":"r78"},{"34":"r79","40":"r79","45":"r79","52":"r79","60":"r79","61":"r79","62":"r79","63":"r79","64":"r79","65":"r79","66":"r79","67":"r79","68":"s52","69":"s53","70":"r79","71":"r79"},{"34":"r80","40":"r80","45":"r80","52":"r80","60":"r80","61":"r80","62":"r80","63":"r80","64":"r80","65":"r80","66":"r80","67":"r80","68":"r80","69":"r80","70":"r80","71":"r80"},{"34":"r81","40":"r81","45":"r81","52":"r81","60":"r81","61":"r81","62":"r81","63":"r81","64":"r81","65":"r81","66":"r81","67":"r81","68":"r81","69":"r81","70":"r81","71":"r81"},{"34":"r82","40":"r82","45":"r82","52":"r82","60":"s51","61":"s44","62":"s45","63":"s46","64":"s47","65":"s48","66":"s49","67":"s50","68":"s52","69":"s53","70":"r82","71":"r82"},{"34":"r83","40":"r83","45":"r83","52":"r83","60":"s51","61":"s44","62":"s45","63":"s46","64":"s47","65":"s48","66":"s49","67":"s50","68":"s52","69":"s53","70":"r83","71":"r83"},{"34":"r70","40":"r70","45":"r70","52":"r70","60":"r70","61":"r70","62":"r70","63":"r70","64":"r70","65":"r70","66":"r70","67":"r70","68":"r70","69":"r70","70":"r70","71":"r70"},{"34":"r71","40":"r71","45":"r71","52":"r71","60":"r71","61":"r71","62":"r71","63":"r71","64":"r71","65":"r71","66":"r71","67":"r71","68":"r71","69":"r71","70":"r71","71":"r71"},{"45":"s81","60":"s51","61":"s44","62":"s45","63":"s46","64":"s47","65":"s48","66":"s49","67":"s50","68":"s52","69":"s53","70":"s54","71":"s55"},{"34":"r84","40":"r84","45":"r84","52":"r84","60":"r84","61":"r84","62":"r84","63":"r84","64":"r84","65":"r84","66":"r84","67":"r84","68":"r84","69":"r84","70":"r84","71":"r84"},{"34":"r85","40":"r85","45":"r85","52":"r85","60":"r85","61":"r85","62":"r85","63":"r85","64":"r85","65":"r85","66":"r85","67":"r85","68":"r85","69":"r85","70":"r85","71":"r85"},{"40":"s85","52":"s86"},{"40":"r93","52":"r93","60":"s51","61":"s44","62":"s45","63":"s46","64":"s47","65":"s48","66":"s49","67":"s50","68":"s52","69":"s53","70":"s54","71":"s55"},{"34":"r86","40":"r86","45":"r86","52":"r86","60":"r86","61":"r86","62":"r86","63":"r86","64":"r86","65":"r86","66":"r86","67":"r86","68":"r86","69":"r86","70":"r86","71":"r86"},{"20":27,"23":87,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","40":"r95","44":"s30","52":"r95","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"40":"r94","52":"r94","60":"s51","61":"s44","62":"s45","63":"s46","64":"s47","65":"s48","66":"s49","67":"s50","68":"s52","69":"s53","70":"s54","71":"s55"},{"32":"s89"},{"34":"r103","40":"r103","45":"r103","52":"r103","58":"r103","60":"r103","61":"r103","62":"r103","63":"r103","64":"r103","65":"r103","66":"r103","67":"r103","68":"r103","69":"r103","70":"r103","71":"r103"},{"20":27,"23":93,"24":32,"25":92,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","45":"s91","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"34":"r88","40":"r88","45":"r88","52":"r88","60":"r88","61":"r88","62":"r88","63":"r88","64":"r88","65":"r88","66":"r88","67":"r88","68":"r88","69":"r88","70":"r88","71":"r88"},{"45":"s94","52":"s95"},{"45":"r90","52":"r90","60":"s51","61":"s44","62":"s45","63":"s46","64":"s47","65":"s48","66":"s49","67":"s50","68":"s52","69":"s53","70":"s54","71":"s55"},{"34":"r89","40":"r89","45":"r89","52":"r89","60":"r89","61":"r89","62":"r89","63":"r89","64":"r89","65":"r89","66":"r89","67":"r89","68":"r89","69":"r89","70":"r89","71":"r89"},{"20":27,"23":96,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","45":"r92","52":"r92","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"45":"r91","52":"r91","60":"s51","61":"s44","62":"s45","63":"s46","64":"s47","65":"s48","66":"s49","67":"s50","68":"s52","69":"s53","70":"s54","71":"s55"},{"5":98,"6":99,"43":"s100"},{"6":102,"34":"s101","43":"s100"},{"34":"r22","43":"r22"},{"44":"s103"},{"34":"r18","38":"r18","41":"r18","42":"r18","43":"r18"},{"34":"r23","43":"r23"},{"20":27,"23":104,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"45":"s105","60":"s51","61":"s44","62":"s45","63":"s46","64":"s47","65":"s48","66":"s49","67":"s50","68":"s52","69":"s53","70":"s54","71":"s55"},{"46":"s106"},{"32":"s107"},{"47":"s108"},{"2":109,"3":14,"4":16,"38":"s15","41":"s17","42":"s18"},{"3":20,"4":16,"34":"r24","38":"s15","41":"s17","42":"s18","43":"r24"},{"33":"s111","39":"s112"},{"2":114,"3":14,"4":16,"34":"s113","38":"s15","41":"s17","42":"s18"},{"20":27,"23":116,"24":32,"27":26,"28":36,"29":35,"32":"s42","33":"s24","39":"s31","44":"s30","56":"s39","57":"s40","59":"s28","60":"s29","72":"s33","73":"s34","74":"s37","75":"s38","76":"s41"},{"34":"r19","38":"r19","41":"r19","42":"r19","43":"r19"},{"3":20,"4":16,"34":"s115","38":"s15","41":"s17","42":"s18"},{"34":"r20","38":"r20","41":"r20","42":"r20","43":"r20"},{"40":"s117","60":"s51","61":"s44","62":"s45","63":"s46","64":"s47","65":"s48","66":"s49","67":"s50","68":"s52","69":"s53","70":"s54","71":"s55"},{"33":"s118"},{"2":119,"3":14,"4":16,"38":"s15","41":"s17","42":"s18"},{"3":20,"4":16,"34":"s120","38":"s15","41":"s17","42":"s18"},{"34":"r21","38":"r21","41":"r21","42":"r21","43":"r21"},{"32":"s122"},{"33":"s123"},{"2":125,"3":14,"4":16,"34":"s124","38":"s15","41":"s17","42":"s18"},{"30":"r4","31":"r4","35":"r4","36":"r4","37":"r4","77":"r4"},{"3":20,"4":16,"34":"s126","38":"s15","41":"s17","42":"s18"},{"30":"r7","31":"r7","35":"r7","36":"r7","37":"r7","77":"r7"},{"33":"s128"},{"2":130,"3":14,"4":16,"34":"s129","38":"s15","41":"s17","42":"s18"},{"30":"r5","31":"r5","35":"r5","36":"r5","37":"r5","77":"r5"},{"3":20,"4":16,"34":"s131","38":"s15","41":"s17","42":"s18"},{"30":"r8","31":"r8","35":"r8","36":"r8","37":"r8","77":"r8"},{"33":"s133"},{"7":135,"8":136,"34":"s134","48":"s137"},{"30":"r9","31":"r9","35":"r9","36":"r9","37":"r9","77":"r9"},{"8":139,"34":"s138","48":"s137"},{"34":"r25","48":"r25"},{"32":"s140"},{"30":"r10","31":"r10","35":"r10","36":"r10","37":"r10","77":"r10"},{"34":"r26","48":"r26"},{"20":141,"33":"s24"},{"34":"r27","48":"r27"},{"33":"s143"},{"9":145,"10":146,"34":"s144","49":"s147","50":"s148","51":"s149"},{"30":"r11","31":"r11","35":"r11","36":"r11","37":"r11","77":"r11"},{"10":151,"34":"s150","49":"s147","50":"s148","51":"s149"},{"34":"r28","49":"r28","50":"r28","51":"r28"},{"47":"s152"},{"47":"s172"},{"47":"s201"},{"30":"r12","31":"r12","35":"r12","36":"r12","37":"r12","77":"r12"},{"34":"r29","49":"r29","50":"r29","51":"r29"},{"33":"s153"},{"11":155,"12":156,"32":"s157","34":"s154"},{"34":"r30","49":"r30","50":"r30","51":"r30"},{"34":"s158","52":"s159"},{"34":"r36","52":"r36"},{"47":"s161"},{"34":"r31","49":"r31","50":"r31","51":"r31"},{"12":160,"32":"s157","34":"r38","52":"r38"},{"34":"r37","52":"r37"},{"39":"s162"},{"17":164,"18":165,"32":"s166","40":"s163"},{"34":"r39","52":"r39"},{"40":"s167","52":"s168"},{"40":"r55","52":"r55"},{"58":"s170"},{"34":"r40","52":"r40"},{"18":169,"32":"s166","40":"r57","52":"r57"},{"40":"r56","52":"r56"},{"32":"s171"},{"40":"r58","47":"r58","52":"r58"},{"33":"s173"},{"13":175,"14":176,"34":"s174","53":"s177","54":"s178","55":"s179"},{"34":"r32","49":"r32","50":"r32","51":"r32"},{"34":"s180","52":"s181"},{"34":"r41","52":"r41"},{"47":"s183"},{"47":"s191"},{"47":"s196"},{"34":"r33","49":"r33","50":"r33","51":"r33"},{"14":182,"34":"r43","52":"r43","53":"s177","54":"s178","55":"s179"},{"34":"r42","52":"r42"},{"39":"s184"},{"19":186,"32":"s187","40":"s185"},{"34":"r44","52":"r44"},{"40":"s188","52":"s189"},{"40":"r59","52":"r59"},{"34":"r45","52":"r45"},{"32":"s190","40":"r61","52":"r61"},{"40":"r60","52":"r60"},{"39":"s192"},{"19":194,"32":"s187","40":"s193"},{"34":"r46","52":"r46"},{"40":"s195","52":"s189"},{"34":"r47","52":"r47"},{"39":"s197"},{"19":199,"32":"s187","40":"s198"},{"34":"r48","52":"r48"},{"40":"s200","52":"s189"},{"34":"r49","52":"r49"},{"33":"s202"},{"15":204,"16":205,"18":206,"32":"s166","34":"s203"},{"34":"r34","49":"r34","50":"r34","51":"r34"},{"34":"s207","52":"s208"},{"34":"r50","52":"r50"},{"47":"s210"},{"34":"r35","49":"r35","50":"r35","51":"r35"},{"16":209,"18":206,"32":"s166","34":"r52","52":"r52"},{"34":"r51","52":"r51"},{"56":"s211","57":"s212"},{"34":"r53","52":"r53"},{"34":"r54","52":"r54"}];

/**
 * Parsing stack.
 */
const stack = [];

/**
 * Tokenizer instance.
 */
let tokenizer;
/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 * See `--custom-tokinzer` to skip this generation, and use a custom one.
 */

const lexRules = [[/^\/\*[^*]*\*+([^\/][^*]*\*+)*\//, function() { /*return 'COMMENT_BLOCK'*/ }],
[/^\/\/[^\r\n]*/, function() { /*return 'COMMENT_LINE'*/ }],
[/^\"([^\\\n"]|\\.)*\"/, function() { return 'STRING_TRIPLE' }],
[/^'([^\\\n']|\\.)*'/, function() { return 'STRING_SINGLE' }],
[/^%[0-9A-Fa-f\s]*%/, function() { return 'STRING_HEX' }],
[/^\s+/, function() { /* return 'WHITESPACE' */ }],
[/^\n/, function() { /* return 'NEWLINE' */ }],
[/^\bbitlr\b/, function() { return 'BITLR'  }],
[/^\bbitrl\b/, function() { return 'BITRL'  }],
[/^\bprotocol\b/, function() { if(this.getCurrentState()!=='INITIAL') this.popState(); this.pushState('protocol'); return 'PROTOCOL'; }],
[/^\bsegments\b/, function() { return 'SEGMENTS' }],
[/^\bsegment\b/, function() { return 'SEGMENT' }],
[/^\boneof\b/, function() { return 'ONEOF' }],
[/^\bwhen\b/, function() { return 'WHEN' }],
[/^\bas\b/, function() { return 'AS' }],
[/^\bdevice\b/, function() { if(this.getCurrentState()!=='INITIAL') this.popState(); this.pushState('device'); return 'DEVICE'; }],
[/^\b(udp|tcp_server|tcp_client|serial_ttl|serial_232|serial_422|serial_485|serial_usb|can|di|do|ai|ao)\b/, function() { return 'INTFTYPE' }],
[/^\btopology\b/, function() { if(this.getCurrentState()!=='INITIAL') this.popState(); this.pushState('topology'); return 'TOPOLOGY'; }],
[/^\blinking\b/, function() { return 'LINKING' }],
[/^\bmapping\b/, function() { return 'MAPPING' }],
[/^\bbinding\b/, function() { return 'BINDING' }],
[/^\bsimu\b/, function() { return 'SIMU' }],
[/^\buut\b/, function() { return 'UUT' }],
[/^\betest\b/, function() { return 'ETEST' }],
[/^true/, function() { return 'TRUE' }],
[/^false/, function() { return 'FALSE' }],
[/^and/, function() { return 'AND' }],
[/^or/, function() { return 'OR' }],
[/^not/, function() { return 'NOT' }],
[/^0[xX][0-9a-fA-F]+/, function() { return 'NUMBER_HEX' }],
[/^[0-9]+(?:\.[0-9]+)?/, function() { return 'NUMBER' }],
[/^[a-zA-Z_$一-龥][a-zA-Z0-9_一-龥]*/, function() { return 'ID' }],
[/^~=/, function() { return 'NOT_EQ' }],
[/^==/, function() { return 'EQ_EQ' }],
[/^>=/, function() { return 'GT_EQ' }],
[/^<=/, function() { return 'LT_EQ' }],
[/^{/, function() { return '{' }],
[/^}/, function() { return '}' }],
[/^]/, function() { return ']' }],
[/^\[/, function() { return '[' }],
[/^,/, function() { return ',' }],
[/^\:/, function() { return ':' }],
[/^\./, function() { return 'DOT' }],
[/^\+/, function() { return '+' }],
[/^-/, function() { return '-' }],
[/^\*/, function() { return '*' }],
[/^\//, function() { return '/' }],
[/^\(/, function() { return '(' }],
[/^\)/, function() { return ')' }],
[/^>/, function() { return '>' }],
[/^</, function() { return '<' }]];
const lexRulesByConditions = {"INITIAL":[0,1,2,3,4,5,6,7,8,9,15,17,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"protocol":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"device":[0,1,2,3,4,5,6,7,8,9,15,16,17,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"topology":[0,1,2,3,4,5,6,7,8,9,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]};

const EOF_TOKEN = {
  type: EOF,
  value: '',
};

tokenizer = {
  initString(string) {
    this._string = string;
    this._cursor = 0;

    this._states = ['INITIAL'];
    this._tokensQueue = [];

    this._currentLine = 1;
    this._currentColumn = 0;
    this._currentLineBeginOffset = 0;

    /**
     * Matched token location data.
     */
    this._tokenStartOffset = 0;
    this._tokenEndOffset = 0;
    this._tokenStartLine = 1;
    this._tokenEndLine = 1;
    this._tokenStartColumn = 0;
    this._tokenEndColumn = 0;

    return this;
  },

  /**
   * Returns tokenizer states.
   */
  getStates() {
    return this._states;
  },

  getCurrentState() {
    return this._states[this._states.length - 1];
  },

  pushState(state) {
    this._states.push(state);
  },

  begin(state) {
    this.pushState(state);
  },

  popState() {
    if (this._states.length > 1) {
      return this._states.pop();
    }
    return this._states[0];
  },

  getNextToken() {
    // Something was queued, return it.
    if (this._tokensQueue.length > 0) {
      return this.onToken(this._toToken(this._tokensQueue.shift()));
    }

    if (!this.hasMoreTokens()) {
      return this.onToken(EOF_TOKEN);
    }

    let string = this._string.slice(this._cursor);
    let lexRulesForState = lexRulesByConditions[this.getCurrentState()];

    for (let i = 0; i < lexRulesForState.length; i++) {
      let lexRuleIndex = lexRulesForState[i];
      let lexRule = lexRules[lexRuleIndex];

      let matched = this._match(string, lexRule[0]);

      // Manual handling of EOF token (the end of string). Return it
      // as `EOF` symbol.
      if (string === '' && matched === '') {
        this._cursor++;
      }

      if (matched !== null) {
        yytext = matched;
        yyleng = yytext.length;
        let token = lexRule[1].call(this);

        if (!token) {
          return this.getNextToken();
        }

        // If multiple tokens are returned, save them to return
        // on next `getNextToken` call.

        if (Array.isArray(token)) {
          const tokensToQueue = token.slice(1);
          token = token[0];
          if (tokensToQueue.length > 0) {
            this._tokensQueue.unshift(...tokensToQueue);
          }
        }

        return this.onToken(this._toToken(token, yytext));
      }
    }

    if (this.isEOF()) {
      this._cursor++;
      return EOF_TOKEN;
    }

    this.throwUnexpectedToken(
      string[0],
      this._currentLine,
      this._currentColumn
    );
  },

  /**
   * Throws default "Unexpected token" exception, showing the actual
   * line from the source, pointing with the ^ marker to the bad token.
   * In addition, shows `line:column` location.
   */
  throwUnexpectedToken(symbol, line, column) {
    const lineSource = this._string.split('\n')[line - 1];
    let lineData = '';

    if (lineSource) {
      const pad = ' '.repeat(column);
      lineData = '\n\n' + lineSource + '\n' + pad + '^\n';
    }

    throw new SyntaxError(
      `${lineData}Unexpected token: "${symbol}" ` +
      `at ${line}:${column}.`
    );
  },

  getCursor() {
    return this._cursor;
  },

  getCurrentLine() {
    return this._currentLine;
  },

  getCurrentColumn() {
    return this._currentColumn;
  },

  _captureLocation(matched) {
    const nlRe = /\n/g;

    // Absolute offsets.
    this._tokenStartOffset = this._cursor;

    // Line-based locations, start.
    this._tokenStartLine = this._currentLine;
    this._tokenStartColumn =
      this._tokenStartOffset - this._currentLineBeginOffset;

    // Extract `\n` in the matched token.
    let nlMatch;
    while ((nlMatch = nlRe.exec(matched)) !== null) {
      this._currentLine++;
      this._currentLineBeginOffset = this._tokenStartOffset + nlMatch.index + 1;
    }

    this._tokenEndOffset = this._cursor + matched.length;

    // Line-based locations, end.
    this._tokenEndLine = this._currentLine;
    this._tokenEndColumn = this._currentColumn =
      (this._tokenEndOffset - this._currentLineBeginOffset);
  },

  _toToken(tokenType, yytext = '') {
    return {
      // Basic data.
      type: tokenType,
      value: yytext,

      // Location data.
      startOffset: this._tokenStartOffset,
      endOffset: this._tokenEndOffset,
      startLine: this._tokenStartLine,
      endLine: this._tokenEndLine,
      startColumn: this._tokenStartColumn,
      endColumn: this._tokenEndColumn,
    };
  },

  isEOF() {
    return this._cursor === this._string.length;
  },

  hasMoreTokens() {
    return this._cursor <= this._string.length;
  },

  _match(string, regexp) {
    let matched = string.match(regexp);
    if (matched) {
      // Handle `\n` in the matched token to track line numbers.
      this._captureLocation(matched[0]);
      this._cursor += matched[0].length;
      return matched[0];
    }
    return null;
  },

  /**
   * Allows analyzing, and transforming token. Default implementation
   * just passes the token through.
   */
  onToken(token) {
    return token;
  },
};

/**
 * Expose tokenizer so it can be accessed in semantic actions.
 */
yy.lexer = tokenizer;
yy.tokenizer = tokenizer;

/**
 * Global parsing options. Some options can be shadowed per
 * each `parse` call, if the optations are passed.
 *
 * Initalized to the `captureLocations` which is passed
 * from the generator. Other options can be added at runtime.
 */
yy.options = {
  captureLocations: true,
};

/**
 * Parsing module.
 */
const yyparse = {
  /**
   * Sets global parsing options.
   */
  setOptions(options) {
    yy.options = options;
    return this;
  },

  /**
   * Returns parsing options.
   */
  getOptions() {
    return yy.options;
  },

  /**
   * Parses a string.
   */
  parse(string, parseOptions) {
    if (!tokenizer) {
      throw new Error(`Tokenizer instance wasn't specified.`);
    }

    tokenizer.initString(string);

    /**
     * If parse options are passed, override global parse options for
     * this call, and later restore global options.
     */
    let globalOptions = yy.options;
    if (parseOptions) {
      yy.options = Object.assign({}, yy.options, parseOptions);
    }

    /**
     * Allow callers to do setup work based on the
     * parsing string, and passed options.
     */
    yyparse.onParseBegin(string, tokenizer, yy.options);

    stack.length = 0;
    stack.push(0);

    let token = tokenizer.getNextToken();
    let shiftedToken = null;

    do {
      if (!token) {
        // Restore options.
        yy.options = globalOptions;
        unexpectedEndOfInput();
      }

      let state = stack[stack.length - 1];
      let column = tokens[token.type];

      if (!table[state].hasOwnProperty(column)) {
        yy.options = globalOptions;
        unexpectedToken(token);
      }

      let entry = table[state][column];

      // Shift action.
      if (entry[0] === 's') {
        let loc = null;

        if (yy.options.captureLocations) {
          loc = {
            startOffset: token.startOffset,
            endOffset: token.endOffset,
            startLine: token.startLine,
            endLine: token.endLine,
            startColumn: token.startColumn,
            endColumn: token.endColumn,
          };
        }

        shiftedToken = this.onShift(token);

        stack.push(
          {symbol: tokens[shiftedToken.type], semanticValue: shiftedToken.value, loc},
          Number(entry.slice(1))
        );

        token = tokenizer.getNextToken();
      }

      // Reduce action.
      else if (entry[0] === 'r') {
        let productionNumber = entry.slice(1);
        let production = productions[productionNumber];
        let hasSemanticAction = typeof production[2] === 'function';
        let semanticValueArgs = hasSemanticAction ? [] : null;

        const locationArgs = (
          hasSemanticAction && yy.options.captureLocations
            ? []
            : null
        );

        if (production[1] !== 0) {
          let rhsLength = production[1];
          while (rhsLength-- > 0) {
            stack.pop();
            let stackEntry = stack.pop();

            if (hasSemanticAction) {
              semanticValueArgs.unshift(stackEntry.semanticValue);

              if (locationArgs) {
                locationArgs.unshift(stackEntry.loc);
              }
            }
          }
        }

        const reduceStackEntry = {symbol: production[0]};

        if (hasSemanticAction) {
          yytext = shiftedToken ? shiftedToken.value : null;
          yyleng = shiftedToken ? shiftedToken.value.length : null;

          const semanticActionArgs = (
            locationArgs !== null
              ? semanticValueArgs.concat(locationArgs)
              : semanticValueArgs
          );

          production[2](...semanticActionArgs);

          reduceStackEntry.semanticValue = __;

          if (locationArgs) {
            reduceStackEntry.loc = __loc;
          }
        }

        const nextState = stack[stack.length - 1];
        const symbolToReduceWith = production[0];

        stack.push(
          reduceStackEntry,
          table[nextState][symbolToReduceWith]
        );
      }

      // Accept.
      else if (entry === 'acc') {
        stack.pop();
        let parsed = stack.pop();

        if (stack.length !== 1 ||
            stack[0] !== 0 ||
            tokenizer.hasMoreTokens()) {
          // Restore options.
          yy.options = globalOptions;
          unexpectedToken(token);
        }

        if (parsed.hasOwnProperty('semanticValue')) {
          yy.options = globalOptions;
          yyparse.onParseEnd(parsed.semanticValue);
          return parsed.semanticValue;
        }

        yyparse.onParseEnd();

        // Restore options.
        yy.options = globalOptions;
        return true;
      }

    } while (tokenizer.hasMoreTokens() || stack.length > 1);
  },

  setTokenizer(customTokenizer) {
    tokenizer = customTokenizer;
    return yyparse;
  },

  getTokenizer() {
    return tokenizer;
  },

  onParseBegin(string, tokenizer, options) {},
  onParseEnd(parsed) {},

  /**
   * Allows analyzing, and transforming shifted token. Default implementation
   * just passes the token through.
   */
  onShift(token) {
    return token;
  },
};



    function newList(item) {
      if(item) {
        return [item];
      } else {
        return [];
      }
    }

    function joinList(list, item) {
      if(list && item) {
        list.push(item);
      }
      return list;
    }

    function newKindList(kind, item) {
      if(item) {
        return {kind: kind, list: [item]};
      } else {
        return {kind: kind, list: []};
      }
    }

    function joinKindList(list, item) {
      if(list && list.list && item) {
        list.list.push(item);
      }
      return list;
    }

    function newProp(id, exp, id_loc, exp_loc) {
      return {
        kind: 'prop',
        name: id,
        value: exp,
        name_from: id_loc.startOffset,
        name_to: id_loc.endOffset,
        name_line: id_loc.startLine,
        value_from: exp_loc.startOffset,
        value_to: exp_loc.endOffset,
        value_line: exp_loc.startLine,
      }
    }

    function newOneof(branch_list) {
      return {
        kind: 'oneof',
        branch_list: branch_list
      }
    }

    function newBranch(name, exp, seglist, exp_loc) {
      return {
        kind: 'branch',
        name: name,
        exp: exp,
        seglist: seglist,
        exp_from: exp_loc.startOffset,
        exp_to: exp_loc.endOffset,
        exp_line: exp_loc.startLine,
      }
    }

    function newProtSeggroup(name, seglist, name_loc, repeated) {
      let res = {
        kind: 'seggroup',
        name: name,
        seglist: seglist,
        name_from: name_loc.startOffset,
        name_to: name_loc.endOffset,
        name_line: name_loc.startLine,
      }
      if(repeated) {
        res.repeated = repeated;
      }
      return res;
    }

    function newElement(kind, name, body_name, body, name_loc, repeated) {
      let res = {
        kind: kind,
        name: name,
        name_from: name_loc.startOffset,
        name_to: name_loc.endOffset,
        name_line: name_loc.startLine,
      }
      res[body_name] = body;
      if(repeated) {
        res.repeated = repeated;
      }
      return res;
    }




function unexpectedToken(token) {
  if (token.type === EOF) {
    unexpectedEndOfInput();
  }

  tokenizer.throwUnexpectedToken(
    token.value,
    token.startLine,
    token.startColumn
  );
}

function unexpectedEndOfInput() {
  parseError(`Unexpected end of input.`);
}

function parseError(message) {
  throw new SyntaxError(message);
}

module.exports = yyparse;
