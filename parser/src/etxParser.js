/**
 * LR parser generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/path-to-output-parser-file.js
 */

'use strict';

/**
 * Matched token text.
 */
let yytext;

/**
 * Length of the matched token text.
 */
let yyleng;

/**
 * Storage object.
 */
let yy = {};

/**
 * Result of semantic action.
 */
let __;

/**
 * Result location object.
 */
let __loc;

function yyloc(start, end) {
  if (!yy.options.captureLocations) {
    return null;
  }

  // Epsilon doesn't produce location.
  if (!start || !end) {
    return start || end;
  }

  return {
    startOffset: start.startOffset,
    endOffset: end.endOffset,
    startLine: start.startLine,
    endLine: end.endLine,
    startColumn: start.startColumn,
    endColumn: end.endColumn,
  };
}

const EOF = '$';

/**
 * List of productions (generated by Syntax tool).
 */
const productions = [[-1,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1 }],
[0,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[0,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = joinList(_1, _2); }],
[1,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);let res = newElement('protocol', _3, 'seglist', null, _3loc); res.bittype = 'lr'; __ = res;  }],
[1,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);let res = newElement('protocol', _3, 'seglist', null, _3loc); res.bittype = 'rl'; __ = res;  }],
[1,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = newElement('protocol', _2, 'seglist', null, _2loc); }],
[1,6,(_1,_2,_3,_4,_5,_6,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc) => { __loc = yyloc(_1loc, _6loc);let res = newElement('protocol', _3, 'seglist', _5, _3loc); res.bittype = 'lr'; __ = res;  }],
[1,6,(_1,_2,_3,_4,_5,_6,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc) => { __loc = yyloc(_1loc, _6loc);let res = newElement('protocol', _3, 'seglist', _5, _3loc); res.bittype = 'rl'; __ = res;  }],
[1,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = newElement('protocol', _2,'seglist', _4, _2loc); }],
[1,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = {kind: 'device', name: _2, value: null}; }],
[1,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = {kind: 'device', name: _2, value: _4}; }],
[1,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = {kind: 'topology', name: _2, value: null}; }],
[1,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = {kind: 'topology', name: _2, value: _4}; }],
[2,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[2,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = joinList(_1, _2) }],
[3,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = newElement('segment', _2, 'props', _3, _2loc); }],
[3,6,(_1,_2,_3,_4,_5,_6,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc) => { __loc = yyloc(_1loc, _6loc);__ = newElement('segment', _2, 'props', _6, _2loc, _4); }],
[3,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[3,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[4,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = newProtSeggroup(_2, null, _2loc); }],
[4,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = newProtSeggroup(_2, _4, _2loc); }],
[4,8,(_1,_2,_3,_4,_5,_6,_7,_8,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc,_7loc,_8loc) => { __loc = yyloc(_1loc, _8loc);__ = newProtSeggroup(_2, _7, _2loc, _4); }],
[5,6,(_1,_2,_3,_4,_5,_6,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc) => { __loc = yyloc(_1loc, _6loc);__ = newProtBranch('oneof', _3, null, _3loc); }],
[5,7,(_1,_2,_3,_4,_5,_6,_7,_1loc,_2loc,_3loc,_4loc,_5loc,_6loc,_7loc) => { __loc = yyloc(_1loc, _7loc);__ = newProtBranch('oneof', _3, _6, _3loc); }],
[6,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[6,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = joinList(_1, _2); }],
[7,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'connector', name: _2, type: _1, config: _3}; }],
[8,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[8,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1.concat(_2); }],
[9,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = []; }],
[9,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = _4; }],
[9,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = []; }],
[9,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = _4 }],
[9,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = []; }],
[9,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = _4; }],
[10,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[10,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[10,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[11,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = null; }],
[11,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = { kind: 'linking', name: _1, value: _4 }; }],
[12,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[12,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[12,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[13,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = null; }],
[13,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = {kind: 'uut', value: _4}; }],
[13,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = null; }],
[13,5,(_1,_2,_3,_4,_5,_1loc,_2loc,_3loc,_4loc,_5loc) => { __loc = yyloc(_1loc, _5loc);__ = {kind: 'etest', value: _4}; }],
[14,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[14,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[14,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[15,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);_1.kind = 'binding'; _1.bind = eval(_3); __ = _1; }],
[15,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);_1.kind = 'binding'; _1.bind = eval(_3); __ = _1; }],
[16,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1) }],
[16,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[16,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1 }],
[17,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = { kind: 'dev_connector', device: _1, connector: _3}; }],
[18,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[18,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[18,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[19,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = newList(null); }],
[19,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = _2; }],
[20,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[20,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[20,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[21,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = newProp(_1, _3, _1loc, _3loc); }],
[22,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[22,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[22,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = {kind: 'not', exp: _2}; }],
[22,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = {kind: 'uminus', exp: _2}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'not_eq', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'eq_eq', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'gt_eq', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'lt_eq', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'gt', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'lt', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'add', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'subtract', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'multiply', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'divide', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'and', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = {kind: 'or', left: _1, right: _3}; }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = _2; }],
[22,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = newKindList('array', null); }],
[22,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = _2; }],
[22,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[23,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = { kind: _1 }; }],
[23,4,(_1,_2,_3,_4,_1loc,_2loc,_3loc,_4loc) => { __loc = yyloc(_1loc, _4loc);__ = {kind: _1, params: _3}; }],
[24,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newList(_1); }],
[24,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinList(_1, _3); }],
[24,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[25,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newKindList('array', _1); }],
[25,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinKindList(_1, _3); }],
[25,2,(_1,_2,_1loc,_2loc) => { __loc = yyloc(_1loc, _2loc);__ = _1; }],
[26,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'number', value: eval(yytext)}; }],
[26,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'number', value: eval(yytext)}; }],
[26,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[26,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = _1; }],
[26,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'bool', value: true}; }],
[26,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'bool', value: false}; }],
[27,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = newKindList('pid', _1); }],
[27,3,(_1,_2,_3,_1loc,_2loc,_3loc) => { __loc = yyloc(_1loc, _3loc);__ = joinKindList(_1, _3); }],
[28,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'string', value: eval(yytext)}; }],
[28,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'string', value: eval(yytext)}; }],
[28,1,(_1,_1loc) => { __loc = yyloc(_1loc, _1loc);__ = {kind: 'strhex',  value: yytext.replace(/%/g, '')}; }]];

/**
 * Encoded tokens map.
 */
const tokens = {"BITLR":"29","PROTOCOL":"30","ID":"31","{":"32","}":"33","BITRL":"34","DEVICE":"35","TOPOLOGY":"36","SEGMENT":"37","[":"38","]":"39","SEGMENTS":"40","ONEOF":"41","(":"42",")":"43","INTFTYPE":"44","LINKING":"45",":":"46","MAPPING":"47","BINDING":"48",",":"49","UUT":"50","ETEST":"51","STRING_TRIPLE":"52","STRING_SINGLE":"53","DOT":"54","NOT":"55","-":"56","NOT_EQ":"57","EQ_EQ":"58","GT_EQ":"59","LT_EQ":"60",">":"61","<":"62","+":"63","*":"64","/":"65","AND":"66","OR":"67","NUMBER":"68","NUMBER_HEX":"69","TRUE":"70","FALSE":"71","STRING_HEX":"72","$":"73"};

/**
 * Parsing table (generated by Syntax tool).
 */
const table = [{"0":1,"1":2,"29":"s3","30":"s5","34":"s4","35":"s6","36":"s7"},{"1":8,"29":"s3","30":"s5","34":"s4","35":"s6","36":"s7","73":"acc"},{"29":"r1","30":"r1","34":"r1","35":"r1","36":"r1","73":"r1"},{"30":"s9"},{"30":"s116"},{"31":"s122"},{"31":"s127"},{"31":"s137"},{"29":"r2","30":"r2","34":"r2","35":"r2","36":"r2","73":"r2"},{"31":"s10"},{"32":"s11"},{"2":13,"3":14,"4":16,"5":17,"33":"s12","37":"s15","40":"s18","41":"s19"},{"29":"r3","30":"r3","34":"r3","35":"r3","36":"r3","73":"r3"},{"3":21,"4":16,"5":17,"33":"s20","37":"s15","40":"s18","41":"s19"},{"33":"r13","37":"r13","40":"r13","41":"r13"},{"31":"s22"},{"33":"r17","37":"r17","40":"r17","41":"r17"},{"33":"r18","37":"r18","40":"r18","41":"r18"},{"31":"s98"},{"42":"s104"},{"29":"r6","30":"r6","34":"r6","35":"r6","36":"r6","73":"r6"},{"33":"r14","37":"r14","40":"r14","41":"r14"},{"19":23,"32":"s25","38":"s24"},{"33":"r15","37":"r15","40":"r15","41":"r15"},{"19":28,"22":26,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"20":59,"21":60,"31":"s61","33":"s58"},{"39":"s44","56":"s52","57":"s45","58":"s46","59":"s47","60":"s48","61":"s49","62":"s50","63":"s51","64":"s53","65":"s54","66":"s55","67":"s56"},{"33":"r65","39":"r65","43":"r65","49":"r65","56":"r65","57":"r65","58":"r65","59":"r65","60":"r65","61":"r65","62":"r65","63":"r65","64":"r65","65":"r65","66":"r65","67":"r65"},{"33":"r66","39":"r66","43":"r66","49":"r66","56":"r66","57":"r66","58":"r66","59":"r66","60":"r66","61":"r66","62":"r66","63":"r66","64":"r66","65":"r66","66":"r66","67":"r66"},{"19":28,"22":79,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"19":28,"22":80,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"19":28,"22":81,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"19":28,"22":85,"23":33,"25":84,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","39":"s83","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"33":"r84","39":"r84","43":"r84","49":"r84","56":"r84","57":"r84","58":"r84","59":"r84","60":"r84","61":"r84","62":"r84","63":"r84","64":"r84","65":"r84","66":"r84","67":"r84"},{"33":"r93","39":"r93","43":"r93","49":"r93","56":"r93","57":"r93","58":"r93","59":"r93","60":"r93","61":"r93","62":"r93","63":"r93","64":"r93","65":"r93","66":"r93","67":"r93"},{"33":"r94","39":"r94","43":"r94","49":"r94","56":"r94","57":"r94","58":"r94","59":"r94","60":"r94","61":"r94","62":"r94","63":"r94","64":"r94","65":"r94","66":"r94","67":"r94"},{"33":"r95","39":"r95","43":"r95","49":"r95","56":"r95","57":"r95","58":"r95","59":"r95","60":"r95","61":"r95","62":"r95","63":"r95","64":"r95","65":"r95","66":"r95","67":"r95"},{"33":"r96","39":"r96","43":"r96","49":"r96","54":"s89","56":"r96","57":"r96","58":"r96","59":"r96","60":"r96","61":"r96","62":"r96","63":"r96","64":"r96","65":"r96","66":"r96","67":"r96"},{"33":"r97","39":"r97","43":"r97","49":"r97","56":"r97","57":"r97","58":"r97","59":"r97","60":"r97","61":"r97","62":"r97","63":"r97","64":"r97","65":"r97","66":"r97","67":"r97"},{"33":"r98","39":"r98","43":"r98","49":"r98","56":"r98","57":"r98","58":"r98","59":"r98","60":"r98","61":"r98","62":"r98","63":"r98","64":"r98","65":"r98","66":"r98","67":"r98"},{"33":"r101","39":"r101","43":"r101","49":"r101","56":"r101","57":"r101","58":"r101","59":"r101","60":"r101","61":"r101","62":"r101","63":"r101","64":"r101","65":"r101","66":"r101","67":"r101"},{"33":"r102","39":"r102","43":"r102","49":"r102","56":"r102","57":"r102","58":"r102","59":"r102","60":"r102","61":"r102","62":"r102","63":"r102","64":"r102","65":"r102","66":"r102","67":"r102"},{"33":"r103","39":"r103","43":"r103","49":"r103","56":"r103","57":"r103","58":"r103","59":"r103","60":"r103","61":"r103","62":"r103","63":"r103","64":"r103","65":"r103","66":"r103","67":"r103"},{"33":"r99","39":"r99","42":"s91","43":"r99","49":"r99","54":"r99","56":"r99","57":"r99","58":"r99","59":"r99","60":"r99","61":"r99","62":"r99","63":"r99","64":"r99","65":"r99","66":"r99","67":"r99"},{"19":57,"32":"s25"},{"19":28,"22":67,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"19":28,"22":68,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"19":28,"22":69,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"19":28,"22":70,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"19":28,"22":71,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"19":28,"22":72,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"19":28,"22":73,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"19":28,"22":74,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"19":28,"22":75,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"19":28,"22":76,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"19":28,"22":77,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"19":28,"22":78,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"33":"r16","37":"r16","40":"r16","41":"r16"},{"33":"r59","37":"r59","39":"r59","40":"r59","41":"r59","43":"r59","44":"r59","49":"r59","56":"r59","57":"r59","58":"r59","59":"r59","60":"r59","61":"r59","62":"r59","63":"r59","64":"r59","65":"r59","66":"r59","67":"r59"},{"33":"s62","49":"s63"},{"33":"r61","49":"r61"},{"46":"s65"},{"33":"r60","37":"r60","39":"r60","40":"r60","41":"r60","43":"r60","44":"r60","49":"r60","56":"r60","57":"r60","58":"r60","59":"r60","60":"r60","61":"r60","62":"r60","63":"r60","64":"r60","65":"r60","66":"r60","67":"r60"},{"21":64,"31":"s61","33":"r63","49":"r63"},{"33":"r62","49":"r62"},{"19":28,"22":66,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"33":"r64","49":"r64","56":"s52","57":"s45","58":"s46","59":"s47","60":"s48","61":"s49","62":"s50","63":"s51","64":"s53","65":"s54","66":"s55","67":"s56"},{"33":"r69","39":"r69","43":"r69","49":"r69","56":"s52","57":"r69","58":"r69","59":"r69","60":"r69","61":"r69","62":"r69","63":"s51","64":"s53","65":"s54","66":"r69","67":"r69"},{"33":"r70","39":"r70","43":"r70","49":"r70","56":"s52","57":"r70","58":"r70","59":"r70","60":"r70","61":"r70","62":"r70","63":"s51","64":"s53","65":"s54","66":"r70","67":"r70"},{"33":"r71","39":"r71","43":"r71","49":"r71","56":"s52","57":"r71","58":"r71","59":"r71","60":"r71","61":"r71","62":"r71","63":"s51","64":"s53","65":"s54","66":"r71","67":"r71"},{"33":"r72","39":"r72","43":"r72","49":"r72","56":"s52","57":"r72","58":"r72","59":"r72","60":"r72","61":"r72","62":"r72","63":"s51","64":"s53","65":"s54","66":"r72","67":"r72"},{"33":"r73","39":"r73","43":"r73","49":"r73","56":"s52","57":"r73","58":"r73","59":"r73","60":"r73","61":"r73","62":"r73","63":"s51","64":"s53","65":"s54","66":"r73","67":"r73"},{"33":"r74","39":"r74","43":"r74","49":"r74","56":"s52","57":"r74","58":"r74","59":"r74","60":"r74","61":"r74","62":"r74","63":"s51","64":"s53","65":"s54","66":"r74","67":"r74"},{"33":"r75","39":"r75","43":"r75","49":"r75","56":"r75","57":"r75","58":"r75","59":"r75","60":"r75","61":"r75","62":"r75","63":"r75","64":"s53","65":"s54","66":"r75","67":"r75"},{"33":"r76","39":"r76","43":"r76","49":"r76","56":"r76","57":"r76","58":"r76","59":"r76","60":"r76","61":"r76","62":"r76","63":"r76","64":"s53","65":"s54","66":"r76","67":"r76"},{"33":"r77","39":"r77","43":"r77","49":"r77","56":"r77","57":"r77","58":"r77","59":"r77","60":"r77","61":"r77","62":"r77","63":"r77","64":"r77","65":"r77","66":"r77","67":"r77"},{"33":"r78","39":"r78","43":"r78","49":"r78","56":"r78","57":"r78","58":"r78","59":"r78","60":"r78","61":"r78","62":"r78","63":"r78","64":"r78","65":"r78","66":"r78","67":"r78"},{"33":"r79","39":"r79","43":"r79","49":"r79","56":"s52","57":"s45","58":"s46","59":"s47","60":"s48","61":"s49","62":"s50","63":"s51","64":"s53","65":"s54","66":"r79","67":"r79"},{"33":"r80","39":"r80","43":"r80","49":"r80","56":"s52","57":"s45","58":"s46","59":"s47","60":"s48","61":"s49","62":"s50","63":"s51","64":"s53","65":"s54","66":"r80","67":"r80"},{"33":"r67","39":"r67","43":"r67","49":"r67","56":"r67","57":"r67","58":"r67","59":"r67","60":"r67","61":"r67","62":"r67","63":"r67","64":"r67","65":"r67","66":"r67","67":"r67"},{"33":"r68","39":"r68","43":"r68","49":"r68","56":"r68","57":"r68","58":"r68","59":"r68","60":"r68","61":"r68","62":"r68","63":"r68","64":"r68","65":"r68","66":"r68","67":"r68"},{"43":"s82","56":"s52","57":"s45","58":"s46","59":"s47","60":"s48","61":"s49","62":"s50","63":"s51","64":"s53","65":"s54","66":"s55","67":"s56"},{"33":"r81","39":"r81","43":"r81","49":"r81","56":"r81","57":"r81","58":"r81","59":"r81","60":"r81","61":"r81","62":"r81","63":"r81","64":"r81","65":"r81","66":"r81","67":"r81"},{"33":"r82","39":"r82","43":"r82","49":"r82","56":"r82","57":"r82","58":"r82","59":"r82","60":"r82","61":"r82","62":"r82","63":"r82","64":"r82","65":"r82","66":"r82","67":"r82"},{"39":"s86","49":"s87"},{"39":"r90","49":"r90","56":"s52","57":"s45","58":"s46","59":"s47","60":"s48","61":"s49","62":"s50","63":"s51","64":"s53","65":"s54","66":"s55","67":"s56"},{"33":"r83","39":"r83","43":"r83","49":"r83","56":"r83","57":"r83","58":"r83","59":"r83","60":"r83","61":"r83","62":"r83","63":"r83","64":"r83","65":"r83","66":"r83","67":"r83"},{"19":28,"22":88,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","39":"r92","42":"s31","49":"r92","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"39":"r91","49":"r91","56":"s52","57":"s45","58":"s46","59":"s47","60":"s48","61":"s49","62":"s50","63":"s51","64":"s53","65":"s54","66":"s55","67":"s56"},{"31":"s90"},{"33":"r100","39":"r100","43":"r100","49":"r100","54":"r100","56":"r100","57":"r100","58":"r100","59":"r100","60":"r100","61":"r100","62":"r100","63":"r100","64":"r100","65":"r100","66":"r100","67":"r100"},{"19":28,"22":94,"23":33,"24":93,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","43":"s92","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"33":"r85","39":"r85","43":"r85","49":"r85","56":"r85","57":"r85","58":"r85","59":"r85","60":"r85","61":"r85","62":"r85","63":"r85","64":"r85","65":"r85","66":"r85","67":"r85"},{"43":"s95","49":"s96"},{"43":"r87","49":"r87","56":"s52","57":"s45","58":"s46","59":"s47","60":"s48","61":"s49","62":"s50","63":"s51","64":"s53","65":"s54","66":"s55","67":"s56"},{"33":"r86","39":"r86","43":"r86","49":"r86","56":"r86","57":"r86","58":"r86","59":"r86","60":"r86","61":"r86","62":"r86","63":"r86","64":"r86","65":"r86","66":"r86","67":"r86"},{"19":28,"22":97,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","43":"r89","49":"r89","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"43":"r88","49":"r88","56":"s52","57":"s45","58":"s46","59":"s47","60":"s48","61":"s49","62":"s50","63":"s51","64":"s53","65":"s54","66":"s55","67":"s56"},{"32":"s99","38":"s100"},{"2":102,"3":14,"4":16,"5":17,"33":"s101","37":"s15","40":"s18","41":"s19"},{"19":28,"22":111,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"33":"r19","37":"r19","40":"r19","41":"r19"},{"3":21,"4":16,"5":17,"33":"s103","37":"s15","40":"s18","41":"s19"},{"33":"r20","37":"r20","40":"r20","41":"r20"},{"19":28,"22":105,"23":33,"26":27,"27":37,"28":36,"31":"s43","32":"s25","38":"s32","42":"s31","52":"s40","53":"s41","55":"s29","56":"s30","68":"s34","69":"s35","70":"s38","71":"s39","72":"s42"},{"43":"s106","56":"s52","57":"s45","58":"s46","59":"s47","60":"s48","61":"s49","62":"s50","63":"s51","64":"s53","65":"s54","66":"s55","67":"s56"},{"32":"s107"},{"2":109,"3":14,"4":16,"5":17,"33":"s108","37":"s15","40":"s18","41":"s19"},{"33":"r22","37":"r22","40":"r22","41":"r22"},{"3":21,"4":16,"5":17,"33":"s110","37":"s15","40":"s18","41":"s19"},{"33":"r23","37":"r23","40":"r23","41":"r23"},{"39":"s112","56":"s52","57":"s45","58":"s46","59":"s47","60":"s48","61":"s49","62":"s50","63":"s51","64":"s53","65":"s54","66":"s55","67":"s56"},{"32":"s113"},{"2":114,"3":14,"4":16,"5":17,"37":"s15","40":"s18","41":"s19"},{"3":21,"4":16,"5":17,"33":"s115","37":"s15","40":"s18","41":"s19"},{"33":"r21","37":"r21","40":"r21","41":"r21"},{"31":"s117"},{"32":"s118"},{"2":120,"3":14,"4":16,"5":17,"33":"s119","37":"s15","40":"s18","41":"s19"},{"29":"r4","30":"r4","34":"r4","35":"r4","36":"r4","73":"r4"},{"3":21,"4":16,"5":17,"33":"s121","37":"s15","40":"s18","41":"s19"},{"29":"r7","30":"r7","34":"r7","35":"r7","36":"r7","73":"r7"},{"32":"s123"},{"2":125,"3":14,"4":16,"5":17,"33":"s124","37":"s15","40":"s18","41":"s19"},{"29":"r5","30":"r5","34":"r5","35":"r5","36":"r5","73":"r5"},{"3":21,"4":16,"5":17,"33":"s126","37":"s15","40":"s18","41":"s19"},{"29":"r8","30":"r8","34":"r8","35":"r8","36":"r8","73":"r8"},{"32":"s128"},{"6":130,"7":131,"33":"s129","44":"s132"},{"29":"r9","30":"r9","34":"r9","35":"r9","36":"r9","73":"r9"},{"7":134,"33":"s133","44":"s132"},{"33":"r24","44":"r24"},{"31":"s135"},{"29":"r10","30":"r10","34":"r10","35":"r10","36":"r10","73":"r10"},{"33":"r25","44":"r25"},{"19":136,"32":"s25"},{"33":"r26","44":"r26"},{"32":"s138"},{"8":140,"9":141,"33":"s139","45":"s142","47":"s143","48":"s144"},{"29":"r11","30":"r11","34":"r11","35":"r11","36":"r11","73":"r11"},{"9":146,"33":"s145","45":"s142","47":"s143","48":"s144"},{"33":"r27","45":"r27","47":"r27","48":"r27"},{"46":"s147"},{"46":"s167"},{"46":"s190"},{"29":"r12","30":"r12","34":"r12","35":"r12","36":"r12","73":"r12"},{"33":"r28","45":"r28","47":"r28","48":"r28"},{"32":"s148"},{"10":150,"11":151,"31":"s152","33":"s149"},{"33":"r29","45":"r29","47":"r29","48":"r29"},{"33":"s153","49":"s154"},{"33":"r35","49":"r35"},{"46":"s156"},{"33":"r30","45":"r30","47":"r30","48":"r30"},{"11":155,"31":"s152","33":"r37","49":"r37"},{"33":"r36","49":"r36"},{"38":"s157"},{"16":159,"17":160,"31":"s161","39":"s158"},{"33":"r38","49":"r38"},{"39":"s162","49":"s163"},{"39":"r52","49":"r52"},{"54":"s165"},{"33":"r39","49":"r39"},{"17":164,"31":"s161","39":"r54","49":"r54"},{"39":"r53","49":"r53"},{"31":"s166"},{"39":"r55","46":"r55","49":"r55"},{"32":"s168"},{"12":170,"13":171,"33":"s169","50":"s172","51":"s173"},{"33":"r31","45":"r31","47":"r31","48":"r31"},{"33":"s174","49":"s175"},{"33":"r40","49":"r40"},{"46":"s177"},{"46":"s185"},{"33":"r32","45":"r32","47":"r32","48":"r32"},{"13":176,"33":"r42","49":"r42","50":"s172","51":"s173"},{"33":"r41","49":"r41"},{"38":"s178"},{"18":180,"31":"s181","39":"s179"},{"33":"r43","49":"r43"},{"39":"s182","49":"s183"},{"39":"r56","49":"r56"},{"33":"r44","49":"r44"},{"31":"s184","39":"r58","49":"r58"},{"39":"r57","49":"r57"},{"38":"s186"},{"18":188,"31":"s181","39":"s187"},{"33":"r45","49":"r45"},{"39":"s189","49":"s183"},{"33":"r46","49":"r46"},{"32":"s191"},{"14":193,"15":194,"17":195,"31":"s161","33":"s192"},{"33":"r33","45":"r33","47":"r33","48":"r33"},{"33":"s196","49":"s197"},{"33":"r47","49":"r47"},{"46":"s199"},{"33":"r34","45":"r34","47":"r34","48":"r34"},{"15":198,"17":195,"31":"s161","33":"r49","49":"r49"},{"33":"r48","49":"r48"},{"52":"s200","53":"s201"},{"33":"r50","49":"r50"},{"33":"r51","49":"r51"}];

/**
 * Parsing stack.
 */
const stack = [];

/**
 * Tokenizer instance.
 */
let tokenizer;
/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 * See `--custom-tokinzer` to skip this generation, and use a custom one.
 */

const lexRules = [[/^\/\*[^*]*\*+([^\/][^*]*\*+)*\//, function() { /*return 'COMMENT_BLOCK'*/ }],
[/^\/\/[^\r\n]*/, function() { /*return 'COMMENT_LINE'*/ }],
[/^\"([^\\\n"]|\\.)*\"/, function() { return 'STRING_TRIPLE' }],
[/^'([^\\\n']|\\.)*'/, function() { return 'STRING_SINGLE' }],
[/^%[0-9A-Fa-f\s]*%/, function() { return 'STRING_HEX' }],
[/^\s+/, function() { /* return 'WHITESPACE' */ }],
[/^\n/, function() { /* return 'NEWLINE' */ }],
[/^\bbitlr\b/, function() { return 'BITLR'  }],
[/^\bbitrl\b/, function() { return 'BITRL'  }],
[/^\bprotocol\b/, function() { if(this.getCurrentState()!=='INITIAL') this.popState(); this.pushState('protocol'); return 'PROTOCOL'; }],
[/^\bsegments\b/, function() { return 'SEGMENTS' }],
[/^\bsegment\b/, function() { return 'SEGMENT' }],
[/^\boneof\b/, function() { return 'ONEOF' }],
[/^\bdevice\b/, function() { if(this.getCurrentState()!=='INITIAL') this.popState(); this.pushState('device'); return 'DEVICE'; }],
[/^\b(udp|tcp_server|tcp_client|serial_ttl|serial_232|serial_422|serial_485|serial_usb|can|di|do|ad|da)\b/, function() { return 'INTFTYPE' }],
[/^\btopology\b/, function() { if(this.getCurrentState()!=='INITIAL') this.popState(); this.pushState('topology'); return 'TOPOLOGY'; }],
[/^\blinking\b/, function() { return 'LINKING' }],
[/^\bmapping\b/, function() { return 'MAPPING' }],
[/^\bbinding\b/, function() { return 'BINDING' }],
[/^\buut\b/, function() { return 'UUT' }],
[/^\betest\b/, function() { return 'ETEST' }],
[/^true/, function() { return 'TRUE' }],
[/^false/, function() { return 'FALSE' }],
[/^and/, function() { return 'AND' }],
[/^or/, function() { return 'OR' }],
[/^not/, function() { return 'NOT' }],
[/^0[xX][0-9a-fA-F]+/, function() { return 'NUMBER_HEX' }],
[/^[0-9]+(?:\.[0-9]+)?/, function() { return 'NUMBER' }],
[/^[a-zA-Z_$][a-zA-Z0-9_]*/, function() { return 'ID' }],
[/^~=/, function() { return 'NOT_EQ' }],
[/^==/, function() { return 'EQ_EQ' }],
[/^>=/, function() { return 'GT_EQ' }],
[/^<=/, function() { return 'LT_EQ' }],
[/^{/, function() { return '{' }],
[/^}/, function() { return '}' }],
[/^]/, function() { return ']' }],
[/^\[/, function() { return '[' }],
[/^,/, function() { return ',' }],
[/^\:/, function() { return ':' }],
[/^\./, function() { return 'DOT' }],
[/^\+/, function() { return '+' }],
[/^-/, function() { return '-' }],
[/^\*/, function() { return '*' }],
[/^\//, function() { return '/' }],
[/^\(/, function() { return '(' }],
[/^\)/, function() { return ')' }],
[/^>/, function() { return '>' }],
[/^</, function() { return '<' }]];
const lexRulesByConditions = {"INITIAL":[0,1,2,3,4,5,6,7,8,9,13,15,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"protocol":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"device":[0,1,2,3,4,5,6,7,8,9,13,14,15,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"topology":[0,1,2,3,4,5,6,7,8,9,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47]};

const EOF_TOKEN = {
  type: EOF,
  value: '',
};

tokenizer = {
  initString(string) {
    this._string = string;
    this._cursor = 0;

    this._states = ['INITIAL'];
    this._tokensQueue = [];

    this._currentLine = 1;
    this._currentColumn = 0;
    this._currentLineBeginOffset = 0;

    /**
     * Matched token location data.
     */
    this._tokenStartOffset = 0;
    this._tokenEndOffset = 0;
    this._tokenStartLine = 1;
    this._tokenEndLine = 1;
    this._tokenStartColumn = 0;
    this._tokenEndColumn = 0;

    return this;
  },

  /**
   * Returns tokenizer states.
   */
  getStates() {
    return this._states;
  },

  getCurrentState() {
    return this._states[this._states.length - 1];
  },

  pushState(state) {
    this._states.push(state);
  },

  begin(state) {
    this.pushState(state);
  },

  popState() {
    if (this._states.length > 1) {
      return this._states.pop();
    }
    return this._states[0];
  },

  getNextToken() {
    // Something was queued, return it.
    if (this._tokensQueue.length > 0) {
      return this.onToken(this._toToken(this._tokensQueue.shift()));
    }

    if (!this.hasMoreTokens()) {
      return this.onToken(EOF_TOKEN);
    }

    let string = this._string.slice(this._cursor);
    let lexRulesForState = lexRulesByConditions[this.getCurrentState()];

    for (let i = 0; i < lexRulesForState.length; i++) {
      let lexRuleIndex = lexRulesForState[i];
      let lexRule = lexRules[lexRuleIndex];

      let matched = this._match(string, lexRule[0]);

      // Manual handling of EOF token (the end of string). Return it
      // as `EOF` symbol.
      if (string === '' && matched === '') {
        this._cursor++;
      }

      if (matched !== null) {
        yytext = matched;
        yyleng = yytext.length;
        let token = lexRule[1].call(this);

        if (!token) {
          return this.getNextToken();
        }

        // If multiple tokens are returned, save them to return
        // on next `getNextToken` call.

        if (Array.isArray(token)) {
          const tokensToQueue = token.slice(1);
          token = token[0];
          if (tokensToQueue.length > 0) {
            this._tokensQueue.unshift(...tokensToQueue);
          }
        }

        return this.onToken(this._toToken(token, yytext));
      }
    }

    if (this.isEOF()) {
      this._cursor++;
      return EOF_TOKEN;
    }

    this.throwUnexpectedToken(
      string[0],
      this._currentLine,
      this._currentColumn
    );
  },

  /**
   * Throws default "Unexpected token" exception, showing the actual
   * line from the source, pointing with the ^ marker to the bad token.
   * In addition, shows `line:column` location.
   */
  throwUnexpectedToken(symbol, line, column) {
    const lineSource = this._string.split('\n')[line - 1];
    let lineData = '';

    if (lineSource) {
      const pad = ' '.repeat(column);
      lineData = '\n\n' + lineSource + '\n' + pad + '^\n';
    }

    throw new SyntaxError(
      `${lineData}Unexpected token: "${symbol}" ` +
      `at ${line}:${column}.`
    );
  },

  getCursor() {
    return this._cursor;
  },

  getCurrentLine() {
    return this._currentLine;
  },

  getCurrentColumn() {
    return this._currentColumn;
  },

  _captureLocation(matched) {
    const nlRe = /\n/g;

    // Absolute offsets.
    this._tokenStartOffset = this._cursor;

    // Line-based locations, start.
    this._tokenStartLine = this._currentLine;
    this._tokenStartColumn =
      this._tokenStartOffset - this._currentLineBeginOffset;

    // Extract `\n` in the matched token.
    let nlMatch;
    while ((nlMatch = nlRe.exec(matched)) !== null) {
      this._currentLine++;
      this._currentLineBeginOffset = this._tokenStartOffset + nlMatch.index + 1;
    }

    this._tokenEndOffset = this._cursor + matched.length;

    // Line-based locations, end.
    this._tokenEndLine = this._currentLine;
    this._tokenEndColumn = this._currentColumn =
      (this._tokenEndOffset - this._currentLineBeginOffset);
  },

  _toToken(tokenType, yytext = '') {
    return {
      // Basic data.
      type: tokenType,
      value: yytext,

      // Location data.
      startOffset: this._tokenStartOffset,
      endOffset: this._tokenEndOffset,
      startLine: this._tokenStartLine,
      endLine: this._tokenEndLine,
      startColumn: this._tokenStartColumn,
      endColumn: this._tokenEndColumn,
    };
  },

  isEOF() {
    return this._cursor === this._string.length;
  },

  hasMoreTokens() {
    return this._cursor <= this._string.length;
  },

  _match(string, regexp) {
    let matched = string.match(regexp);
    if (matched) {
      // Handle `\n` in the matched token to track line numbers.
      this._captureLocation(matched[0]);
      this._cursor += matched[0].length;
      return matched[0];
    }
    return null;
  },

  /**
   * Allows analyzing, and transforming token. Default implementation
   * just passes the token through.
   */
  onToken(token) {
    return token;
  },
};

/**
 * Expose tokenizer so it can be accessed in semantic actions.
 */
yy.lexer = tokenizer;
yy.tokenizer = tokenizer;

/**
 * Global parsing options. Some options can be shadowed per
 * each `parse` call, if the optations are passed.
 *
 * Initalized to the `captureLocations` which is passed
 * from the generator. Other options can be added at runtime.
 */
yy.options = {
  captureLocations: true,
};

/**
 * Parsing module.
 */
const yyparse = {
  /**
   * Sets global parsing options.
   */
  setOptions(options) {
    yy.options = options;
    return this;
  },

  /**
   * Returns parsing options.
   */
  getOptions() {
    return yy.options;
  },

  /**
   * Parses a string.
   */
  parse(string, parseOptions) {
    if (!tokenizer) {
      throw new Error(`Tokenizer instance wasn't specified.`);
    }

    tokenizer.initString(string);

    /**
     * If parse options are passed, override global parse options for
     * this call, and later restore global options.
     */
    let globalOptions = yy.options;
    if (parseOptions) {
      yy.options = Object.assign({}, yy.options, parseOptions);
    }

    /**
     * Allow callers to do setup work based on the
     * parsing string, and passed options.
     */
    yyparse.onParseBegin(string, tokenizer, yy.options);

    stack.length = 0;
    stack.push(0);

    let token = tokenizer.getNextToken();
    let shiftedToken = null;

    do {
      if (!token) {
        // Restore options.
        yy.options = globalOptions;
        unexpectedEndOfInput();
      }

      let state = stack[stack.length - 1];
      let column = tokens[token.type];

      if (!table[state].hasOwnProperty(column)) {
        yy.options = globalOptions;
        unexpectedToken(token);
      }

      let entry = table[state][column];

      // Shift action.
      if (entry[0] === 's') {
        let loc = null;

        if (yy.options.captureLocations) {
          loc = {
            startOffset: token.startOffset,
            endOffset: token.endOffset,
            startLine: token.startLine,
            endLine: token.endLine,
            startColumn: token.startColumn,
            endColumn: token.endColumn,
          };
        }

        shiftedToken = this.onShift(token);

        stack.push(
          {symbol: tokens[shiftedToken.type], semanticValue: shiftedToken.value, loc},
          Number(entry.slice(1))
        );

        token = tokenizer.getNextToken();
      }

      // Reduce action.
      else if (entry[0] === 'r') {
        let productionNumber = entry.slice(1);
        let production = productions[productionNumber];
        let hasSemanticAction = typeof production[2] === 'function';
        let semanticValueArgs = hasSemanticAction ? [] : null;

        const locationArgs = (
          hasSemanticAction && yy.options.captureLocations
            ? []
            : null
        );

        if (production[1] !== 0) {
          let rhsLength = production[1];
          while (rhsLength-- > 0) {
            stack.pop();
            let stackEntry = stack.pop();

            if (hasSemanticAction) {
              semanticValueArgs.unshift(stackEntry.semanticValue);

              if (locationArgs) {
                locationArgs.unshift(stackEntry.loc);
              }
            }
          }
        }

        const reduceStackEntry = {symbol: production[0]};

        if (hasSemanticAction) {
          yytext = shiftedToken ? shiftedToken.value : null;
          yyleng = shiftedToken ? shiftedToken.value.length : null;

          const semanticActionArgs = (
            locationArgs !== null
              ? semanticValueArgs.concat(locationArgs)
              : semanticValueArgs
          );

          production[2](...semanticActionArgs);

          reduceStackEntry.semanticValue = __;

          if (locationArgs) {
            reduceStackEntry.loc = __loc;
          }
        }

        const nextState = stack[stack.length - 1];
        const symbolToReduceWith = production[0];

        stack.push(
          reduceStackEntry,
          table[nextState][symbolToReduceWith]
        );
      }

      // Accept.
      else if (entry === 'acc') {
        stack.pop();
        let parsed = stack.pop();

        if (stack.length !== 1 ||
            stack[0] !== 0 ||
            tokenizer.hasMoreTokens()) {
          // Restore options.
          yy.options = globalOptions;
          unexpectedToken(token);
        }

        if (parsed.hasOwnProperty('semanticValue')) {
          yy.options = globalOptions;
          yyparse.onParseEnd(parsed.semanticValue);
          return parsed.semanticValue;
        }

        yyparse.onParseEnd();

        // Restore options.
        yy.options = globalOptions;
        return true;
      }

    } while (tokenizer.hasMoreTokens() || stack.length > 1);
  },

  setTokenizer(customTokenizer) {
    tokenizer = customTokenizer;
    return yyparse;
  },

  getTokenizer() {
    return tokenizer;
  },

  onParseBegin(string, tokenizer, options) {},
  onParseEnd(parsed) {},

  /**
   * Allows analyzing, and transforming shifted token. Default implementation
   * just passes the token through.
   */
  onShift(token) {
    return token;
  },
};



    function newList(item) {
      if(item) {
        return [item];
      } else {
        return [];
      }
    }

    function joinList(list, item) {
      if(list && item) {
        list.push(item);
      }
      return list;
    }

    function newKindList(kind, item) {
      if(item) {
        return {kind: kind, list: [item]};
      } else {
        return {kind: kind, list: []};
      }
    }

    function joinKindList(list, item) {
      if(list && list.list && item) {
        list.list.push(item);
      }
      return list;
    }

    function newProp(id, exp, id_loc, exp_loc) {
      return {
        kind: 'prop',
        name: id,
        value: exp,
        name_from: id_loc.startOffset,
        name_to: id_loc.endOffset,
        name_line: id_loc.startLine,
        value_from: exp_loc.startOffset,
        value_to: exp_loc.endOffset,
        value_line: exp_loc.startLine,
      }
    }

    function newProtBranch(kind, exp, seglist, exp_loc) {
      return {
        kind: kind,
        exp: exp,
        seglist: seglist,
        exp_from: exp_loc.startOffset,
        exp_to: exp_loc.endOffset,
        exp_line: exp_loc.startLine,
      }
    }

    function newProtSeggroup(name, seglist, name_loc, repeated) {
      let res = {
        kind: 'seggroup',
        name: name,
        seglist: seglist,
        name_from: name_loc.startOffset,
        name_to: name_loc.endOffset,
        name_line: name_loc.startLine,
      }
      if(repeated) {
        res.repeated = repeated;
      }
      return res;
    }

    function newElement(kind, name, body_name, body, name_loc, repeated) {
      let res = {
        kind: kind,
        name: name,
        name_from: name_loc.startOffset,
        name_to: name_loc.endOffset,
        name_line: name_loc.startLine,
      }
      res[body_name] = body;
      if(repeated) {
        res.repeated = repeated;
      }
      return res;
    }




function unexpectedToken(token) {
  if (token.type === EOF) {
    unexpectedEndOfInput();
  }

  tokenizer.throwUnexpectedToken(
    token.value,
    token.startLine,
    token.startColumn
  );
}

function unexpectedEndOfInput() {
  parseError(`Unexpected end of input.`);
}

function parseError(message) {
  throw new SyntaxError(message);
}

module.exports = yyparse;
