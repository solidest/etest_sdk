bitrl protocol prot_demo {
      segment sega {
            parser: 'int10',
            scale: 0.009,
            autovalue: [1, 2, 3]
      }
      segments segs [this.sega*8]{
            segment seg1 [this.seg-10] {
                  parser: 'float ! >',
                  autovalue: this.seg3+10
            }
            segment seg2 {
                  parser: 'double & <',
                  autovalue: CheckCode(SUM_8, this.seg_begin, this.seg_end)
            }
            segment seg3 {
                  parser: 'int16 & >',
                  autovalue: CheckCode([0x04C11DB7, 0xFFFFFFFF, 0xFFFFFFFF, true, true], this.seg_begin, this.seg_end)
            }
      }
      oneof {
            when(this.seg1 > -100 or true) as sub1:
                  segment seg4 {
                        parser: 'int16 ! <',
                        autovalue: 0
                  }
                  segment seg5 {
                        parser: 'int16 = >',
                        autovalue: 0
                  }

            when(this.seg2 == 99) as sub2:
                  segment seg6 {
                        parser: 'int16',
                        autovalue: 'abcdefg'
                  }
                  segment seg7 {
                        parser: 'int16 & <',
                        autovalue: ['aaa', 'bbb']
                  }
      }
      oneof{
            when (this.a+10*9/this.g<9 and this.b or this.a~=-99) as sub3:
                  segment seg6 {
                        parser: 'int16',
                        autovalue: 0
                  }

                  segment seg7 {
                        parser: 'int16 & <',
                        autovalue: 0,
                        endswith: '\0',
                  }
      }
      segment _ {}
      segment demo30 {
            parser: {pack: mypack, unpack: myunpack},
            autovalue: '\0',
      }

      segment demo3 [99] {
            parser: 'string>',
            autovalue: ByteSize(this.seg)+20,
            endswith: '\0',
            length: 99,
      }

      segment demo1 {
            parser: 'int16 ! <',
            autovalue: -100,
            option: {
                  max: 10,
                  min: 20,
                  select: [1, 2, 3],
                  reverse: true,
                  label: '标题',
                  tag: 'sort1'
            }
      }

      segment demo1 {

            parser: 'int16 ! <',
            autovalue: 'aaaa\0',
            endswith: '\0',
            option: {
                  max: 10,
                  min: 20,
                  select: [{
                        text: 'aa',
                        value: 2
                  }, {
                        text: 'bb',
                        value: 3
                  }],
                  tag: ['sort1', 'sort3'],
                  test:[[aa, 'bbb'], [1, true, false, {text: 'adf'}]],
                  memo: '协议段说明'
            }
      }
}