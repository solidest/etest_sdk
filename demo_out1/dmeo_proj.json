{
    "version": 1,
    "name": "demo_proj",
    "project": {
        "id": "vJ4sHlLUU",
        "topos": [
            [
                "topo11",
                {
                    "proj_id": "vJ4sHlLUU",
                    "kind": "topology",
                    "content": {
                        "mapping": [
                            {
                                "dev_id": "LWUQ9p94Aj",
                                "used": "uut"
                            },
                            {
                                "dev_id": "YZwhJjFs_t",
                                "used": "etest"
                            }
                        ],
                        "linking": [
                            {
                                "id": "DvoZivsNwLWc",
                                "conns": [
                                    "Opy18srC3F",
                                    "aJLEkGLHVF",
                                    "YRkEXhRmNT"
                                ]
                            },
                            {
                                "id": "YDHdfG-1ippH",
                                "conns": [
                                    "Vd032Mi-QE",
                                    "fr1pu6yyUu"
                                ]
                            },
                            {
                                "id": "RsjSXVJrB-lb",
                                "conns": [
                                    "L7TJBaSKHT",
                                    "b8kiORT75k"
                                ]
                            }
                        ],
                        "binding": [
                            {
                                "conn_id": "Opy18srC3F",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "aJLEkGLHVF",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "L7TJBaSKHT",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "YRkEXhRmNT",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "Vd032Mi-QE",
                                "uri": "auto"
                            }
                        ],
                        "memo": null
                    }
                }
            ],
            [
                "topo_main",
                {
                    "proj_id": "vJ4sHlLUU",
                    "kind": "topology",
                    "content": {
                        "mapping": [
                            {
                                "dev_id": "dC7qA-pvx-",
                                "used": "uut"
                            },
                            {
                                "dev_id": "wAZIJZXLUH",
                                "used": "uut"
                            },
                            {
                                "dev_id": "NLZq3jrhy_",
                                "used": "uut"
                            },
                            {
                                "dev_id": "RhryOoc1BHY",
                                "used": "etest"
                            }
                        ],
                        "linking": [
                            {
                                "id": "6dcxH6PYsgAG",
                                "conns": [
                                    "pReMlwEfsIU",
                                    "n89hUAsKLH",
                                    "-ajvHFzSBl",
                                    "iLNpAmW5cwT"
                                ]
                            }
                        ],
                        "binding": [
                            {
                                "conn_id": "pReMlwEfsIU",
                                "uri": "auto"
                            }
                        ],
                        "memo": null
                    }
                }
            ],
            [
                "topo_a",
                {
                    "proj_id": "vJ4sHlLUU",
                    "kind": "topology",
                    "content": {
                        "mapping": [
                            {
                                "dev_id": "RhryOoc1BHY",
                                "used": "uut"
                            },
                            {
                                "dev_id": "dC7qA-pvx-",
                                "used": "etest"
                            }
                        ],
                        "linking": [
                            {
                                "id": "HqP8KmlsB4j4",
                                "conns": [
                                    "pReMlwEfsIU",
                                    "n89hUAsKLH"
                                ]
                            }
                        ],
                        "binding": [
                            {
                                "conn_id": "n89hUAsKLH",
                                "uri": "auto"
                            }
                        ],
                        "memo": null
                    }
                }
            ],
            [
                "topo_b",
                {
                    "proj_id": "vJ4sHlLUU",
                    "kind": "topology",
                    "content": {
                        "mapping": [
                            {
                                "dev_id": "RhryOoc1BHY",
                                "used": "uut"
                            },
                            {
                                "dev_id": "wAZIJZXLUH",
                                "used": "etest"
                            }
                        ],
                        "linking": [
                            {
                                "id": "dFKpimx1MoeD",
                                "conns": [
                                    "pReMlwEfsIU",
                                    "-ajvHFzSBl"
                                ]
                            }
                        ],
                        "binding": [
                            {
                                "conn_id": "-ajvHFzSBl",
                                "uri": "auto"
                            }
                        ],
                        "memo": null
                    }
                }
            ],
            [
                "topo_c",
                {
                    "proj_id": "vJ4sHlLUU",
                    "kind": "topology",
                    "content": {
                        "mapping": [
                            {
                                "dev_id": "RhryOoc1BHY",
                                "used": "uut"
                            },
                            {
                                "dev_id": "NLZq3jrhy_",
                                "used": "etest"
                            }
                        ],
                        "linking": [
                            {
                                "id": "zKM3LAp0nCda",
                                "conns": [
                                    "pReMlwEfsIU",
                                    "iLNpAmW5cwT"
                                ]
                            }
                        ],
                        "binding": [
                            {
                                "conn_id": "iLNpAmW5cwT",
                                "uri": "auto"
                            }
                        ],
                        "memo": null
                    }
                }
            ],
            [
                "topo_rt",
                {
                    "proj_id": "vJ4sHlLUU",
                    "kind": "topology",
                    "content": {
                        "mapping": [
                            {
                                "dev_id": "bZhrzE2662M",
                                "used": "etest"
                            },
                            {
                                "dev_id": "OgEFyzYLEks",
                                "used": "etest"
                            },
                            {
                                "dev_id": "dDHVAnvk8ui",
                                "used": "etest"
                            },
                            {
                                "dev_id": "c6GajunWr1q",
                                "used": "etest"
                            }
                        ],
                        "linking": [
                            {
                                "id": "Vd53yIskr7Eh",
                                "conns": [
                                    "ugkyvTWDHq0",
                                    "KQFkAP3tysO"
                                ]
                            },
                            {
                                "id": "n63r8uurXuEK",
                                "conns": [
                                    "i6g4lTe6VoN",
                                    "q6_CHPfz6OZ",
                                    "n02B2LJGcmM"
                                ]
                            },
                            {
                                "id": "CwJjLUPpQU1C",
                                "conns": [
                                    "hsF-X1b1UXy",
                                    "asNQzlrZnvj"
                                ]
                            },
                            {
                                "id": "kAi1c2VLBXDL",
                                "conns": [
                                    "8UR64yoilNG",
                                    "M4LpGDYH9eK"
                                ]
                            }
                        ],
                        "binding": [
                            {
                                "conn_id": "ugkyvTWDHq0",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "i6g4lTe6VoN",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "hsF-X1b1UXy",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "KQFkAP3tysO",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "q6_CHPfz6OZ",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "n02B2LJGcmM",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "asNQzlrZnvj",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "8UR64yoilNG",
                                "uri": "COM1"
                            },
                            {
                                "conn_id": "M4LpGDYH9eK",
                                "uri": "COM2"
                            }
                        ],
                        "memo": null
                    }
                }
            ],
            [
                "topo_serial",
                {
                    "proj_id": "vJ4sHlLUU",
                    "kind": "topology",
                    "content": {
                        "mapping": [
                            {
                                "dev_id": "_E4tNXS7qwg",
                                "used": "etest"
                            },
                            {
                                "dev_id": "qMM3f7CVMNf",
                                "used": "etest"
                            }
                        ],
                        "linking": [
                            {
                                "id": "ywLhsfbxs7Ms",
                                "conns": [
                                    "fJpLiA7gOJQ",
                                    "B5WwxQ4LRjI"
                                ]
                            }
                        ],
                        "binding": [
                            {
                                "conn_id": "fJpLiA7gOJQ",
                                "uri": "COM1"
                            },
                            {
                                "conn_id": "B5WwxQ4LRjI",
                                "uri": "COM2"
                            }
                        ],
                        "memo": null
                    }
                }
            ],
            [
                "topo_tcp",
                {
                    "proj_id": "vJ4sHlLUU",
                    "kind": "topology",
                    "content": {
                        "mapping": [
                            {
                                "dev_id": "atcCqQVenAP",
                                "used": "etest"
                            },
                            {
                                "dev_id": "9ymr4TkZ6hV",
                                "used": "etest"
                            }
                        ],
                        "linking": [
                            {
                                "id": "34YaoPBCJ5KE",
                                "conns": [
                                    "Xy90CsAN-36",
                                    "WnEyoUiKPKb"
                                ]
                            },
                            {
                                "id": "KgZZpCCRwsQJ",
                                "conns": [
                                    "v5_LUSPrI2M",
                                    "1iFIxkDN0jW",
                                    "w8vCiXpFSv3",
                                    "0barwXQRwKm"
                                ]
                            },
                            {
                                "id": "D0j1l5vhUpF7",
                                "conns": [
                                    "-FzzVAOo4rq",
                                    "30DAdhtMWlB"
                                ]
                            },
                            {
                                "id": "DJJAg2s86HtZ",
                                "conns": [
                                    "RstQmUNOa38",
                                    "x1zIK91Aaeh"
                                ]
                            },
                            {
                                "id": "f6rBMcX9wJbH",
                                "conns": [
                                    "mQJ_5Fu7vAZ",
                                    "Bz8H3HiID_t",
                                    "EKypgThRWyB",
                                    "3lQKB-8KTDe"
                                ]
                            }
                        ],
                        "binding": [
                            {
                                "conn_id": "Xy90CsAN-36",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "w8vCiXpFSv3",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "0barwXQRwKm",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "-FzzVAOo4rq",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "RstQmUNOa38",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "EKypgThRWyB",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "3lQKB-8KTDe",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "WnEyoUiKPKb",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "v5_LUSPrI2M",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "1iFIxkDN0jW",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "30DAdhtMWlB",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "x1zIK91Aaeh",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "mQJ_5Fu7vAZ",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "Bz8H3HiID_t",
                                "uri": "auto"
                            }
                        ],
                        "memo": null
                    }
                }
            ],
            [
                "topo_udp",
                {
                    "proj_id": "vJ4sHlLUU",
                    "kind": "topology",
                    "content": {
                        "mapping": [
                            {
                                "dev_id": "qTtb12iW3_Z",
                                "used": "etest"
                            },
                            {
                                "dev_id": "OK8uWOd99VL",
                                "used": "etest"
                            }
                        ],
                        "linking": [
                            {
                                "id": "T0ko1ez8I9YE",
                                "conns": [
                                    "vIVNAg8Gce6",
                                    "vZq8Wk9Vimy"
                                ]
                            },
                            {
                                "id": "eQXkRg5YwFAU",
                                "conns": [
                                    "_sZ87o1S_DJ",
                                    "xiQSxIs-I4N",
                                    "45x-IAaTX9i"
                                ]
                            },
                            {
                                "id": "8-w6V1Fdojds",
                                "conns": [
                                    "SAtB7G4v9dK",
                                    "dx2IGWWAypl"
                                ]
                            }
                        ],
                        "binding": [
                            {
                                "conn_id": "vIVNAg8Gce6",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "_sZ87o1S_DJ",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "SAtB7G4v9dK",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "vZq8Wk9Vimy",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "xiQSxIs-I4N",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "45x-IAaTX9i",
                                "uri": "auto"
                            },
                            {
                                "conn_id": "dx2IGWWAypl",
                                "uri": "auto"
                            }
                        ],
                        "memo": null
                    }
                }
            ]
        ],
        "devs": [
            [
                "dev11",
                {
                    "id": "LWUQ9p94Aj",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "device",
                    "content": {
                        "items": [
                            {
                                "id": "fr1pu6yyUu",
                                "kind": "udp",
                                "name": "srv_1",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 9099,
                                    "ttl": 20
                                }
                            },
                            {
                                "id": "b8kiORT75k",
                                "kind": "udp",
                                "name": "c2",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 9098
                                }
                            }
                        ]
                    }
                }
            ],
            [
                "dev12",
                {
                    "id": "YZwhJjFs_t",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "device",
                    "content": {
                        "items": [
                            {
                                "id": "Vd032Mi-QE",
                                "kind": "udp",
                                "name": "udp_name",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 9097
                                }
                            },
                            {
                                "id": "Opy18srC3F",
                                "kind": "udp",
                                "name": "s1",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 9096
                                }
                            },
                            {
                                "id": "aJLEkGLHVF",
                                "kind": "udp",
                                "name": "s2",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 9095
                                }
                            },
                            {
                                "id": "L7TJBaSKHT",
                                "kind": "udp",
                                "name": "s3",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 9094
                                }
                            },
                            {
                                "id": "YRkEXhRmNT",
                                "kind": "udp",
                                "name": "s4",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 9093
                                }
                            }
                        ]
                    }
                }
            ],
            [
                "dev_a",
                {
                    "id": "dC7qA-pvx-",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "device",
                    "content": {
                        "items": [
                            {
                                "id": "n89hUAsKLH",
                                "kind": "udp",
                                "name": "conn",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 8001
                                }
                            }
                        ]
                    }
                }
            ],
            [
                "dev_b",
                {
                    "id": "wAZIJZXLUH",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "device",
                    "content": {
                        "items": [
                            {
                                "id": "-ajvHFzSBl",
                                "kind": "udp",
                                "name": "conn",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 8002
                                }
                            }
                        ]
                    }
                }
            ],
            [
                "dev_c",
                {
                    "id": "NLZq3jrhy_",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "device",
                    "content": {
                        "items": [
                            {
                                "id": "iLNpAmW5cwT",
                                "kind": "udp",
                                "name": "conn",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 8003
                                }
                            }
                        ]
                    }
                }
            ],
            [
                "main_ctr",
                {
                    "id": "RhryOoc1BHY",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "device",
                    "content": {
                        "items": [
                            {
                                "id": "pReMlwEfsIU",
                                "kind": "udp",
                                "name": "conn",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 8888
                                }
                            }
                        ]
                    }
                }
            ],
            [
                "udp1_",
                {
                    "id": "bZhrzE2662M",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "device",
                    "content": {
                        "items": [
                            {
                                "id": "ugkyvTWDHq0",
                                "kind": "udp",
                                "name": "conn1",
                                "config": {
                                    "ip": "0.0.0.0",
                                    "port": 3000,
                                    "ttl": 20,
                                    "reuseaddr": true
                                }
                            },
                            {
                                "id": "i6g4lTe6VoN",
                                "kind": "udp",
                                "name": "conn2",
                                "config": {
                                    "ip": "0.0.0.0",
                                    "port": 4000
                                }
                            },
                            {
                                "id": "hsF-X1b1UXy",
                                "kind": "udp",
                                "name": "conn3",
                                "config": {}
                            }
                        ]
                    }
                }
            ],
            [
                "udp2_",
                {
                    "id": "OgEFyzYLEks",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "device",
                    "content": {
                        "items": [
                            {
                                "id": "KQFkAP3tysO",
                                "kind": "udp",
                                "name": "conn1",
                                "config": {
                                    "ip": "0.0.0.0",
                                    "port": 5000,
                                    "ttl": 20
                                }
                            },
                            {
                                "id": "q6_CHPfz6OZ",
                                "kind": "udp",
                                "name": "conn2",
                                "config": {
                                    "ip": "0.0.0.0",
                                    "port": 6000
                                }
                            },
                            {
                                "id": "n02B2LJGcmM",
                                "kind": "udp",
                                "name": "conn3",
                                "config": {
                                    "ip": "0.0.0.0",
                                    "port": 7000
                                }
                            },
                            {
                                "id": "asNQzlrZnvj",
                                "kind": "udp",
                                "name": "conn4",
                                "config": {
                                    "ip": "0.0.0.0",
                                    "port": 8000
                                }
                            }
                        ]
                    }
                }
            ],
            [
                "dev1_",
                {
                    "id": "dDHVAnvk8ui",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "device",
                    "content": {
                        "items": [
                            {
                                "id": "8UR64yoilNG",
                                "kind": "serial_232",
                                "name": "conn1",
                                "config": {
                                    "baudrate": 115200,
                                    "bytesize": 8,
                                    "parity": "none",
                                    "stopbits": 1,
                                    "flowcontrol": "none"
                                }
                            }
                        ]
                    }
                }
            ],
            [
                "dev2_",
                {
                    "id": "c6GajunWr1q",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "device",
                    "content": {
                        "items": [
                            {
                                "id": "M4LpGDYH9eK",
                                "kind": "serial_232",
                                "name": "conn1",
                                "config": {
                                    "baudrate": 115200
                                }
                            }
                        ]
                    }
                }
            ],
            [
                "dev1",
                {
                    "id": "_E4tNXS7qwg",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "device",
                    "content": {
                        "items": [
                            {
                                "id": "fJpLiA7gOJQ",
                                "kind": "serial_232",
                                "name": "conn1",
                                "config": {
                                    "baudrate": 115200,
                                    "bytesize": 8,
                                    "parity": "none",
                                    "stopbits": 1,
                                    "flowcontrol": "none"
                                }
                            }
                        ]
                    }
                }
            ],
            [
                "dev2",
                {
                    "id": "qMM3f7CVMNf",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "device",
                    "content": {
                        "items": [
                            {
                                "id": "B5WwxQ4LRjI",
                                "kind": "serial_232",
                                "name": "conn1",
                                "config": {
                                    "baudrate": 115200
                                }
                            }
                        ]
                    }
                }
            ],
            [
                "client",
                {
                    "id": "atcCqQVenAP",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "device",
                    "content": {
                        "items": [
                            {
                                "id": "WnEyoUiKPKb",
                                "kind": "tcp_client",
                                "name": "tcp1",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 3333,
                                    "keepalive": true,
                                    "nodelay": false,
                                    "autoconnect": true
                                }
                            },
                            {
                                "id": "v5_LUSPrI2M",
                                "kind": "tcp_client",
                                "name": "tcp2",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 8888
                                }
                            },
                            {
                                "id": "1iFIxkDN0jW",
                                "kind": "tcp_client",
                                "name": "tcp3",
                                "config": {
                                    "ip": "127.0.0.1"
                                }
                            },
                            {
                                "id": "30DAdhtMWlB",
                                "kind": "tcp_client",
                                "name": "tcp4",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "autoconnect": false,
                                    "port": 5666
                                }
                            },
                            {
                                "id": "x1zIK91Aaeh",
                                "kind": "tcp_client",
                                "name": "tcp5",
                                "config": {}
                            },
                            {
                                "id": "mQJ_5Fu7vAZ",
                                "kind": "tcp_client",
                                "name": "tcp6",
                                "config": {}
                            },
                            {
                                "id": "Bz8H3HiID_t",
                                "kind": "tcp_client",
                                "name": "tcp7",
                                "config": {}
                            }
                        ]
                    }
                }
            ],
            [
                "server",
                {
                    "id": "9ymr4TkZ6hV",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "device",
                    "content": {
                        "items": [
                            {
                                "id": "Xy90CsAN-36",
                                "kind": "tcp_server",
                                "name": "srva",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 8080,
                                    "keepalive": true,
                                    "nodelay": true,
                                    "acceptany": false
                                }
                            },
                            {
                                "id": "w8vCiXpFSv3",
                                "kind": "tcp_server",
                                "name": "srvb",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 8088,
                                    "keepalive": false,
                                    "nodelay": true
                                }
                            },
                            {
                                "id": "0barwXQRwKm",
                                "kind": "tcp_server",
                                "name": "srvc",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 8089,
                                    "acceptany": true
                                }
                            },
                            {
                                "id": "-FzzVAOo4rq",
                                "kind": "tcp_server",
                                "name": "srvd",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 8090,
                                    "keepalive": true,
                                    "nodelay": false
                                }
                            },
                            {
                                "id": "RstQmUNOa38",
                                "kind": "tcp_server",
                                "name": "srve",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 8091,
                                    "keepalive": false,
                                    "nodelay": false
                                }
                            },
                            {
                                "id": "EKypgThRWyB",
                                "kind": "tcp_server",
                                "name": "srvf",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 8092
                                }
                            },
                            {
                                "id": "3lQKB-8KTDe",
                                "kind": "tcp_server",
                                "name": "srvg",
                                "config": {
                                    "ip": "127.0.0.1",
                                    "port": 8093
                                }
                            }
                        ]
                    }
                }
            ],
            [
                "udp1",
                {
                    "id": "qTtb12iW3_Z",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "device",
                    "content": {
                        "items": [
                            {
                                "id": "vIVNAg8Gce6",
                                "kind": "udp",
                                "name": "conn1",
                                "config": {
                                    "ip": "0.0.0.0",
                                    "port": 3000,
                                    "ttl": 20,
                                    "reuseaddr": true
                                }
                            },
                            {
                                "id": "_sZ87o1S_DJ",
                                "kind": "udp",
                                "name": "conn2",
                                "config": {
                                    "ip": "0.0.0.0",
                                    "port": 4000,
                                    "before_recv": "aaa"
                                }
                            },
                            {
                                "id": "SAtB7G4v9dK",
                                "kind": "udp",
                                "name": "conn3",
                                "config": {}
                            }
                        ]
                    }
                }
            ],
            [
                "udp2",
                {
                    "id": "OK8uWOd99VL",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "device",
                    "content": {
                        "items": [
                            {
                                "id": "vZq8Wk9Vimy",
                                "kind": "udp",
                                "name": "conn1",
                                "config": {
                                    "ip": "0.0.0.0",
                                    "port": 5000,
                                    "ttl": 20
                                }
                            },
                            {
                                "id": "xiQSxIs-I4N",
                                "kind": "udp",
                                "name": "conn2",
                                "config": {
                                    "ip": "0.0.0.0",
                                    "port": 6000
                                }
                            },
                            {
                                "id": "45x-IAaTX9i",
                                "kind": "udp",
                                "name": "conn3",
                                "config": {
                                    "ip": "0.0.0.0",
                                    "port": 7000
                                }
                            },
                            {
                                "id": "dx2IGWWAypl",
                                "kind": "udp",
                                "name": "conn4",
                                "config": {
                                    "ip": "0.0.0.0",
                                    "port": 8000
                                }
                            }
                        ]
                    }
                }
            ]
        ],
        "prots": [
            [
                "prot_11",
                {
                    "id": "0uyMGmoD31w",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "DEYjlqb7Ri8",
                                "kind": "segment",
                                "name": "seg_1",
                                "parser": "int1",
                                "autovalue": 0
                            },
                            {
                                "id": "NFCtmw-HoKF",
                                "kind": "segment",
                                "name": "seg_2",
                                "parser": "int2",
                                "autovalue": 0
                            },
                            {
                                "id": "erJUBITwdhr",
                                "kind": "segment",
                                "name": "seg_3",
                                "parser": "int3",
                                "autovalue": 0
                            },
                            {
                                "id": "OIVjRHHcfft",
                                "kind": "segment",
                                "name": "seg_4",
                                "parser": "int4",
                                "autovalue": 0
                            },
                            {
                                "id": "NodV4HcNzIk",
                                "kind": "segment",
                                "name": "seg_5",
                                "parser": "int5",
                                "autovalue": 0
                            },
                            {
                                "id": "VOrz6z3eIHk",
                                "kind": "segment",
                                "name": "seg_6",
                                "parser": "int6",
                                "autovalue": 0
                            },
                            {
                                "id": "HcGR7stwlsH",
                                "kind": "segment",
                                "name": "seg_7",
                                "parser": "int7",
                                "autovalue": 0
                            },
                            {
                                "id": "hXf42fbdmqh",
                                "kind": "segment",
                                "name": "seg_8",
                                "parser": "int8",
                                "autovalue": 0
                            },
                            {
                                "id": "jviNawh7xLA",
                                "kind": "segment",
                                "name": "seg_9",
                                "parser": "int9",
                                "autovalue": 0
                            },
                            {
                                "id": "gLS89FyS1NE",
                                "kind": "segment",
                                "name": "seg_10",
                                "parser": "int10",
                                "autovalue": 0
                            },
                            {
                                "id": "3afgAkaYOGO",
                                "kind": "segment",
                                "name": "seg_11",
                                "parser": "int11",
                                "autovalue": 0
                            },
                            {
                                "id": "Dyid-Gkj38k",
                                "kind": "segment",
                                "name": "seg_12",
                                "parser": "int12",
                                "autovalue": 0
                            },
                            {
                                "id": "gJ6POjJgYxd",
                                "kind": "segment",
                                "name": "seg_13",
                                "parser": "int13",
                                "autovalue": 0
                            },
                            {
                                "id": "39uE4RXwLX1",
                                "kind": "segment",
                                "name": "seg_14",
                                "parser": "int14",
                                "autovalue": 0
                            },
                            {
                                "id": "J8Ez1imc43L",
                                "kind": "segment",
                                "name": "seg_15",
                                "parser": "int15",
                                "autovalue": 0
                            },
                            {
                                "id": "Wp7fE2tb1nc",
                                "kind": "segment",
                                "name": "seg_16",
                                "parser": "int16",
                                "autovalue": 0
                            },
                            {
                                "id": "toSrHW7w6Fm",
                                "kind": "segment",
                                "name": "seg_17",
                                "parser": "int17",
                                "autovalue": 0
                            },
                            {
                                "id": "8-IoO2xPJRa",
                                "kind": "segment",
                                "name": "seg_18",
                                "parser": "int18",
                                "autovalue": 0
                            },
                            {
                                "id": "Pq1jHa6-Yk9",
                                "kind": "segment",
                                "name": "seg_19",
                                "parser": "int19",
                                "autovalue": 0
                            },
                            {
                                "id": "3vnXGujIo-f",
                                "kind": "segment",
                                "name": "seg_20",
                                "parser": "int20",
                                "autovalue": 0
                            },
                            {
                                "id": "dgTmpfaAzF9",
                                "kind": "segment",
                                "name": "seg_21",
                                "parser": "int21",
                                "autovalue": 0
                            },
                            {
                                "id": "LmwCNKnM_BP",
                                "kind": "segment",
                                "name": "seg_22",
                                "parser": "int22",
                                "autovalue": 0
                            },
                            {
                                "id": "Vf0Hp-XbUmS",
                                "kind": "segment",
                                "name": "seg_23",
                                "parser": "int23",
                                "autovalue": 0
                            },
                            {
                                "id": "Aj3OJ_a0NH9",
                                "kind": "segment",
                                "name": "seg_24",
                                "parser": "int24",
                                "autovalue": 0
                            },
                            {
                                "id": "Rf8wXicezV_",
                                "kind": "segment",
                                "name": "seg_25",
                                "parser": "int25",
                                "autovalue": 0
                            },
                            {
                                "id": "6UnnOY8qErz",
                                "kind": "segment",
                                "name": "seg_26",
                                "parser": "int26",
                                "autovalue": 0
                            },
                            {
                                "id": "odZEQLj0ARk",
                                "kind": "segment",
                                "name": "seg_27",
                                "parser": "int27",
                                "autovalue": 0
                            },
                            {
                                "id": "WNph90GyyTr",
                                "kind": "segment",
                                "name": "seg_28",
                                "parser": "int28",
                                "autovalue": 0
                            },
                            {
                                "id": "97-Xztvr0U3",
                                "kind": "segment",
                                "name": "seg_29",
                                "parser": "int29",
                                "autovalue": 0
                            },
                            {
                                "id": "jDt0yJrCcHj",
                                "kind": "segment",
                                "name": "seg_30",
                                "parser": "int30",
                                "autovalue": 0
                            },
                            {
                                "id": "sbsyNBnbmf-",
                                "kind": "segment",
                                "name": "seg_31",
                                "parser": "int31",
                                "autovalue": 0
                            },
                            {
                                "id": "xOlfPQZUGvv",
                                "kind": "segment",
                                "name": "seg_32",
                                "parser": "int32",
                                "autovalue": 0
                            },
                            {
                                "id": "bMRSUS_RPom",
                                "kind": "segment",
                                "name": "seg_33",
                                "parser": "int33",
                                "autovalue": 0
                            },
                            {
                                "id": "jXkbW1EiMLG",
                                "kind": "segment",
                                "name": "seg_34",
                                "parser": "int34",
                                "autovalue": 0
                            },
                            {
                                "id": "vk0N9FmIvXK",
                                "kind": "segment",
                                "name": "seg_35",
                                "parser": "int35",
                                "autovalue": 0
                            },
                            {
                                "id": "e--TE92cMQ0",
                                "kind": "segment",
                                "name": "seg_36",
                                "parser": "int36",
                                "autovalue": 0
                            },
                            {
                                "id": "5YXXJHOBjnF",
                                "kind": "segment",
                                "name": "seg_37",
                                "parser": "int37",
                                "autovalue": 0
                            },
                            {
                                "id": "eLSQPYkNp9i",
                                "kind": "segment",
                                "name": "seg_38",
                                "parser": "int38",
                                "autovalue": 0
                            },
                            {
                                "id": "q1NZ6nFDRCQ",
                                "kind": "segment",
                                "name": "seg_39",
                                "parser": "int39",
                                "autovalue": 0
                            },
                            {
                                "id": "P4V3vNnfMet",
                                "kind": "segment",
                                "name": "seg_40",
                                "parser": "int40",
                                "autovalue": 0
                            },
                            {
                                "id": "wIe4MAvu8Tb",
                                "kind": "segment",
                                "name": "seg_41",
                                "parser": "int41",
                                "autovalue": 0
                            },
                            {
                                "id": "ZEFHIH0i7px",
                                "kind": "segment",
                                "name": "seg_42",
                                "parser": "int42",
                                "autovalue": 0
                            },
                            {
                                "id": "0vp-7b3dzA1",
                                "kind": "segment",
                                "name": "seg_43",
                                "parser": "int43",
                                "autovalue": 0
                            },
                            {
                                "id": "K-RjA6O0rcQ",
                                "kind": "segment",
                                "name": "seg_44",
                                "parser": "int44",
                                "autovalue": 0
                            },
                            {
                                "id": "7sZ_PV_8CTs",
                                "kind": "segment",
                                "name": "seg_45",
                                "parser": "int45",
                                "autovalue": 0
                            },
                            {
                                "id": "Ro2jLYNs1CR",
                                "kind": "segment",
                                "name": "seg_46",
                                "parser": "int46",
                                "autovalue": 0
                            },
                            {
                                "id": "oPhdcVT8vSJ",
                                "kind": "segment",
                                "name": "seg_47",
                                "parser": "int47",
                                "autovalue": 0
                            },
                            {
                                "id": "60UZWEzALyD",
                                "kind": "segment",
                                "name": "seg_48",
                                "parser": "int48",
                                "autovalue": 0
                            },
                            {
                                "id": "5_g5vnQy-v1",
                                "kind": "segment",
                                "name": "seg_49",
                                "parser": "int49",
                                "autovalue": 0
                            },
                            {
                                "id": "H-xcgw9KQqw",
                                "kind": "segment",
                                "name": "seg_50",
                                "parser": "int50",
                                "autovalue": 0
                            },
                            {
                                "id": "BWQb6mHn8So",
                                "kind": "segment",
                                "name": "seg_51",
                                "parser": "int51",
                                "autovalue": 0
                            },
                            {
                                "id": "d4aoaVgTGgY",
                                "kind": "segment",
                                "name": "seg_52",
                                "parser": "int52",
                                "autovalue": 0
                            },
                            {
                                "id": "BzEuH-jat74",
                                "kind": "segment",
                                "name": "seg_53",
                                "parser": "int53",
                                "autovalue": 0
                            },
                            {
                                "id": "VMrIPylEPpA",
                                "kind": "segment",
                                "name": "seg_54",
                                "parser": "int54",
                                "autovalue": 0
                            },
                            {
                                "id": "7f2AROLak2G",
                                "kind": "segment",
                                "name": "seg_55",
                                "parser": "int55",
                                "autovalue": 0
                            },
                            {
                                "id": "0Xoukw5rUN2",
                                "kind": "segment",
                                "name": "seg_56",
                                "parser": "int56",
                                "autovalue": 0
                            },
                            {
                                "id": "BzQ78LWrh7a",
                                "kind": "segment",
                                "name": "seg_57",
                                "parser": "int57",
                                "autovalue": 0
                            },
                            {
                                "id": "K3K1D71F72w",
                                "kind": "segment",
                                "name": "seg_58",
                                "parser": "int58",
                                "autovalue": 0
                            },
                            {
                                "id": "Y1Hl2YroDoZ",
                                "kind": "segment",
                                "name": "seg_59",
                                "parser": "int59",
                                "autovalue": 0
                            },
                            {
                                "id": "PVAj2jK64Fr",
                                "kind": "segment",
                                "name": "seg_60",
                                "parser": "int60",
                                "autovalue": 0
                            },
                            {
                                "id": "Yhfn9KF5-rw",
                                "kind": "segment",
                                "name": "seg_61",
                                "parser": "int61",
                                "autovalue": 0
                            },
                            {
                                "id": "BYbT7VoISK7",
                                "kind": "segment",
                                "name": "seg_62",
                                "parser": "int62",
                                "autovalue": 0
                            },
                            {
                                "id": "cE5HU2Lw6kW",
                                "kind": "segment",
                                "name": "seg_63",
                                "parser": "int63",
                                "autovalue": 0
                            },
                            {
                                "id": "sdXQ3izLz2a",
                                "kind": "segment",
                                "name": "seg_64",
                                "parser": "int64",
                                "autovalue": 0
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot19",
                {
                    "id": "ZQswPUN_hIi",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "FTn3TFzRC9Z",
                                "kind": "segment",
                                "name": "seg_1",
                                "arrlen": 8,
                                "parser": "uint32",
                                "autovalue": 0
                            },
                            {
                                "id": "_kSmFX3lrY7",
                                "kind": "segment",
                                "name": "seg_2",
                                "arrlen": 3,
                                "parser": "int16"
                            },
                            {
                                "id": "aulj74MtIbe",
                                "kind": "segment",
                                "name": "seg_3",
                                "parser": "float",
                                "autovalue": 0
                            },
                            {
                                "id": "QW3zKFfb0ap",
                                "kind": "segment",
                                "name": "seg_4",
                                "parser": "float"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot20",
                {
                    "id": "_kbryMC8bwT",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "Jgz_WWxxrvh",
                                "kind": "segment",
                                "name": "seg_1",
                                "arrlen": 1,
                                "parser": "int32",
                                "autovalue": 0
                            },
                            {
                                "id": "CQNEBp3cUTc",
                                "kind": "segment",
                                "name": "seg_2",
                                "arrlen": 2,
                                "parser": "float"
                            },
                            {
                                "id": "IEZxut7SgJa",
                                "kind": "segment",
                                "name": "seg_4",
                                "parser": "double <"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot21",
                {
                    "id": "elpDYx4L_U9",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "M09av4xLV1h",
                                "kind": "segment",
                                "name": "seg_1",
                                "arrlen": 1,
                                "parser": "uint32",
                                "autovalue": 0
                            },
                            {
                                "id": "L9BIXXvrnD2",
                                "kind": "segment",
                                "name": "seg_2",
                                "arrlen": 3,
                                "parser": "int16"
                            },
                            {
                                "id": "-YlfoAN-2eK",
                                "kind": "segment",
                                "name": "seg_3",
                                "parser": "float",
                                "autovalue": 0
                            },
                            {
                                "id": "o9KjTfpGrrM",
                                "kind": "segment",
                                "name": "seg_4",
                                "arrlen": 3,
                                "parser": "float &"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot22",
                {
                    "id": "Tfk0e7v3u8-",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "99Fd_jSB3ol",
                                "kind": "segment",
                                "name": "seg_1",
                                "arrlen": 1,
                                "parser": "int16",
                                "autovalue": 0
                            },
                            {
                                "id": "amrNezUz-wz",
                                "kind": "segment",
                                "name": "seg_2",
                                "arrlen": 3,
                                "parser": "int24  > &",
                                "autovalue": 0
                            },
                            {
                                "id": "FhMYqPnigoG",
                                "kind": "segment",
                                "name": "seg_5",
                                "arrlen": 1,
                                "parser": "uint8  < !"
                            },
                            {
                                "id": "5ag6F5DUQgL",
                                "kind": "segment",
                                "name": "seg_3",
                                "parser": "float",
                                "autovalue": 0
                            },
                            {
                                "id": "6q3-zjes7nd",
                                "kind": "segment",
                                "name": "seg_4",
                                "arrlen": 3,
                                "parser": "float ! <"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot_array",
                {
                    "id": "0WZ48k7PK3P",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "Bc8izuTUpdm",
                                "kind": "segment",
                                "name": "seg_1",
                                "arrlen": 2,
                                "parser": "int64",
                                "autovalue": "[23,2]"
                            },
                            {
                                "id": "6L1NDl1VEGD",
                                "kind": "segment",
                                "name": "seg_2",
                                "arrlen": 2,
                                "parser": "string",
                                "length": 3,
                                "autovalue": "[\"qwe\",\"222\"]"
                            },
                            {
                                "id": "fFRVtx0mgeG",
                                "kind": "segment",
                                "name": "seg_3",
                                "arrlen": 0
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot_arrays",
                {
                    "id": "cMBas9KmI0X",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "z6rGQKxvGvD",
                                "kind": "segment",
                                "name": "head",
                                "parser": "uint64",
                                "autovalue": 1
                            },
                            {
                                "id": "fWin5PgQEfy",
                                "kind": "segments",
                                "name": "array",
                                "items": [
                                    {
                                        "id": "wc2QZ1PDxBw",
                                        "kind": "segment",
                                        "name": "number",
                                        "parser": "uint8",
                                        "autovalue": 1
                                    },
                                    {
                                        "id": "mto0FaTiHYh",
                                        "kind": "segments",
                                        "name": "list",
                                        "items": [
                                            {
                                                "id": "sMdyipZ3Uce",
                                                "kind": "segment",
                                                "name": "seg_1",
                                                "parser": "uint16",
                                                "autovalue": 1
                                            },
                                            {
                                                "id": "k7kjKPu8rkP",
                                                "kind": "segment",
                                                "name": "seg_2",
                                                "parser": "string",
                                                "endwith": "'#3x@#@##$%'",
                                                "autovalue": "'12'"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot27",
                {
                    "id": "BGLSBBV7xfl",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "utgalwYTSKD",
                                "kind": "segment",
                                "name": "seg_1",
                                "arrlen": 1,
                                "parser": "int32",
                                "autovalue": 0
                            },
                            {
                                "id": "olAOVjEuC8k",
                                "kind": "segment",
                                "name": "seg_2",
                                "arrlen": 2,
                                "parser": "string",
                                "autovalue": 0
                            },
                            {
                                "id": "sh7M1F4pi-d",
                                "kind": "segment",
                                "name": "seg_3",
                                "parser": "double <"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot28",
                {
                    "id": "UvQGg-rpMHG",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "PzASXD90-cM",
                                "kind": "segment",
                                "name": "type1",
                                "parser": "uint32"
                            },
                            {
                                "id": "poyHHC1Qr4t",
                                "kind": "segment",
                                "name": "type2",
                                "parser": "uint8",
                                "autovalue": "((this.type1 * 4) / 2) - 2"
                            },
                            {
                                "id": "EHFrgtYpeFf",
                                "kind": "oneof",
                                "items": [
                                    {
                                        "id": "8m_-XcI5k_f",
                                        "kind": "oneofitem",
                                        "condition": "this.type1 == 3",
                                        "items": [
                                            {
                                                "id": "R4xZhABe4xm",
                                                "kind": "segment",
                                                "name": "x",
                                                "parser": "int16",
                                                "autovalue": 2
                                            },
                                            {
                                                "id": "gHHeTAmMe_X",
                                                "kind": "oneof",
                                                "items": [
                                                    {
                                                        "id": "ngJFrY13rOB",
                                                        "kind": "oneofitem",
                                                        "condition": "this.x == 3",
                                                        "items": [
                                                            {
                                                                "id": "nEQlA7Zz2Cq",
                                                                "kind": "segment",
                                                                "name": "p",
                                                                "parser": "int32",
                                                                "autovalue": -6
                                                            },
                                                            {
                                                                "id": "UwGgCYN9HjT",
                                                                "kind": "oneof",
                                                                "items": [
                                                                    {
                                                                        "id": "eAEJAgRz-FV",
                                                                        "kind": "oneofitem",
                                                                        "condition": "this.p == -6",
                                                                        "items": [
                                                                            {
                                                                                "id": "dgtFRo2MS_k",
                                                                                "kind": "segment",
                                                                                "name": "p1",
                                                                                "parser": "int32",
                                                                                "autovalue": "((this.p * 2) - 4) + 1"
                                                                            },
                                                                            {
                                                                                "id": "GOoG077nyMo",
                                                                                "kind": "segment",
                                                                                "name": "p2",
                                                                                "parser": "string",
                                                                                "autovalue": "'1223\\0'"
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "id": "wDGud3bBxiL",
                                                        "kind": "oneofitem",
                                                        "condition": "this.x == 2",
                                                        "items": [
                                                            {
                                                                "id": "OIv4uME5a8l",
                                                                "kind": "segment",
                                                                "name": "p",
                                                                "parser": "int8",
                                                                "autovalue": -6
                                                            },
                                                            {
                                                                "id": "kksc6tLZekQ",
                                                                "kind": "oneof",
                                                                "items": [
                                                                    {
                                                                        "id": "cqoMyrbvaR1",
                                                                        "kind": "oneofitem",
                                                                        "condition": "this.p == -6",
                                                                        "items": [
                                                                            {
                                                                                "id": "OlO7ZYWd8kA",
                                                                                "kind": "segment",
                                                                                "name": "p1",
                                                                                "parser": "int32",
                                                                                "autovalue": "((this.p * 2) - 4) + 1"
                                                                            },
                                                                            {
                                                                                "id": "9UPWDY_d2iQ",
                                                                                "kind": "segment",
                                                                                "name": "p2",
                                                                                "parser": "string",
                                                                                "autovalue": "'1223\\0'"
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "id": "ldFWqp-GwBC",
                                                        "kind": "oneofitem",
                                                        "condition": "this.x == 1",
                                                        "items": [
                                                            {
                                                                "id": "o5LbjtJ2N54",
                                                                "kind": "segment",
                                                                "name": "p",
                                                                "parser": "uint1",
                                                                "autovalue": 1
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "id": "txN9iT5_Vis",
                                        "kind": "oneofitem",
                                        "condition": "this.type1 == 0",
                                        "items": [
                                            {
                                                "id": "HfeHZdIHY8c",
                                                "kind": "segment",
                                                "name": "x",
                                                "parser": "float",
                                                "autovalue": 1.2
                                            },
                                            {
                                                "id": "8hHBrb3G-nJ",
                                                "kind": "segment",
                                                "name": "y",
                                                "parser": "float",
                                                "autovalue": 1.2
                                            },
                                            {
                                                "id": "rrBM6cJNo-S",
                                                "kind": "segment",
                                                "name": "z",
                                                "parser": "double",
                                                "autovalue": 1.2
                                            }
                                        ]
                                    },
                                    {
                                        "id": "Z2T_Z10JrMz",
                                        "kind": "oneofitem",
                                        "condition": "this.type1 == 1",
                                        "items": [
                                            {
                                                "id": "yfJg-t7NP1A",
                                                "kind": "segment",
                                                "name": "x",
                                                "parser": "double",
                                                "autovalue": 0
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "9TGZjLn1TK5",
                                "kind": "segment",
                                "name": "aa"
                            },
                            {
                                "id": "R0ynCUsLYSE",
                                "kind": "oneof",
                                "items": [
                                    {
                                        "id": "fYyR3-vfYtl",
                                        "kind": "oneofitem",
                                        "condition": "this.type2 == 1",
                                        "items": [
                                            {
                                                "id": "yezWCZnFgiZ",
                                                "kind": "segment",
                                                "name": "x1",
                                                "parser": "uint32",
                                                "autovalue": 15
                                            },
                                            {
                                                "id": "1gamcy-SSkg",
                                                "kind": "oneof",
                                                "items": [
                                                    {
                                                        "id": "cRPm14y_Wls",
                                                        "kind": "oneofitem",
                                                        "condition": "this.x1 == 15",
                                                        "items": [
                                                            {
                                                                "id": "yIgyiPedmS7",
                                                                "kind": "segment",
                                                                "name": "x11",
                                                                "parser": "uint32",
                                                                "autovalue": 2
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "id": "mi-hakSv4QC",
                                        "kind": "oneofitem",
                                        "condition": "this.type2 == 2",
                                        "items": [
                                            {
                                                "id": "0Es4RHBz9sN",
                                                "kind": "segment",
                                                "name": "x2",
                                                "parser": "float",
                                                "autovalue": 2.1
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "rPjouVBkojp",
                                "kind": "segment",
                                "name": "test",
                                "parser": "float",
                                "autovalue": "(3 * (1 + this.type1)) + 1"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot29",
                {
                    "id": "7cHzrNLi2T_",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "QaWBhj36rW6",
                                "kind": "segment",
                                "name": "seg_3",
                                "parser": "double <"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot30",
                {
                    "id": "NBJVyNZ8qsy",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "QHsPJ2r8Vxz",
                                "kind": "segment",
                                "name": "seg_1",
                                "parser": "int8",
                                "autovalue": 21930
                            },
                            {
                                "id": "rhoerOOCD8W",
                                "kind": "segment",
                                "name": "seg_2",
                                "parser": "string"
                            },
                            {
                                "id": "liDY6vzecB3",
                                "kind": "segment",
                                "name": "seg_3",
                                "parser": "int16",
                                "autovalue": 1
                            },
                            {
                                "id": "anv7JN4rSw2",
                                "kind": "segment",
                                "name": "seg_4",
                                "parser": "int32",
                                "autovalue": "ByteSize(this.seg_3)"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot31",
                {
                    "id": "Bt9tIDLOXEp",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "oPe5XMXfa1q",
                                "kind": "segment",
                                "name": "seg_1",
                                "parser": "int8",
                                "autovalue": 21930
                            },
                            {
                                "id": "qzY59IqlOY8",
                                "kind": "segment",
                                "name": "seg_2",
                                "parser": "int64"
                            },
                            {
                                "id": "_p5916Plbmu",
                                "kind": "segment",
                                "name": "seg_3",
                                "parser": "float"
                            },
                            {
                                "id": "9WOO3W4yGDm",
                                "kind": "segment",
                                "name": "seg_4",
                                "parser": "int32",
                                "autovalue": "ByteSize(this.seg_3)"
                            },
                            {
                                "id": "9_TGtta7Nqj",
                                "kind": "segment",
                                "name": "seg_5",
                                "parser": "int16",
                                "autovalue": "ByteSize(this.seg_4)"
                            },
                            {
                                "id": "X8569mhsO4K",
                                "kind": "segment",
                                "name": "seg_6",
                                "parser": "uint64",
                                "autovalue": "ByteSize(this.seg_2)"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot32",
                {
                    "id": "6RuwbmcVzVR",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "ildxENaV9q_",
                                "kind": "segment",
                                "name": "seg_1",
                                "parser": "string",
                                "length": 3,
                                "autovalue": "CheckCode(SUM_8)"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot33",
                {
                    "id": "BIGA2h5Ih2R",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "sfsMBInWuQL",
                                "kind": "segment",
                                "name": "seg_1",
                                "parser": "uint32",
                                "autovalue": "CheckCode(XOR_8)"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot34",
                {
                    "id": "ijjXoJ2t9St",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "nJRx2Ynqxz9",
                                "kind": "segment",
                                "name": "seg_1",
                                "parser": "int32 > &",
                                "autovalue": "CheckCode(XOR_32)"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot35",
                {
                    "id": "dfeAGAYfOd7",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "0CZq_4plnns",
                                "kind": "segment",
                                "name": "seg_1",
                                "arrlen": 2,
                                "parser": "string",
                                "autovalue": "CheckCode(XOR_32_FALSE)"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot36",
                {
                    "id": "Jq5ZBXWhMbT",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "L-h4yzorf7j",
                                "kind": "segment",
                                "name": "seg_1",
                                "arrlen": 2,
                                "parser": "int16",
                                "autovalue": "CheckCode(XOR_32_FALSE)"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot37",
                {
                    "id": "ROLnqdYKXBi",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "3xPaXszI87t",
                                "kind": "segment",
                                "name": "seg_1",
                                "parser": "string",
                                "length": 3,
                                "autovalue": "CheckCode(CRC_4_ITU)"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot38",
                {
                    "id": "1jbsHvYW17a",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "NPus7l3K71d",
                                "kind": "segment",
                                "name": "seg_1",
                                "parser": "uint32",
                                "autovalue": "CheckCode(CRC_64)"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot39",
                {
                    "id": "Cf_cZ2sa-cM",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "UqOl7CqXElE",
                                "kind": "segment",
                                "name": "seg_1",
                                "parser": "int32 > &",
                                "autovalue": "CheckCode(CRC_40_GSM)"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot40",
                {
                    "id": "kqMaKf0U_56",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "EiMq9xPTEx2",
                                "kind": "segment",
                                "name": "seg_1",
                                "arrlen": 2,
                                "parser": "string",
                                "autovalue": "CheckCode(CRC_32_Q)"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot41",
                {
                    "id": "P2oHlp0F1M9",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "QONwRX0dLzu",
                                "kind": "segment",
                                "name": "seg_1",
                                "arrlen": 2,
                                "parser": "int16",
                                "autovalue": "CheckCode(CRC_5_EPC)"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot42",
                {
                    "id": "8H4dpYWBfcE",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "IZEDgTNQjKW",
                                "kind": "segment",
                                "name": "seg_1",
                                "arrlen": 2,
                                "parser": "int16",
                                "autovalue": "CheckCode(CRC_15_MPT1327)"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot43",
                {
                    "id": "72UNXNMuz3m",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "E6zSwpi11bl",
                                "kind": "segment",
                                "name": "seg_1",
                                "arrlen": 2,
                                "parser": "int16",
                                "autovalue": "CheckCode(CRC_16_DECTX)"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot44",
                {
                    "id": "GYpG9FMgYVu",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "CzU8mEoTDrJ",
                                "kind": "segment",
                                "name": "seg_1",
                                "arrlen": 2,
                                "parser": "int16",
                                "autovalue": "CheckCode(CRC_16_XMODEM)"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot_14",
                {
                    "id": "BhZrquMFFkW",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "qX1yvTsbDYx",
                                "kind": "segment",
                                "name": "seg_1",
                                "parser": "float !",
                                "autovalue": 0
                            },
                            {
                                "id": "ifA6g0OHCA7",
                                "kind": "segment",
                                "name": "seg_2",
                                "parser": "double !",
                                "autovalue": 0
                            },
                            {
                                "id": "HPDe7ML_Ozf",
                                "kind": "segment",
                                "name": "seg_3",
                                "parser": "int32 !",
                                "autovalue": 0
                            },
                            {
                                "id": "eBllzte6fIN",
                                "kind": "segment",
                                "name": "seg_4",
                                "parser": "uint32 !",
                                "autovalue": 0
                            },
                            {
                                "id": "uUtPJeEIwJQ",
                                "kind": "segment",
                                "name": "seg_5",
                                "parser": "float &",
                                "autovalue": 0
                            },
                            {
                                "id": "mm4hEMKqbJJ",
                                "kind": "segment",
                                "name": "seg_6",
                                "parser": "double &",
                                "autovalue": 0
                            },
                            {
                                "id": "_jEtFWKTmZd",
                                "kind": "segment",
                                "name": "seg_7",
                                "parser": "int32 &",
                                "autovalue": 0
                            },
                            {
                                "id": "7bGVOM_l8re",
                                "kind": "segment",
                                "name": "seg_8",
                                "parser": "uint32 &",
                                "autovalue": 0
                            },
                            {
                                "id": "fWZKwfQC5AY",
                                "kind": "segment",
                                "name": "seg_9",
                                "parser": "float >",
                                "autovalue": 0
                            },
                            {
                                "id": "GNKwvCgLQfr",
                                "kind": "segment",
                                "name": "seg_10",
                                "parser": "double >",
                                "autovalue": 0
                            },
                            {
                                "id": "rAKOY2p5sP0",
                                "kind": "segment",
                                "name": "seg_11",
                                "parser": "int32 >",
                                "autovalue": 0
                            },
                            {
                                "id": "-t-HdVk8Sj_",
                                "kind": "segment",
                                "name": "seg_12",
                                "parser": "uint32 >",
                                "autovalue": 0
                            },
                            {
                                "id": "sl1eBBkTpkQ",
                                "kind": "segment",
                                "name": "seg_13",
                                "parser": "float <",
                                "autovalue": 0
                            },
                            {
                                "id": "c-5ySCG1VyU",
                                "kind": "segment",
                                "name": "seg_14",
                                "parser": "double <",
                                "autovalue": 0
                            },
                            {
                                "id": "R1bapWKbHJq",
                                "kind": "segment",
                                "name": "seg_15",
                                "parser": "int32 <",
                                "autovalue": 0
                            },
                            {
                                "id": "-Omax0fNgCL",
                                "kind": "segment",
                                "name": "seg_16",
                                "parser": "uint32 <",
                                "autovalue": 0
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot_13",
                {
                    "id": "-qOGzVm-Ip7",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "kIsunR4Diwmt",
                                "kind": "segment",
                                "name": "seg_1",
                                "parser": "float",
                                "autovalue": 0
                            },
                            {
                                "id": "eaqz7qmGpSCB",
                                "kind": "segment",
                                "name": "seg_2",
                                "parser": "double",
                                "autovalue": 0
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot_message",
                {
                    "id": "kAL_VhOl-ksR",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "pn696hjz9YR1",
                                "kind": "segment",
                                "name": "seg_message",
                                "parser": "uint8",
                                "autovalue": 0
                            },
                            {
                                "id": "zbhtVqKdx7tC",
                                "kind": "segments",
                                "name": "seg_messages",
                                "items": [
                                    {
                                        "id": "tdtPT5tDfR5S",
                                        "kind": "segment",
                                        "name": "msg_string",
                                        "parser": "string",
                                        "endwith": "'~'",
                                        "autovalue": "'123'"
                                    },
                                    {
                                        "id": "g2AnUEEWIsjT",
                                        "kind": "segment",
                                        "name": "msg",
                                        "arrlen": 2,
                                        "parser": "string",
                                        "length": 3,
                                        "autovalue": "[\"123\",\"000\"]"
                                    },
                                    {
                                        "id": "b9jtSIc-7Lr-",
                                        "kind": "segment",
                                        "name": "uint",
                                        "parser": "int64",
                                        "autovalue": 0
                                    }
                                ]
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot23",
                {
                    "id": "2nzINVG9bDhg",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "xg3fYu9LzxMD",
                                "kind": "segment",
                                "name": "type1",
                                "parser": "int8",
                                "autovalue": 0
                            },
                            {
                                "id": "eMByszGlwJ1K",
                                "kind": "segment",
                                "name": "type2",
                                "parser": "int8",
                                "autovalue": "this.type1 * 2"
                            },
                            {
                                "id": "406uI3Em6Iee",
                                "kind": "oneof",
                                "items": [
                                    {
                                        "id": "sqrnDPY6osuQ",
                                        "kind": "oneofitem",
                                        "condition": "this.type1 == 2",
                                        "items": [
                                            {
                                                "id": "B5UyW90iuoGF",
                                                "kind": "segment",
                                                "name": "x",
                                                "parser": "float",
                                                "autovalue": 0.11
                                            },
                                            {
                                                "id": "3_qZHshNTODS",
                                                "kind": "segment",
                                                "name": "y",
                                                "parser": "float",
                                                "autovalue": 1.11
                                            }
                                        ]
                                    },
                                    {
                                        "id": "A0qKcB2bSvdr",
                                        "kind": "oneofitem",
                                        "condition": "this.type1 == 3",
                                        "items": [
                                            {
                                                "id": "nTOn9W9NHQEv",
                                                "kind": "segment",
                                                "name": "x",
                                                "parser": "float",
                                                "autovalue": 0
                                            },
                                            {
                                                "id": "1LPnMZEST2Fv",
                                                "kind": "segment",
                                                "name": "y",
                                                "parser": "float",
                                                "autovalue": 0
                                            },
                                            {
                                                "id": "Lw-qrY0H3ID7",
                                                "kind": "segment",
                                                "name": "z",
                                                "parser": "double",
                                                "autovalue": 0
                                            }
                                        ]
                                    },
                                    {
                                        "id": "WKca5e5931m7",
                                        "kind": "oneofitem",
                                        "condition": "this.type1 == 0",
                                        "items": [
                                            {
                                                "id": "atYcEM9GWnyT",
                                                "kind": "segment",
                                                "name": "x",
                                                "parser": "double",
                                                "autovalue": 0.001
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "9liVcjLcN_mB",
                                "kind": "segment",
                                "name": "aa"
                            },
                            {
                                "id": "vk_KFvUYjBbl",
                                "kind": "oneof",
                                "items": [
                                    {
                                        "id": "neV4A8CXRakQ",
                                        "kind": "oneofitem",
                                        "condition": "this.type2 == 1",
                                        "items": [
                                            {
                                                "id": "vVcFqjH1s7h6",
                                                "kind": "segment",
                                                "name": "x1",
                                                "parser": "float",
                                                "autovalue": 2.5
                                            }
                                        ]
                                    },
                                    {
                                        "id": "57n-6pSc0XLM",
                                        "kind": "oneofitem",
                                        "condition": "this.type2 == 2",
                                        "items": [
                                            {
                                                "id": "Mr7w1HLidZ6J",
                                                "kind": "segment",
                                                "name": "x2",
                                                "parser": "float",
                                                "autovalue": 0
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "S-RQwV32vCIp",
                                "kind": "segment",
                                "name": "test",
                                "parser": "float",
                                "autovalue": "(2 * (1 + this.type1)) - 1"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot24",
                {
                    "id": "xRGeu5R2RD13",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "TsSTQYvenwaA",
                                "kind": "segment",
                                "name": "type1",
                                "parser": "uint32"
                            },
                            {
                                "id": "qbmoCMaKxG6-",
                                "kind": "segment",
                                "name": "type2",
                                "parser": "uint8",
                                "autovalue": "((this.type1 * 4) / 2) - 2"
                            },
                            {
                                "id": "xfUfr7Jfq_k_",
                                "kind": "oneof",
                                "items": [
                                    {
                                        "id": "leN8A6XW8hJ5",
                                        "kind": "oneofitem",
                                        "condition": "this.type1 == 2",
                                        "items": [
                                            {
                                                "id": "x7iI8iRD6jI9",
                                                "kind": "segment",
                                                "name": "x",
                                                "parser": "int16",
                                                "autovalue": 3
                                            },
                                            {
                                                "id": "MiMpMWI35dC7",
                                                "kind": "oneof",
                                                "items": [
                                                    {
                                                        "id": "bbFoEcYOXnvb",
                                                        "kind": "oneofitem",
                                                        "condition": "this.x == 3",
                                                        "items": [
                                                            {
                                                                "id": "NFM6Q3f9ulFx",
                                                                "kind": "segment",
                                                                "name": "p",
                                                                "parser": "float",
                                                                "autovalue": 1.6
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "id": "8KSaAw_F02In",
                                                        "kind": "oneofitem",
                                                        "condition": "this.x == 2",
                                                        "items": [
                                                            {
                                                                "id": "ABMpIwSpbuw_",
                                                                "kind": "segment",
                                                                "name": "p",
                                                                "parser": "double",
                                                                "autovalue": 1.06
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "id": "Kh_7_1vX-eoD",
                                                        "kind": "oneofitem",
                                                        "condition": "this.x == 1",
                                                        "items": [
                                                            {
                                                                "id": "fGVnuRLjBjCh",
                                                                "kind": "segment",
                                                                "name": "p",
                                                                "parser": "uint1",
                                                                "autovalue": 1
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "id": "s9yxbacBumBY",
                                        "kind": "oneofitem",
                                        "condition": "this.type1 == 3",
                                        "items": [
                                            {
                                                "id": "yyW86MEGAgpq",
                                                "kind": "segment",
                                                "name": "x",
                                                "parser": "float",
                                                "autovalue": 1.2
                                            },
                                            {
                                                "id": "6ZXbqwHBfR1_",
                                                "kind": "segment",
                                                "name": "y",
                                                "parser": "float",
                                                "autovalue": 1.2
                                            },
                                            {
                                                "id": "E4I8r6Qeq-g_",
                                                "kind": "segment",
                                                "name": "z",
                                                "parser": "double",
                                                "autovalue": 1.2
                                            }
                                        ]
                                    },
                                    {
                                        "id": "7qlSfXNvf8Wt",
                                        "kind": "oneofitem",
                                        "condition": "this.type1 == 0",
                                        "items": [
                                            {
                                                "id": "liJ7P4oKzwIj",
                                                "kind": "segment",
                                                "name": "x",
                                                "parser": "double",
                                                "autovalue": 0
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "F2VR4CfS5JQR",
                                "kind": "segment",
                                "name": "aa"
                            },
                            {
                                "id": "vBDKEhDF_I4z",
                                "kind": "oneof",
                                "items": [
                                    {
                                        "id": "X3-Z7sfvXXy5",
                                        "kind": "oneofitem",
                                        "condition": "this.type2 == 1",
                                        "items": [
                                            {
                                                "id": "w6aQ68kaN1yl",
                                                "kind": "segment",
                                                "name": "x1",
                                                "parser": "float",
                                                "autovalue": 2.23
                                            }
                                        ]
                                    },
                                    {
                                        "id": "yK9ulC16vPCC",
                                        "kind": "oneofitem",
                                        "condition": "this.type2 == 2",
                                        "items": [
                                            {
                                                "id": "ApWzszhuUIHs",
                                                "kind": "segment",
                                                "name": "x2",
                                                "parser": "float"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "uAAUkqwgERbB",
                                "kind": "segment",
                                "name": "test",
                                "parser": "float",
                                "autovalue": "(3 * (1 + this.type1)) + 1"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot25",
                {
                    "id": "qUxiM9QEgs3g",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "CD0mJOW-ByLP",
                                "kind": "segment",
                                "name": "type1",
                                "parser": "uint32"
                            },
                            {
                                "id": "YX1CvtNEvgN6",
                                "kind": "segment",
                                "name": "type2",
                                "parser": "uint8",
                                "autovalue": "((this.type1 * 4) / 2) - 2"
                            },
                            {
                                "id": "kjKIVR0ZQkTI",
                                "kind": "oneof",
                                "items": [
                                    {
                                        "id": "EgYsCls0Wxwg",
                                        "kind": "oneofitem",
                                        "condition": "this.type1 == 3",
                                        "items": [
                                            {
                                                "id": "PjwaQZlA9lJV",
                                                "kind": "segment",
                                                "name": "x",
                                                "parser": "int16",
                                                "autovalue": 2
                                            },
                                            {
                                                "id": "YzRkybVf-nCt",
                                                "kind": "oneof",
                                                "items": [
                                                    {
                                                        "id": "sujmwCxnOD6N",
                                                        "kind": "oneofitem",
                                                        "condition": "this.x == 3",
                                                        "items": [
                                                            {
                                                                "id": "vanY75WY4ZzG",
                                                                "kind": "segment",
                                                                "name": "p",
                                                                "parser": "int32",
                                                                "autovalue": -6
                                                            },
                                                            {
                                                                "id": "cnvwubosq6YD",
                                                                "kind": "oneof",
                                                                "items": [
                                                                    {
                                                                        "id": "gcvYx2clkCGQ",
                                                                        "kind": "oneofitem",
                                                                        "condition": "this.p == -6",
                                                                        "items": [
                                                                            {
                                                                                "id": "-rQRADeUF9AT",
                                                                                "kind": "segment",
                                                                                "name": "p1",
                                                                                "parser": "int32",
                                                                                "autovalue": "((this.p * 2) - 4) + 1"
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "id": "67xVxFEeckIf",
                                                        "kind": "oneofitem",
                                                        "condition": "this.x == 2",
                                                        "items": [
                                                            {
                                                                "id": "DGSOFZ7mgKcX",
                                                                "kind": "segment",
                                                                "name": "p",
                                                                "parser": "int8",
                                                                "autovalue": -6
                                                            },
                                                            {
                                                                "id": "Zujsqu3gy5HX",
                                                                "kind": "oneof",
                                                                "items": [
                                                                    {
                                                                        "id": "TehIrpJI1sqE",
                                                                        "kind": "oneofitem",
                                                                        "condition": "this.p == -6",
                                                                        "items": [
                                                                            {
                                                                                "id": "SMwr_k3FO5KY",
                                                                                "kind": "segment",
                                                                                "name": "p1",
                                                                                "parser": "int32",
                                                                                "autovalue": "((this.p * 2) - 4) + 1"
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "id": "-oXs3mqXZH9l",
                                                        "kind": "oneofitem",
                                                        "condition": "this.x == 1",
                                                        "items": [
                                                            {
                                                                "id": "DOaYNIZXgxot",
                                                                "kind": "segment",
                                                                "name": "p",
                                                                "parser": "uint1",
                                                                "autovalue": 1
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "id": "KIpDlIsIeG1y",
                                        "kind": "oneofitem",
                                        "condition": "this.type1 == 0",
                                        "items": [
                                            {
                                                "id": "qrmpwVgS0TnE",
                                                "kind": "segment",
                                                "name": "x",
                                                "parser": "float",
                                                "autovalue": 1.2
                                            },
                                            {
                                                "id": "JI60hNUgXhwz",
                                                "kind": "segment",
                                                "name": "y",
                                                "parser": "float",
                                                "autovalue": 1.2
                                            },
                                            {
                                                "id": "wLkQLPDd4VTI",
                                                "kind": "segment",
                                                "name": "z",
                                                "parser": "double",
                                                "autovalue": 1.2
                                            }
                                        ]
                                    },
                                    {
                                        "id": "rVmaR1KfkZnR",
                                        "kind": "oneofitem",
                                        "condition": "this.type1 == 2",
                                        "items": [
                                            {
                                                "id": "Ul-t8DyrCFoh",
                                                "kind": "segment",
                                                "name": "x",
                                                "parser": "double",
                                                "autovalue": 0
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "nRKTquezj0B8",
                                "kind": "segment",
                                "name": "aa"
                            },
                            {
                                "id": "HysFweAfydjw",
                                "kind": "oneof",
                                "items": [
                                    {
                                        "id": "H815W3tCSqbI",
                                        "kind": "oneofitem",
                                        "condition": "this.type2 == 1",
                                        "items": [
                                            {
                                                "id": "E5iDZzDes4CU",
                                                "kind": "segment",
                                                "name": "x1",
                                                "parser": "uint32",
                                                "autovalue": 15
                                            },
                                            {
                                                "id": "GlOTwaGnO3mk",
                                                "kind": "oneof",
                                                "items": [
                                                    {
                                                        "id": "8bHW_CWkOqIU",
                                                        "kind": "oneofitem",
                                                        "condition": "this.x1 == 15",
                                                        "items": [
                                                            {
                                                                "id": "YNlfZclwzxA5",
                                                                "kind": "segment",
                                                                "name": "x11",
                                                                "parser": "uint32",
                                                                "autovalue": 2
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "id": "hgIapNqs0mw5",
                                        "kind": "oneofitem",
                                        "condition": "this.type2 == 2",
                                        "items": [
                                            {
                                                "id": "lhE9d-Fx0D1d",
                                                "kind": "segment",
                                                "name": "x2",
                                                "parser": "float"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "md8B57PnEfjz",
                                "kind": "segment",
                                "name": "test",
                                "parser": "float",
                                "autovalue": "(3 * (1 + this.type1)) + 1"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot26",
                {
                    "id": "IRYtTVJpim6I",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "VG65zwo81F_f",
                                "kind": "segment",
                                "name": "type1",
                                "parser": "uint32"
                            },
                            {
                                "id": "XaYywoPdNXW6",
                                "kind": "segment",
                                "name": "type2",
                                "parser": "uint8",
                                "autovalue": "((this.type1 * 4) / 2) - 2"
                            },
                            {
                                "id": "DmjCeXHqHJsO",
                                "kind": "oneof",
                                "items": [
                                    {
                                        "id": "yFojQ-X1SOP0",
                                        "kind": "oneofitem",
                                        "condition": "this.type1 == 3",
                                        "items": [
                                            {
                                                "id": "4ALbJSQXZtfV",
                                                "kind": "segment",
                                                "name": "x",
                                                "parser": "int16",
                                                "autovalue": 2
                                            },
                                            {
                                                "id": "63r6XREcfnDx",
                                                "kind": "oneof",
                                                "items": [
                                                    {
                                                        "id": "GWW98lGagvdk",
                                                        "kind": "oneofitem",
                                                        "condition": "this.x == 3",
                                                        "items": [
                                                            {
                                                                "id": "jhfO-Qs2W_Y8",
                                                                "kind": "segment",
                                                                "name": "p",
                                                                "parser": "int32",
                                                                "autovalue": -6
                                                            },
                                                            {
                                                                "id": "WSivJR4LBZS8",
                                                                "kind": "oneof",
                                                                "items": [
                                                                    {
                                                                        "id": "6VO4rKwXR_kz",
                                                                        "kind": "oneofitem",
                                                                        "condition": "this.p == -6",
                                                                        "items": [
                                                                            {
                                                                                "id": "2ueH20pOLL-_",
                                                                                "kind": "segment",
                                                                                "name": "p1",
                                                                                "parser": "int32",
                                                                                "autovalue": "((this.p * 2) - 4) + 1"
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "id": "oOhPMxbLtGal",
                                                        "kind": "oneofitem",
                                                        "condition": "this.x == 2",
                                                        "items": [
                                                            {
                                                                "id": "HyLH_T8QoZG0",
                                                                "kind": "segment",
                                                                "name": "p",
                                                                "parser": "int8",
                                                                "autovalue": -6
                                                            },
                                                            {
                                                                "id": "9Ep31ii-rgzX",
                                                                "kind": "oneof",
                                                                "items": [
                                                                    {
                                                                        "id": "EhEYHYxZo7ta",
                                                                        "kind": "oneofitem",
                                                                        "condition": "this.p == -6",
                                                                        "items": [
                                                                            {
                                                                                "id": "XTpYxLb9SXF9",
                                                                                "kind": "segment",
                                                                                "name": "p1",
                                                                                "parser": "int32",
                                                                                "autovalue": "((this.p * 2) - 4) + 1"
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "id": "XOk4jySLF_PA",
                                                        "kind": "oneofitem",
                                                        "condition": "this.x == 1",
                                                        "items": [
                                                            {
                                                                "id": "LJWrh8l1Sx8b",
                                                                "kind": "segment",
                                                                "name": "p",
                                                                "parser": "uint1",
                                                                "autovalue": 1
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "id": "CTIrxyxG6BGz",
                                        "kind": "oneofitem",
                                        "condition": "this.type1 == 0",
                                        "items": [
                                            {
                                                "id": "bL1Gly3nrxow",
                                                "kind": "segment",
                                                "name": "x",
                                                "parser": "float",
                                                "autovalue": 1.2
                                            },
                                            {
                                                "id": "6ygFbtkKw1ry",
                                                "kind": "segment",
                                                "name": "y",
                                                "parser": "float",
                                                "autovalue": 1.2
                                            },
                                            {
                                                "id": "wT8DMZ2jrPSO",
                                                "kind": "segment",
                                                "name": "z",
                                                "parser": "double",
                                                "autovalue": 1.2
                                            }
                                        ]
                                    },
                                    {
                                        "id": "7lojs9ViHfvH",
                                        "kind": "oneofitem",
                                        "condition": "this.type1 == 2",
                                        "items": [
                                            {
                                                "id": "juVNdasxCOst",
                                                "kind": "segment",
                                                "name": "x",
                                                "parser": "double",
                                                "autovalue": 0
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "qyzMaz4Bmdmf",
                                "kind": "segment",
                                "name": "aa"
                            },
                            {
                                "id": "n6fWyDJ3w0sW",
                                "kind": "oneof",
                                "items": [
                                    {
                                        "id": "Hzbmv--oJIwF",
                                        "kind": "oneofitem",
                                        "condition": "this.type2 == 1",
                                        "items": [
                                            {
                                                "id": "cFP7fwialz93",
                                                "kind": "segment",
                                                "name": "x1",
                                                "parser": "uint32",
                                                "autovalue": 15
                                            },
                                            {
                                                "id": "xRqO-44T1O56",
                                                "kind": "oneof",
                                                "items": [
                                                    {
                                                        "id": "cynxZK3AfC5R",
                                                        "kind": "oneofitem",
                                                        "condition": "this.x1 == 15",
                                                        "items": [
                                                            {
                                                                "id": "zSfRVYR5pvRe",
                                                                "kind": "segment",
                                                                "name": "x11",
                                                                "parser": "uint32",
                                                                "autovalue": 65535
                                                            },
                                                            {
                                                                "id": "Ych84vPH4e_P",
                                                                "kind": "segment",
                                                                "name": "p2",
                                                                "parser": "string",
                                                                "autovalue": "'qwe\\0'"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "id": "b_m7Ms6hvp2t",
                                        "kind": "oneofitem",
                                        "condition": "this.type2 == 2",
                                        "items": [
                                            {
                                                "id": "a3TmFJliY4U4",
                                                "kind": "segment",
                                                "name": "x2",
                                                "parser": "float"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "OPkDvA7oKYFD",
                                "kind": "segment",
                                "name": "test",
                                "parser": "float",
                                "autovalue": "(3 * (1 + this.type1)) + 1"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "oneof_prot",
                {
                    "id": "JA_4Pv0Wdp1e",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "J-Fyz8ndtr8y",
                                "kind": "segment",
                                "name": "xx",
                                "parser": "uint8",
                                "autovalue": 8
                            },
                            {
                                "id": "sGSITXt-9F3K",
                                "kind": "segment",
                                "name": "aa",
                                "parser": "uint8",
                                "autovalue": 0
                            },
                            {
                                "id": "gchXaAog4JNP",
                                "kind": "oneof",
                                "items": [
                                    {
                                        "id": "kOO0QOjTVW4U",
                                        "kind": "oneofitem",
                                        "condition": "(this.xx + 1) == 3",
                                        "items": [
                                            {
                                                "id": "vHSYf-j1-ZU0",
                                                "kind": "segments",
                                                "name": "oneof_name",
                                                "items": [
                                                    {
                                                        "id": "K8R16sOpiYMG",
                                                        "kind": "segment",
                                                        "name": "name",
                                                        "parser": "int16",
                                                        "autovalue": 3
                                                    },
                                                    {
                                                        "id": "3y2U0khd4TWj",
                                                        "kind": "segment",
                                                        "name": "str",
                                                        "parser": "string",
                                                        "length": 3,
                                                        "autovalue": "'123'"
                                                    },
                                                    {
                                                        "id": "cdOsWLmypUz4",
                                                        "kind": "oneof",
                                                        "items": [
                                                            {
                                                                "id": "bur4PLFRtswL",
                                                                "kind": "oneofitem",
                                                                "condition": "this.oneof_name.name == 3",
                                                                "items": [
                                                                    {
                                                                        "id": "6Exckx447qNw",
                                                                        "kind": "segment",
                                                                        "name": "seg_float",
                                                                        "parser": "float",
                                                                        "autovalue": 1.11
                                                                    },
                                                                    {
                                                                        "id": "ey_j7WmLHQAK",
                                                                        "kind": "segment",
                                                                        "name": "double",
                                                                        "parser": "double",
                                                                        "autovalue": "ByteSize(this.oneof_name.seg_float)"
                                                                    },
                                                                    {
                                                                        "id": "pQRcJWY9_xiV",
                                                                        "kind": "segment",
                                                                        "name": "list",
                                                                        "arrlen": 2,
                                                                        "parser": "int32",
                                                                        "autovalue": "[25,26]"
                                                                    },
                                                                    {
                                                                        "id": "NSxC7_-FJfuf",
                                                                        "kind": "oneof",
                                                                        "items": [
                                                                            {
                                                                                "id": "F0zZVZNdFjIz",
                                                                                "kind": "oneofitem",
                                                                                "condition": "this.oneof_name.seg_float > 1.1",
                                                                                "items": [
                                                                                    {
                                                                                        "id": "3w-2t90jkJkD",
                                                                                        "kind": "segments",
                                                                                        "name": "test",
                                                                                        "items": [
                                                                                            {
                                                                                                "id": "Gum5J0jXnmN-",
                                                                                                "kind": "segment",
                                                                                                "name": "qq",
                                                                                                "parser": "int24",
                                                                                                "autovalue": 0
                                                                                            },
                                                                                            {
                                                                                                "id": "dIGAGqxQ6SVp",
                                                                                                "kind": "segments",
                                                                                                "name": "qs",
                                                                                                "items": [
                                                                                                    {
                                                                                                        "id": "fVCV9dlSZDWA",
                                                                                                        "kind": "segment",
                                                                                                        "name": "ww",
                                                                                                        "parser": "uint24",
                                                                                                        "autovalue": 2
                                                                                                    },
                                                                                                    {
                                                                                                        "id": "DDjgYNIhbq9W",
                                                                                                        "kind": "segment",
                                                                                                        "name": "ee",
                                                                                                        "parser": "uint40",
                                                                                                        "autovalue": 0
                                                                                                    },
                                                                                                    {
                                                                                                        "id": "kUbBCv88P_7m",
                                                                                                        "kind": "oneof",
                                                                                                        "items": [
                                                                                                            {
                                                                                                                "id": "UP6A5vTpxYNr",
                                                                                                                "kind": "oneofitem",
                                                                                                                "condition": "this.oneof_name.test.qs.ww == 24",
                                                                                                                "items": [
                                                                                                                    {
                                                                                                                        "id": "ZCZio1PJ85MH",
                                                                                                                        "kind": "segment",
                                                                                                                        "name": "tt",
                                                                                                                        "arrlen": 2,
                                                                                                                        "parser": "string",
                                                                                                                        "endwith": "'12'",
                                                                                                                        "autovalue": "[\"qw\",\"er\"]"
                                                                                                                    }
                                                                                                                ]
                                                                                                            },
                                                                                                            {
                                                                                                                "id": "CXu5KUlKPb6w",
                                                                                                                "kind": "oneofitem",
                                                                                                                "condition": "this.oneof_name.test.qs.ww ~= 24",
                                                                                                                "items": [
                                                                                                                    {
                                                                                                                        "id": "3Cm8RbU_gvec",
                                                                                                                        "kind": "segment",
                                                                                                                        "name": "string",
                                                                                                                        "parser": "string",
                                                                                                                        "endwith": "'@@'",
                                                                                                                        "autovalue": "'123'"
                                                                                                                    }
                                                                                                                ]
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "one_prot",
                {
                    "id": "_ikJHEGhoEw4",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "TZABPYuPNnLc",
                                "kind": "segment",
                                "name": "str",
                                "parser": "string",
                                "endwith": "'#'",
                                "autovalue": "'3'"
                            },
                            {
                                "id": "GJ41q-vHVUBn",
                                "kind": "segment",
                                "name": "int",
                                "parser": "uint64",
                                "autovalue": 0
                            },
                            {
                                "id": "4EERWCvwNaMH",
                                "kind": "oneof",
                                "items": [
                                    {
                                        "id": "AgduBT2xkjTl",
                                        "kind": "oneofitem",
                                        "condition": "this.str == '123'",
                                        "items": [
                                            {
                                                "id": "NS1Ii1cmWzuK",
                                                "kind": "segment",
                                                "name": "name",
                                                "parser": "int32",
                                                "autovalue": 0
                                            },
                                            {
                                                "id": "d8nZ4wrgwVc_",
                                                "kind": "segment",
                                                "name": "float",
                                                "parser": "float",
                                                "autovalue": 0
                                            }
                                        ]
                                    }
                                ]
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot_15",
                {
                    "id": "Kiz7zavslguH",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "sWJ9WQTue2cu",
                                "kind": "segment",
                                "name": "seg_1",
                                "parser": "float ! >",
                                "autovalue": 0
                            },
                            {
                                "id": "HkbJ_QrmzH8e",
                                "kind": "segment",
                                "name": "seg_2",
                                "parser": "double ! >",
                                "autovalue": 0
                            },
                            {
                                "id": "Bf6IbYVQWtqT",
                                "kind": "segment",
                                "name": "seg_3",
                                "parser": "int32 ! >",
                                "autovalue": 0
                            },
                            {
                                "id": "_aZa7qoErdhi",
                                "kind": "segment",
                                "name": "seg_4",
                                "parser": "uint32 ! >",
                                "autovalue": 0
                            },
                            {
                                "id": "bKOFuPN0y4v5",
                                "kind": "segment",
                                "name": "seg_5",
                                "parser": "float & >",
                                "autovalue": 0
                            },
                            {
                                "id": "TQw3Aw1rMAVm",
                                "kind": "segment",
                                "name": "seg_6",
                                "parser": "double & >",
                                "autovalue": 0
                            },
                            {
                                "id": "80do14b8vKpc",
                                "kind": "segment",
                                "name": "seg_7",
                                "parser": "int32 & >",
                                "autovalue": 0
                            },
                            {
                                "id": "S7mS00uftukj",
                                "kind": "segment",
                                "name": "seg_8",
                                "parser": "uint32 & >",
                                "autovalue": 0
                            },
                            {
                                "id": "sW0pOhxZwqaA",
                                "kind": "segment",
                                "name": "seg_9",
                                "parser": "float ! <",
                                "autovalue": 0
                            },
                            {
                                "id": "e5aXNBf6ucLN",
                                "kind": "segment",
                                "name": "seg_10",
                                "parser": "double ! <",
                                "autovalue": 0
                            },
                            {
                                "id": "gTzxl-N1--du",
                                "kind": "segment",
                                "name": "seg_11",
                                "parser": "int32 ! <",
                                "autovalue": 0
                            },
                            {
                                "id": "yHchQ6gyoRMd",
                                "kind": "segment",
                                "name": "seg_12",
                                "parser": "uint32 ! <",
                                "autovalue": 0
                            },
                            {
                                "id": "bmzKJmHgWEfY",
                                "kind": "segment",
                                "name": "seg_13",
                                "parser": "float & <",
                                "autovalue": 0
                            },
                            {
                                "id": "r1QJGDLOppmd",
                                "kind": "segment",
                                "name": "seg_14",
                                "parser": "double & <",
                                "autovalue": 0
                            },
                            {
                                "id": "hnYMDh83Lzuh",
                                "kind": "segment",
                                "name": "seg_15",
                                "parser": "int32 & <",
                                "autovalue": 0
                            },
                            {
                                "id": "SAlj_lud1b3_",
                                "kind": "segment",
                                "name": "seg_16",
                                "parser": "uint32 & <",
                                "autovalue": 0
                            },
                            {
                                "id": "AN7_ge00YDWL",
                                "kind": "segment",
                                "name": "seg_17",
                                "parser": "int16 & <",
                                "autovalue": 0
                            },
                            {
                                "id": "GtfIwPYN-dfI",
                                "kind": "segment",
                                "name": "seg_18",
                                "parser": "uint16 ! <",
                                "autovalue": 0
                            },
                            {
                                "id": "VB4vn5zMIXYE",
                                "kind": "segment",
                                "name": "seg_19",
                                "parser": "int8 & >",
                                "autovalue": 0
                            },
                            {
                                "id": "i0rzTXziSUzn",
                                "kind": "segment",
                                "name": "seg_20",
                                "parser": "uint8 ! >",
                                "autovalue": 0
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot_primitive",
                {
                    "id": "5con5wdu2-XG",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "vmPlog8x5WSY",
                                "kind": "segment",
                                "name": "seg1",
                                "parser": "float ! >",
                                "autovalue": 0
                            },
                            {
                                "id": "bPJHjt5bX7hd",
                                "kind": "segment",
                                "name": "seg2",
                                "parser": "double & <",
                                "autovalue": 0
                            },
                            {
                                "id": "PZZuoSgPTWo2",
                                "kind": "segment",
                                "name": "seg3",
                                "parser": "int16 & >",
                                "autovalue": 0
                            },
                            {
                                "id": "6beo74pgE90e",
                                "kind": "segment",
                                "name": "seg4",
                                "parser": "int16 ! <",
                                "autovalue": 0
                            },
                            {
                                "id": "9fGv3JPOdM_I",
                                "kind": "segment",
                                "name": "seg5",
                                "parser": "int16 = >",
                                "autovalue": 0
                            },
                            {
                                "id": "RDT4FhpvOdKG",
                                "kind": "segment",
                                "name": "seg6",
                                "parser": "int16",
                                "autovalue": 0
                            },
                            {
                                "id": "PHjrTP35F5Uy",
                                "kind": "segment",
                                "name": "seg7",
                                "parser": "int16 & <",
                                "autovalue": 0
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot_option",
                {
                    "id": "6a_6bMmSc-mw",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "pp4obce9k9uD",
                                "kind": "segment",
                                "name": "seg_1",
                                "parser": "uint8",
                                "autovalue": 0,
                                "option": {
                                    "max": 10,
                                    "min": 100
                                }
                            },
                            {
                                "id": "0-0obMfFXJQG",
                                "kind": "segment",
                                "name": "seg_2",
                                "parser": "uint8",
                                "autovalue": 0,
                                "option": {
                                    "max": 10,
                                    "min": 100
                                }
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "send_1",
                {
                    "id": "o-W6dIzCoTt8",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "6FebHMuSaJAS",
                                "kind": "segment",
                                "name": "seg1",
                                "parser": "int8"
                            },
                            {
                                "id": "gM__tfscSwWz",
                                "kind": "segment",
                                "name": "seg2",
                                "arrlen": "this.seg1",
                                "parser": "int8"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot16",
                {
                    "id": "5b7Fmsm1PRyZ",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "BkcsM5gltr2h",
                                "kind": "segment",
                                "name": "seg_1",
                                "parser": "uint8",
                                "autovalue": 0
                            },
                            {
                                "id": "WDLC7jsGdq0V",
                                "kind": "segment",
                                "name": "seg_2",
                                "parser": "string",
                                "length": 4
                            },
                            {
                                "id": "sNWuBWTiBtyH",
                                "kind": "segment",
                                "name": "seg_3",
                                "parser": "string",
                                "endwith": "'$'"
                            },
                            {
                                "id": "tJk6pRDskoy9",
                                "kind": "segment",
                                "name": "seg_4",
                                "parser": "string"
                            },
                            {
                                "id": "HyY2xr2ZDfup",
                                "kind": "segment",
                                "name": "seg_5",
                                "parser": "string",
                                "length": 3
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot17",
                {
                    "id": "CVag_-VAcKHI",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "fPeg_SAiWVbu",
                                "kind": "segment",
                                "name": "seg_1",
                                "parser": "string",
                                "length": "2 + 2"
                            },
                            {
                                "id": "GKvMT16a4OlW",
                                "kind": "segment",
                                "name": "seg_2",
                                "parser": "string",
                                "length": "6 - 2"
                            },
                            {
                                "id": "NWHFVfKY1ICH",
                                "kind": "segment",
                                "name": "seg_3",
                                "parser": "string",
                                "length": "2 * 2"
                            },
                            {
                                "id": "6XVEt3guPqDY",
                                "kind": "segment",
                                "name": "seg_4",
                                "parser": "string",
                                "length": "8 / 2"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot18",
                {
                    "id": "slAbteUoAREl",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "5QUGmAJN7Tbb",
                                "kind": "segment",
                                "name": "seg_1",
                                "parser": "string"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "string_",
                {
                    "id": "eE4eZXGd47f9",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "A48z_n71ny8X",
                                "kind": "segments",
                                "name": "test",
                                "items": [
                                    {
                                        "id": "JaG60b1CBHfS",
                                        "kind": "segment",
                                        "name": "int",
                                        "parser": "int32",
                                        "autovalue": "2 - 1"
                                    },
                                    {
                                        "id": "hDoJj9jOgkK6",
                                        "kind": "segment",
                                        "name": "str",
                                        "parser": "string",
                                        "endwith": "'#'"
                                    },
                                    {
                                        "id": "xC6xeXLJesNz",
                                        "kind": "segment",
                                        "name": "str1",
                                        "parser": "string",
                                        "endwith": "'\\0'",
                                        "autovalue": "'12'"
                                    }
                                ]
                            },
                            {
                                "id": "dgQpCL-_dQ3h",
                                "kind": "segment",
                                "name": "te",
                                "parser": "string",
                                "length": 2,
                                "autovalue": "'23'"
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ],
            [
                "prot_12",
                {
                    "id": "k3_EuYrnOQ4_",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "protocol",
                    "content": {
                        "items": [
                            {
                                "id": "CQso5ti7DTq1",
                                "kind": "segment",
                                "name": "seg_1",
                                "parser": "uint1",
                                "autovalue": 0
                            },
                            {
                                "id": "iLrHs8iv_sSa",
                                "kind": "segment",
                                "name": "seg_2",
                                "parser": "uint2",
                                "autovalue": 0
                            },
                            {
                                "id": "cFWxBo43LroX",
                                "kind": "segment",
                                "name": "seg_3",
                                "parser": "uint3",
                                "autovalue": 0
                            },
                            {
                                "id": "wmZIA_5EWgle",
                                "kind": "segment",
                                "name": "seg_4",
                                "parser": "uint4",
                                "autovalue": 0
                            },
                            {
                                "id": "f0I4iLMiLXHi",
                                "kind": "segment",
                                "name": "seg_5",
                                "parser": "uint5",
                                "autovalue": 0
                            },
                            {
                                "id": "FXqkzHue8Hcd",
                                "kind": "segment",
                                "name": "seg_6",
                                "parser": "uint6",
                                "autovalue": 0
                            },
                            {
                                "id": "Fxn7YNioyCmh",
                                "kind": "segment",
                                "name": "seg_7",
                                "parser": "uint7",
                                "autovalue": 0
                            },
                            {
                                "id": "CTg-qjkEcZko",
                                "kind": "segment",
                                "name": "seg_8",
                                "parser": "uint8",
                                "autovalue": 0
                            },
                            {
                                "id": "c7pBulwfng1D",
                                "kind": "segment",
                                "name": "seg_9",
                                "parser": "uint9",
                                "autovalue": 0
                            },
                            {
                                "id": "GHvtsH_nfkrk",
                                "kind": "segment",
                                "name": "seg_10",
                                "parser": "uint10",
                                "autovalue": 0
                            },
                            {
                                "id": "3nbGgws5s6iC",
                                "kind": "segment",
                                "name": "seg_11",
                                "parser": "uint11",
                                "autovalue": 0
                            },
                            {
                                "id": "V_2hWzyHpZCw",
                                "kind": "segment",
                                "name": "seg_12",
                                "parser": "uint12",
                                "autovalue": 0
                            },
                            {
                                "id": "8ZQaBC2iq38Y",
                                "kind": "segment",
                                "name": "seg_13",
                                "parser": "uint13",
                                "autovalue": 0
                            },
                            {
                                "id": "eqmJxINXOpH5",
                                "kind": "segment",
                                "name": "seg_14",
                                "parser": "uint14",
                                "autovalue": 0
                            },
                            {
                                "id": "I9ceAH8obe0d",
                                "kind": "segment",
                                "name": "seg_15",
                                "parser": "uint15",
                                "autovalue": 0
                            },
                            {
                                "id": "NQfsGM7MYByy",
                                "kind": "segment",
                                "name": "seg_16",
                                "parser": "uint16",
                                "autovalue": 0
                            },
                            {
                                "id": "m9ERMlr1t2Ch",
                                "kind": "segment",
                                "name": "seg_17",
                                "parser": "uint17",
                                "autovalue": 0
                            },
                            {
                                "id": "J009ITXym4W1",
                                "kind": "segment",
                                "name": "seg_18",
                                "parser": "uint18",
                                "autovalue": 0
                            },
                            {
                                "id": "dRpNchJXzkO0",
                                "kind": "segment",
                                "name": "seg_19",
                                "parser": "uint19",
                                "autovalue": 0
                            },
                            {
                                "id": "i7HwS5b831PJ",
                                "kind": "segment",
                                "name": "seg_20",
                                "parser": "uint20",
                                "autovalue": 0
                            },
                            {
                                "id": "paWqBkW2T2_9",
                                "kind": "segment",
                                "name": "seg_21",
                                "parser": "uint21",
                                "autovalue": 0
                            },
                            {
                                "id": "UkAk2VV_kaMJ",
                                "kind": "segment",
                                "name": "seg_22",
                                "parser": "uint22",
                                "autovalue": 0
                            },
                            {
                                "id": "A19NneQLG0pD",
                                "kind": "segment",
                                "name": "seg_23",
                                "parser": "uint23",
                                "autovalue": 0
                            },
                            {
                                "id": "iLqG1ItehEU-",
                                "kind": "segment",
                                "name": "seg_24",
                                "parser": "uint24",
                                "autovalue": 0
                            },
                            {
                                "id": "2Ybe2sYT4naB",
                                "kind": "segment",
                                "name": "seg_25",
                                "parser": "uint25",
                                "autovalue": 0
                            },
                            {
                                "id": "KqCLKHdAaDPo",
                                "kind": "segment",
                                "name": "seg_26",
                                "parser": "uint26",
                                "autovalue": 0
                            },
                            {
                                "id": "ZD4bR3oEbXIV",
                                "kind": "segment",
                                "name": "seg_27",
                                "parser": "uint27",
                                "autovalue": 0
                            },
                            {
                                "id": "Y3ACKVBTj_sd",
                                "kind": "segment",
                                "name": "seg_28",
                                "parser": "uint28",
                                "autovalue": 0
                            },
                            {
                                "id": "640FC-eBIv3f",
                                "kind": "segment",
                                "name": "seg_29",
                                "parser": "uint29",
                                "autovalue": 0
                            },
                            {
                                "id": "AFw2sDC_y8WV",
                                "kind": "segment",
                                "name": "seg_30",
                                "parser": "uint30",
                                "autovalue": 0
                            },
                            {
                                "id": "WV1vEf-VtKpv",
                                "kind": "segment",
                                "name": "seg_31",
                                "parser": "uint31",
                                "autovalue": 0
                            },
                            {
                                "id": "LKn0dGyQqsVS",
                                "kind": "segment",
                                "name": "seg_32",
                                "parser": "uint32",
                                "autovalue": 0
                            },
                            {
                                "id": "5XNWIOxbqQyz",
                                "kind": "segment",
                                "name": "seg_33",
                                "parser": "uint33",
                                "autovalue": 0
                            },
                            {
                                "id": "I28I1lhsic-z",
                                "kind": "segment",
                                "name": "seg_34",
                                "parser": "uint34",
                                "autovalue": 0
                            },
                            {
                                "id": "7uc4VfNQWEea",
                                "kind": "segment",
                                "name": "seg_35",
                                "parser": "uint35",
                                "autovalue": 0
                            },
                            {
                                "id": "9tXnxQWBp-Ak",
                                "kind": "segment",
                                "name": "seg_36",
                                "parser": "uint36",
                                "autovalue": 0
                            },
                            {
                                "id": "5zuciA4IYbcp",
                                "kind": "segment",
                                "name": "seg_37",
                                "parser": "uint37",
                                "autovalue": 0
                            },
                            {
                                "id": "7q1IfsaHtiGh",
                                "kind": "segment",
                                "name": "seg_38",
                                "parser": "uint38",
                                "autovalue": 0
                            },
                            {
                                "id": "lsYnKpRCpgBS",
                                "kind": "segment",
                                "name": "seg_39",
                                "parser": "uint39",
                                "autovalue": 0
                            },
                            {
                                "id": "DKfVUvVCXM6W",
                                "kind": "segment",
                                "name": "seg_40",
                                "parser": "uint40",
                                "autovalue": 0
                            },
                            {
                                "id": "D3ygsfhw3F-W",
                                "kind": "segment",
                                "name": "seg_41",
                                "parser": "uint41",
                                "autovalue": 0
                            },
                            {
                                "id": "s-FiWQtHIgoI",
                                "kind": "segment",
                                "name": "seg_42",
                                "parser": "uint42",
                                "autovalue": 0
                            },
                            {
                                "id": "L-lte7pmJLKc",
                                "kind": "segment",
                                "name": "seg_43",
                                "parser": "uint43",
                                "autovalue": 0
                            },
                            {
                                "id": "KHmfLOQxR2zg",
                                "kind": "segment",
                                "name": "seg_44",
                                "parser": "uint44",
                                "autovalue": 0
                            },
                            {
                                "id": "T1kRa7UJxoGq",
                                "kind": "segment",
                                "name": "seg_45",
                                "parser": "uint45",
                                "autovalue": 0
                            },
                            {
                                "id": "39QZRNI7Y2lE",
                                "kind": "segment",
                                "name": "seg_46",
                                "parser": "uint46",
                                "autovalue": 0
                            },
                            {
                                "id": "xGWpLlifB-s8",
                                "kind": "segment",
                                "name": "seg_47",
                                "parser": "uint47",
                                "autovalue": 0
                            },
                            {
                                "id": "thxijZewuW8e",
                                "kind": "segment",
                                "name": "seg_48",
                                "parser": "uint48",
                                "autovalue": 0
                            },
                            {
                                "id": "Tf2CwZhPOeqr",
                                "kind": "segment",
                                "name": "seg_49",
                                "parser": "uint49",
                                "autovalue": 0
                            },
                            {
                                "id": "wdykVNYGIfZ0",
                                "kind": "segment",
                                "name": "seg_50",
                                "parser": "uint50",
                                "autovalue": 0
                            },
                            {
                                "id": "cna_gQLAkPq7",
                                "kind": "segment",
                                "name": "seg_51",
                                "parser": "uint51",
                                "autovalue": 0
                            },
                            {
                                "id": "X0BO6PPMQWdc",
                                "kind": "segment",
                                "name": "seg_52",
                                "parser": "uint52",
                                "autovalue": 0
                            },
                            {
                                "id": "D0tkWJKbBXPR",
                                "kind": "segment",
                                "name": "seg_53",
                                "parser": "uint53",
                                "autovalue": 0
                            },
                            {
                                "id": "NSmnZS52pbrt",
                                "kind": "segment",
                                "name": "seg_54",
                                "parser": "uint54",
                                "autovalue": 0
                            },
                            {
                                "id": "P4RHrldecMpV",
                                "kind": "segment",
                                "name": "seg_55",
                                "parser": "uint55",
                                "autovalue": 0
                            },
                            {
                                "id": "ysQOJLv1LRUU",
                                "kind": "segment",
                                "name": "seg_56",
                                "parser": "uint56",
                                "autovalue": 0
                            },
                            {
                                "id": "PtLMRodEwsOZ",
                                "kind": "segment",
                                "name": "seg_57",
                                "parser": "uint57",
                                "autovalue": 0
                            },
                            {
                                "id": "Z_f3FcEL9Sxt",
                                "kind": "segment",
                                "name": "seg_58",
                                "parser": "uint58",
                                "autovalue": 0
                            },
                            {
                                "id": "GpWUfD_y0GYL",
                                "kind": "segment",
                                "name": "seg_59",
                                "parser": "uint59",
                                "autovalue": 0
                            },
                            {
                                "id": "DDx9RXyOOFmP",
                                "kind": "segment",
                                "name": "seg_60",
                                "parser": "uint60",
                                "autovalue": 0
                            },
                            {
                                "id": "zUhUheXwE3dl",
                                "kind": "segment",
                                "name": "seg_61",
                                "parser": "uint61",
                                "autovalue": 0
                            },
                            {
                                "id": "qFPW3FI4gOAZ",
                                "kind": "segment",
                                "name": "seg_62",
                                "parser": "uint62",
                                "autovalue": 0
                            },
                            {
                                "id": "Pk5MSKWkffsp",
                                "kind": "segment",
                                "name": "seg_63",
                                "parser": "uint63",
                                "autovalue": 0
                            },
                            {
                                "id": "VtmKwGfbAN-k",
                                "kind": "segment",
                                "name": "seg_64",
                                "parser": "uint64",
                                "autovalue": 0
                            }
                        ],
                        "bitalign": "lr"
                    }
                }
            ]
        ],
        "xtra": {
            "pack": "-- 打包函数\r\n-- 协议段打包时调用\r\n-- 输入参数 seg_name: 协议段名称、seg_value：协议段值\r\n-- 返回值：返回打包后的string\r\n\r\n--将浮点数打包成字符串 字符D替换小数点\r\nfunction PackFloat_D(seg_name, seg_value)\r\n    local str = string.format(\"%.5f\", seg_value)\r\n    if seg_name=='WD' then  --纬度是最后一个字符串，不需要分割符F\r\n        return string.gsub(str, \"%.\", \"D\")\r\n    else \r\n        return string.gsub(str, \"%.\", \"D\")..'F'\r\n    end\r\nend\r\n\r\n\r\n\r\n\r\n--将浮点数放大10倍后打包成整数字符串\r\nfunction PackFloat_I(seg_name, seg_value, prot_data)\r\n    return string.format(\"%.0f\", seg_value*10)..'F'\r\nend\r\n\r\n",
            "unpack": "\r\n\r\n\r\n-- 解包函数\r\n-- 协议段解包时调用\r\n-- 输入参数 seg_name: 协议段名称、prot_buff：报文原始字节、 pos: 当前解析位置\r\n-- 返回值：必须返回2个值，第1个为解析得到的值，第2个为解析使用的字节长度\r\n\r\n\r\n--将含D字符的string解包成浮点数\r\nfunction UnpackFloat_D(seg_name, prot_buff, pos)\r\n    local pos_end = pos\r\n    local str = ''\r\n    if seg_name=='WD' then\r\n        pos_end = string.len(prot_buff)\r\n        str = string.sub(prot_buff, pos, pos_end)\r\n    else \r\n        pos_end = string.find(prot_buff, 'F', pos)\r\n        str = string.sub(prot_buff, pos, pos_end-1)\r\n    end\r\n    str = string.gsub(str, 'D', '.')\r\n    return tonumber(str), pos_end-pos+1\r\nend\r\n\r\n\r\n--将整数字符串解包成缩小10倍的浮点数\r\nfunction UnpackFloat_I(seg_name, prot_buff, pos)\r\n    local pos_end = string.find(prot_buff, 'F', pos)\r\n    local str = string.sub(prot_buff, pos, pos_end-1)\r\n    return tonumber(str)/10, pos_end-pos+1\r\nend",
            "check": "\r\n\r\n-- 校验函数\r\n-- 校验函数用于生成原始字节的校验码\r\n-- 输入参数 prot_buff: 协议包原始字节、pos_begin：校验开始字节位置、pos_end：校验结束字节位置\r\n-- 返回值：返回特定长度字符串\r\n\r\n-- xor8校验后转字符串\r\nfunction My_xor8(prot_buff, pos_begin, pos_end)\r\n    local res = 0\r\n    for i=pos_begin, pos_end do\r\n        res = res ~ string.byte(prot_buff, i)\r\n        print(res)\r\n    end\r\n    return string.format(\"%02X\", res)\r\nend",
            "recvfilter": "\r\n\r\n-- 数据接收过滤器\r\nfunction Before_recv(b)\r\n    local header = buf.readstr(b, 0, 6, false)\r\n    local len1 = buf.len(b)\r\n    local len2 = buf.readint(b, 6, 2, false, false)\r\n    if header ~= 'TSPD00' or len1 ~= len2 then\r\n        print('ERROR MESSAGE:', header, len2)\r\n        return -1\r\n    else\r\n        return 0\r\n    end\r\nend\r\n"
        },
        "libs": [
            [
                "helper",
                {
                    "id": "uPRGuUxmpq",
                    "proj_id": "vJ4sHlLUU",
                    "kind": "lib",
                    "content": {
                        "script": "\r\nlocal this = {}\r\n\r\nthis.create_bufstr = function (len)\r\n    local s = ''\r\n    for i = 0, len-1 do\r\n        s = s .. (i%256<16 and '0' or '') .. string.format(i==len-1 and '%X' or '%X ', i%256)\r\n    end\r\n    return s\r\nend\r\n\r\nthis.create_buffer = function (len)\r\n    local t = {}\r\n    for i = 1, len do\r\n        t[i] = (i-1)%256\r\n    end\r\n    return string.arr2buff(t)\r\nend\r\n\r\n\r\nthis.trim_error_info = function (info)\r\n    local pos1, pos2 = string.find(info, \"/run/\", 1)\r\n    if pos2 then\r\n        return string.sub(info, pos2+1)\r\n    end\r\n    return info\r\nend\r\n\r\nreturn this",
                        "memo": null
                    }
                }
            ]
        ],
        "runs": [
            {
                "id": "OCcxN1JjBGjI",
                "code": "",
                "params": [
                    {
                        "id": "demo",
                        "title": "demo",
                        "vars": null,
                        "option": {
                            "topology": "topo_udp"
                        }
                    }
                ]
            },
            {
                "id": "KTEIwUH7MvA7",
                "code": "\r\n\r\nfunction entry()\r\n    local msg = message(protocol.prot_primitive)\r\n    msg.seg1 = -10.99\r\n    msg.seg2 = -1000299.235456\r\n    msg.seg3 = -97\r\n    msg.seg4 = -97\r\n    msg.seg5 = -97\r\n    msg.seg6 = -97\r\n    msg.seg7 = -97\r\n    local buf = pack(msg)\r\n    -- print(string.buff2hex(buf))\r\n    local len = #buf\r\n    assert(string.sub(buf, len-3, len-3) == string.sub(buf, len-1, len-1) and string.sub(buf, len-2, len-2) == string.sub(buf, len, len))\r\n    local msg2 = unpack(protocol.prot_primitive, buf)\r\n    assert(msg2.seg3==-97 and msg2.seg4==-97 and msg2.seg5==-97 and msg2.seg6==-97 and msg2.seg7==-97)\r\n    log.info('t_primitive 测试通过')\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_primitive",
                        "title": "t_primitive",
                        "vars": null,
                        "option": {
                            "topology": "topo_udp"
                        }
                    }
                ]
            },
            {
                "id": "pjhi_is6uPPq",
                "code": "\r\nlocal helper = require 'helper'\r\n\r\nlocal test = {\r\n\r\n    -- 超长报文\r\n    e_udp_msg_too_long = function ()\r\n        local len = 65508\r\n        local buf_a = helper.create_buffer(len)\r\n        send(device.udp1.conn1, buf_a, nil)\r\n    end,\r\n\r\n    -- 基本通信测试\r\n    udp_common = function()\r\n        local lens = { 1, 10, 100, 1024, 65507 }\r\n\r\n        for i, len in ipairs(lens) do\r\n            local buf_a = helper.create_buffer(len)\r\n            send(device.udp1.conn1, buf_a)\r\n            local buf_b = recv(device.udp2.conn1, nil, 3000)\r\n            assert(buf_a == buf_b, i .. \",\" .. #buf_a .. ',' .. #buf_b)\r\n        end\r\n    end,\r\n\r\n    -- 多报文通信\r\n    udp_multimsg = function ()\r\n        local lens = { 1, 10, 100, 1024, 65507 }\r\n\r\n        for i, len in ipairs(lens) do\r\n            local buf_a = helper.create_buffer(len)\r\n            send(device.udp1.conn1, buf_a)\r\n        end\r\n        for i, len in ipairs(lens) do\r\n            local buf_a = helper.create_buffer(len)\r\n            local buf_b = recv(device.udp2.conn1, nil, 3000)\r\n            assert(buf_a == buf_b, #buf_a .. '~=' .. #buf_b)\r\n        end\r\n    end,\r\n\r\n    -- 动态目标\r\n    udp_target = function ()\r\n        local lens = { 1, 10, 100, 1024, 65507 }\r\n        for i, len in ipairs(lens) do\r\n            local buf_a = helper.create_buffer(len)\r\n            send(device.udp1.conn2, buf_a, { to = 'udp2.conn2'})\r\n        end\r\n        for i, len in ipairs(lens) do\r\n            local buf_a = helper.create_buffer(len)\r\n            local buf_b = recv(device.udp2.conn2, nil, 3000)\r\n            assert(buf_a == buf_b, #buf_a .. '~=' .. #buf_b)\r\n        end\r\n        local buf_c = recv(device.udp2.conn3, nil)\r\n        assert(buf_c == nil)\r\n    end,\r\n\r\n\r\n    -- 广播报文测试\r\n    udp_broadcast = function ()\r\n        local lens = { 1, 10, 100, 1024 }\r\n        for i, len in ipairs(lens) do\r\n            local buf_a = helper.create_buffer(len)\r\n            send(device.udp1.conn2, buf_a, { to_port = 8000 })\r\n        end\r\n        for i, len in ipairs(lens) do\r\n            local buf_a = helper.create_buffer(len)\r\n            local buf_b = recv(device.udp2.conn4, nil, 3000)\r\n            assert(buf_a == buf_b, #buf_a .. '~=' .. #buf_b)\r\n        end\r\n        local buf_c = recv(device.udp2.conn3, nil)\r\n        assert(buf_c == nil)\r\n    end,\r\n\r\n    -- 异步通信测试\r\n    udp_async = function()\r\n        local lens = { 1, 10, 100, 1024, 65507 }\r\n        local count1 = 0\r\n        local count2 = 0\r\n        local count3 = 0\r\n\r\n        async.on_recv(device.udp2.conn1, nil,\r\n            function (buf)\r\n                count1 = count1 + 1\r\n                local len = #buf\r\n                assert(buf == helper.create_buffer(len))\r\n            end\r\n        )\r\n\r\n        async.on_recv(device.udp2.conn2, nil,\r\n            function (buf)\r\n                count2 = count2 + 1\r\n                local len = #buf\r\n                assert(buf == helper.create_buffer(len))\r\n            end\r\n        )\r\n\r\n        async.on_recv(device.udp2.conn4, nil,\r\n            function (buf)\r\n                count3 = count3 + 1\r\n                local len = #buf\r\n                assert(buf == helper.create_buffer(len))\r\n            end\r\n        )\r\n\r\n        for i, len in ipairs(lens) do\r\n            local buf_a = helper.create_buffer(len)\r\n            async.send(device.udp1.conn1, buf_a)\r\n            async.send(device.udp1.conn2, buf_a, { to = 'udp2.conn2'})\r\n            async.send(device.udp1.conn2, buf_a, { to_port = 8000 })\r\n        end\r\n\r\n        -- count2 = #lens\r\n\r\n        for i = 1, 1000 do\r\n            delay(10)\r\n            local l = #lens\r\n            if count1 == l and count2 == l and count3 == l then\r\n                break\r\n            end\r\n        end\r\n        async.off_recv(device.udp2.conn1)\r\n        async.off_recv(device.udp2.conn2)\r\n        async.off_recv(device.udp2.conn4)\r\n\r\n        -- print(count1, count2, count3)\r\n        assert(count1 == #lens)\r\n        assert(count2 == #lens)\r\n        assert(count3 == #lens)\r\n    end,\r\n\r\n}\r\n\r\n\r\nfunction entry(vars)\r\n\r\n    -- ioctl(device.udp1.conn1, \"JoinGroup\", {group = \"244.0.2.2\"})\r\n    -- ioctl(device.udp1.conn1, \"LeaveGroup\", {group = \"244.0.2.2\"})\r\n\r\n    local filter = \"u\"\r\n\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend\r\n",
                "params": [
                    {
                        "id": "t_udp",
                        "title": "t_udp",
                        "vars": null,
                        "option": {
                            "topology": "topo_udp"
                        }
                    }
                ]
            },
            {
                "id": "haMJWlkM2UYP",
                "code": "\r\nlocal helper = require 'helper'\r\n\r\nlocal function send_recv (client, server, srv_opt)\r\n    local lens = { 1, 10, 100, 1024, 65507, 65*1024 }\r\n\r\n    local l1 = 0\r\n    local l2 = 0\r\n    local l3 = 0\r\n\r\n    for i, len in ipairs(lens) do\r\n        l1 = l1 + len\r\n        local buf_a = helper.create_buffer(len)\r\n        local slen = send(device.client[client], buf_a)\r\n        assert(slen == len)\r\n\r\n        for i = 1, 100 do\r\n            local buf_b, opt = recv(device.server[server], nil, 100)\r\n            if not buf_b then\r\n                break\r\n            end\r\n            l2 = l2 + #buf_b\r\n            assert(not not opt[\"client_port\"])\r\n        end\r\n\r\n        local slen = send(device.server[server], buf_a, srv_opt)\r\n        assert(slen == len)\r\n\r\n        for i = 1, 100 do\r\n            local buf_b, opt = recv(device.client[client], nil, 100)\r\n            if not buf_b then\r\n                break\r\n            end\r\n            l3 = l3 + #buf_b\r\n        end\r\n        assert(l2 == l1 and l3 == l1, l1 .. ',' .. l2 .. ',' .. l3)\r\n    end\r\nend\r\n\r\nlocal test = {\r\n\r\n    -- 基本通信测试\r\n    tcp_common = function ()\r\n        send_recv('tcp1', 'srva')\r\n        send_recv('tcp4', 'srvd')\r\n    end,\r\n\r\n    -- 手动连接\r\n    tcp_conn_disconn = function ()\r\n        local err_fn = function (c)\r\n            send(device.client[c], 'aaa\\0')\r\n        end\r\n        local res = pcall(err_fn, 'tcp2')\r\n        assert(not res)\r\n\r\n        local opt1 = ioctl(device.client.tcp2, 'Connect', { to = 'server.srvb'})\r\n        local opt2 = ioctl(device.client.tcp3, 'Connect', { to = 'server.srvc'})\r\n        assert(opt1[\"client_ip\"] == opt2[\"client_ip\"])\r\n        send_recv('tcp2', 'srvb', { to = 'client.tcp2' })\r\n        send_recv('tcp3', 'srvc', { to = opt2.client_ip .. ':' .. opt2.client_port })\r\n\r\n        ioctl(device.client.tcp2, 'Disconnect')\r\n        res = pcall(err_fn, 'tcp2')\r\n        assert(not res)\r\n        ioctl(device.client.tcp2, 'Connect', { to = 'server.srvb'})\r\n        send_recv('tcp2', 'srvb', { to = 'client.tcp2' })\r\n        ioctl(device.client.tcp2, 'Disconnect')\r\n        res = pcall(err_fn, 'tcp2')\r\n        assert(not res)\r\n        ioctl(device.client.tcp3, 'Disconnect')\r\n    end,\r\n\r\n    -- 服务器上的客户端列表\r\n    tcp_listclient = function ()\r\n        delay(10)\r\n        local l1 = ioctl(device.server.srva, 'ListClients')\r\n        assert(#l1.result == 1)\r\n        local l2 = ioctl(device.server.srvb, 'ListClients')\r\n        assert(#l2.result == 0)\r\n        local l3 = ioctl(device.server.srvc, 'ListClients')\r\n        assert(#l3.result == 0)\r\n        local l4 = ioctl(device.server.srvd, 'ListClients')\r\n        assert(#l4.result == 1)\r\n        local l5 = ioctl(device.server.srve, 'ListClients')\r\n        assert(#l5.result == 1)\r\n        local l6 = ioctl(device.server.srvf, 'ListClients')\r\n        assert(#l6.result == 0)\r\n        local l7 = ioctl(device.server.srvg, 'ListClients')\r\n        assert(#l7.result == 0)\r\n        ioctl(device.client.tcp2, 'Connect', { to = 'server.srvb'})\r\n        ioctl(device.client.tcp3, 'Connect', { to = 'server.srvb'})\r\n        l2 = ioctl(device.server.srvb, 'ListClients')\r\n        assert(#l2.result == 2)\r\n        ioctl(device.client.tcp2, 'Disconnect')\r\n        delay(10)\r\n        l2 = ioctl(device.server.srvb, 'ListClients')\r\n        assert(#l2.result == 1)\r\n        ioctl(device.server.srvb, 'Refuse')\r\n        delay(10)\r\n        l2 = ioctl(device.server.srvb, 'ListClients')\r\n        assert(#l2.result == 0)\r\n        ioctl(device.client.tcp3, 'Disconnect')\r\n    end,\r\n\r\n    -- 客户端无ip或端口\r\n    tcp_empty_ip_port = function ()\r\n        send_recv('tcp4', 'srvd')\r\n        send_recv('tcp5', 'srve')\r\n        \r\n        local opt1 = ioctl(device.client.tcp6, 'Connect', { to = 'server.srvf'})\r\n        local opt2 = ioctl(device.client.tcp7, 'Connect', { to = 'server.srvg'})\r\n        assert(opt1[\"client_ip\"] == opt2[\"client_ip\"])\r\n        send_recv('tcp6', 'srvf', { to = opt1.client_ip .. ':' .. opt1.client_port })\r\n        send_recv('tcp7', 'srvg', { to = opt2.client_ip .. ':' .. opt2.client_port })\r\n        ioctl(device.client.tcp6, 'Disconnect' )\r\n        ioctl(device.client.tcp7, 'Disconnect' )\r\n    end,\r\n\r\n    -- 多报文通信\r\n    tcp_multimsg = function ()\r\n        local lens = { 1, 10, 100, 1024, 65507, 65*1024 }\r\n\r\n        local l1 = 0\r\n        local l2 = 0\r\n        local l3 = 0\r\n\r\n        for i, len in ipairs(lens) do\r\n            l3 = l3 + len\r\n            local buf_a = helper.create_buffer(len)\r\n            send(device.client.tcp1, buf_a)\r\n            send(device.server.srva, buf_a)\r\n        end\r\n\r\n        for i = 1, 100 do\r\n            local buf_a = recv(device.server.srva, nil, 10)\r\n            local buf_b = recv(device.client.tcp1, nil, 10)\r\n            l1 = l1 + (buf_a and #buf_a or 0)\r\n            l2 = l2 + (buf_b and #buf_b or 0)\r\n            if not buf_a and not buf_b then\r\n                break\r\n            end\r\n        end\r\n        assert(l1 == l2 and l2 == l3)\r\n    end,\r\n\r\n    tcp_async = function ()\r\n        ioctl(device.client.tcp3, 'Connect', { to = 'server.srvc'})\r\n\r\n        local lens = { 1, 10, 100, 1024, 65507, 65*1024 }\r\n        local count_1 = 0\r\n        local count_a = 0\r\n        local count_3 = 0\r\n        local count_c = 0\r\n\r\n        async.on_recv(device.client.tcp1, nil,\r\n            function (buf)\r\n                count_1 = count_1 + #buf\r\n            end\r\n        )\r\n\r\n        async.on_recv(device.server.srva, nil,\r\n            function (buf)\r\n                count_a = count_a + #buf\r\n            end\r\n        )\r\n\r\n        async.on_recv(device.client.tcp3, nil,\r\n            function (buf)\r\n                count_3 = count_3 + #buf\r\n            end\r\n        )\r\n\r\n        async.on_recv(device.server.srvc, nil,\r\n            function (buf)\r\n                count_c = count_c + #buf\r\n            end\r\n        )\r\n\r\n        local count = 0\r\n        for i, len in ipairs(lens) do\r\n            count = count + len\r\n            local buf_a = helper.create_buffer(len)\r\n            async.send(device.client.tcp1, buf_a)\r\n            async.send(device.client.tcp3, buf_a)\r\n            async.send(device.server.srva, buf_a)\r\n            async.send(device.server.srvc, buf_a)\r\n        end\r\n\r\n        for i = 1, 1000 do\r\n            delay(10)\r\n            if count_a == count and count_c == count and count_1 == count and count_3 == count then\r\n                break\r\n            end\r\n        end\r\n        async.off_recv(device.client.tcp1)\r\n        async.off_recv(device.client.tcp3)\r\n        async.off_recv(device.server.srva)\r\n        async.off_recv(device.server.srvc)\r\n\r\n        -- print(count_1, count_a, count_c, count_3)\r\n        assert(count_a == count)\r\n        assert(count_c == count)\r\n        assert(count_1 == count)\r\n        assert(count_3 == count)\r\n        ioctl(device.client.tcp3, 'Disconnect')\r\n    end,\r\n\r\n    tcp_refuse_stop_start = function ()\r\n        delay(10)\r\n        ioctl(device.server.srvb, 'Stop')\r\n        delay(10)\r\n        ioctl(device.server.srvb, 'Start')\r\n        delay(10)\r\n        ioctl(device.client.tcp2, 'Connect', { to = 'server.srvb'})\r\n        delay(10)\r\n        ioctl(device.server.srvb, 'Refuse')\r\n        delay(10)\r\n        ioctl(device.client.tcp2, 'Disconnect', { to = 'server.srvb'})\r\n    end\r\n}\r\n\r\n\r\nfunction entry(vars)\r\n\r\n    ioctl(device.client.tcp4, 'Connect')\r\n\r\n    local filter = \"t\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend\r\n",
                "params": [
                    {
                        "id": "t_tcp",
                        "title": "t_tcp",
                        "vars": null,
                        "option": {
                            "topology": "topo_tcp"
                        }
                    }
                ]
            },
            {
                "id": "oBGwomAvIo-w",
                "code": "\r\nlocal helper = require 'helper'\r\n\r\nlocal test = {\r\n\r\n    str_err = function ()\r\n        local err_arr2buff = function (t)\r\n            return string.arr2buff(t)\r\n        end\r\n\r\n        local err_hex2buff = function (t)\r\n            return string.hex2buff(t)\r\n        end\r\n\r\n        local err_buff2hex = function (t)\r\n            return string.buff2hex(t)\r\n        end\r\n\r\n        local res = true\r\n\r\n        local bad = { {},  {'a'}, '', {[7] = 99, [9] = 100}, 1, 0, -9.8 }\r\n        for i, v in ipairs(bad) do\r\n            res = pcall(err_arr2buff, v)\r\n            assert(not res)\r\n            res = pcall(err_hex2buff, v)\r\n            assert(not res)\r\n            res = pcall(err_buff2hex, v)\r\n            assert(not res)\r\n        end\r\n\r\n        res = pcall(err_arr2buff, nil)\r\n        assert(not res)\r\n        res = pcall(err_hex2buff, nil)\r\n        assert(not res)\r\n        res = pcall(err_buff2hex, nil)\r\n        assert(not res)\r\n\r\n    end,\r\n\r\n    str_buf_hex = function ()\r\n\r\n        local b1 = string.hex2buff('12 dx')\r\n        assert(b1 ~= nil)\r\n        local b2 = string.hex2buff('aa FF 00e 9ab')\r\n        local b3 = string.hex2buff('aaF F 0 0e9 A B')\r\n        assert(b2 == b3)\r\n\r\n        local s1 = string.buff2hex(' ')\r\n        assert(s1 ~= nil)\r\n        local s2 = string.buff2hex(b2)\r\n        local s3 = string.buff2hex(b3)\r\n        assert(s2 == s3 and #s2 == #b2*3-1)\r\n\r\n        local lens = { 1, 10, 100, 1024, 65*1024 }\r\n        for idx, value in ipairs(lens) do\r\n            local s1 = helper.create_bufstr(value)\r\n            local s2 = string.buff2hex(string.hex2buff(s1))\r\n            assert(s1 == s2)\r\n        end\r\n\r\n    end,\r\n\r\n    str_array = function ()\r\n        local ok = {}\r\n        for i = 1, 2050 do\r\n            table.insert( ok, i, i-1)\r\n        end\r\n        local buf1 = string.buff2hex(string.arr2buff(ok))\r\n        local buf2 = helper.create_bufstr(2050)\r\n        assert(buf1 == buf2)\r\n    end\r\n}\r\n\r\n\r\nfunction entry(vars)\r\n\r\n    local filter = \"s\"\r\n\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend\r\n",
                "params": [
                    {
                        "id": "t_string",
                        "title": "t_string",
                        "vars": null,
                        "option": {
                            "topology": "topo_udp"
                        }
                    }
                ]
            },
            {
                "id": "Y1wpDEgMTN4T",
                "code": "\r\nlocal helper = require 'helper'\r\n\r\nlocal test = {\r\n\r\n    serial_send_recv = function()\r\n        local lens = { 1, 10, 100, 1024, 4555 }\r\n        local t1 = 0\r\n        local t2 = 0\r\n        local t3 = 0\r\n        for i, len in ipairs(lens) do\r\n            local buf_a = helper.create_buffer(len)\r\n            local send_len = send(device.dev1.conn1, buf_a)\r\n            assert(send_len == len)\r\n            send_len = send(device.dev2.conn1, buf_a)\r\n            assert(send_len == len)\r\n\r\n            t1 = t1 + len\r\n            local buf_b = recv(device.dev2.conn1, nil, 100)\r\n            if buf_b then\r\n                t2 = t2 + #buf_b\r\n            end\r\n        end\r\n        local rbuf = recv(device.dev2.conn1, nil, 100)\r\n        while rbuf do\r\n            t2 = t2 + #rbuf\r\n            rbuf = recv(device.dev2.conn1, nil, 100)\r\n        end\r\n        rbuf = recv(device.dev1.conn1, nil, 100)\r\n        while rbuf do\r\n            t3 = t3 + #rbuf\r\n            rbuf = recv(device.dev1.conn1, nil, 100)\r\n        end\r\n        assert(t2 == t1 and t2 == t3, t1 .. \" : \" .. t2 .. \" : \" .. t3)\r\n    end,\r\n\r\n    serial_multimsg = function ()\r\n        local lens = { 1, 10, 100, 1024, 4555 }\r\n\r\n        local l1 = 0\r\n        local l2 = 0\r\n        local l3 = 0\r\n        local count = 0\r\n\r\n        for i, len in ipairs(lens) do\r\n            local buf_a = helper.create_buffer(len)\r\n            send(device.dev1.conn1, buf_a)\r\n            send(device.dev2.conn1, buf_a)\r\n            l1 = l1 + len\r\n        end\r\n\r\n        local buf_a, buf_b\r\n        while l2 ~= l1 or l3 ~= l1 do\r\n            if l2 ~= l1 then\r\n                buf_a = recv(device.dev1.conn1, nil, 100)\r\n                l2 = l2 + (buf_a and #buf_a or 0)\r\n            end\r\n            if l3 ~= l1 then\r\n                buf_b = recv(device.dev2.conn1, nil, 100)\r\n                l3 = l3 + (buf_b and #buf_b or 0)\r\n            end\r\n            count = count + 1\r\n            if count > 1000 then\r\n                break;\r\n            end\r\n        end\r\n        \r\n        assert(l1 == l2 and l2 == l3)\r\n    end,\r\n\r\n    -- 异步通信测试\r\n    serial_async = function()\r\n        local lens = { 1, 10, 100, 1024, 4555 }\r\n        local count1 = 0\r\n        local count2 = 0\r\n        local count3 = 0\r\n\r\n        async.on_recv(device.dev1.conn1, nil,\r\n            function (buf)\r\n                -- print('dev1 recved', #buf)\r\n                count1 = count1 + #buf\r\n            end\r\n        )\r\n\r\n        async.on_recv(device.dev2.conn1, nil,\r\n            function (buf)\r\n                -- print('dev2 recved', #buf)\r\n                count2 = count2 + #buf\r\n            end\r\n        )\r\n\r\n        for i, len in ipairs(lens) do\r\n            local buf_a = helper.create_buffer(len)\r\n            async.send(device.dev1.conn1, buf_a, nil, function (l) assert(l == len) end)\r\n            async.send(device.dev2.conn1, buf_a, nil, function (l) assert(l == len) end)\r\n            count3 = count3 + len\r\n        end\r\n\r\n        -- count2 = #lens\r\n\r\n        for i = 1, 2500 do\r\n            delay(10)\r\n            if count1 == count3 and count2 == count3 then\r\n                break\r\n            end\r\n        end\r\n        \r\n        async.off_recv(device.dev1.conn1)\r\n        async.off_recv(device.dev2.conn1)\r\n\r\n        -- print(count1, count2, count3)\r\n        assert(count1 == count3 and count2 == count3, count1 .. ':' .. count2 .. ':' .. count3)\r\n    end,\r\n\r\n    serial_ioctl = function ()\r\n        local com1 = device.dev1.conn1\r\n        local com2 = device.dev2.conn1\r\n        local cts, dsr, ri,cd\r\n        local bool2str = function (b)\r\n            return b and 'true' or 'false'\r\n        end\r\n        local log_state = function (com)\r\n            cts = ioctl(com, 'GetCTS').result\r\n            dsr = ioctl(com, 'GetDSR').result\r\n            ri = ioctl(com, 'GetRI').result\r\n            cd = ioctl(com, 'GetCD').result\r\n            if DEBUG then\r\n                print('cts=' .. bool2str(cts), 'dsr=' .. bool2str(dsr), 'ri=' .. bool2str(ri) , 'cd=' .. bool2str(cd))\r\n            end\r\n        end\r\n        log_state(com1)\r\n        log_state(com1)\r\n        ioctl(com1, 'SetRTS', {value = true})\r\n        ioctl(com1, 'SetDTR', {value = true})\r\n        log_state(com1)\r\n        log_state(com2)\r\n        ioctl(com1, 'SetRTS', {value = false})\r\n        ioctl(com1, 'SetDTR', {value = false})\r\n        log_state(com2)\r\n    end,\r\n\r\n    serial_ioctl_break = function()\r\n        local com1 = device.dev1.conn1\r\n        local com2 = device.dev2.conn1\r\n        local buf\r\n        ioctl(com1, 'SetBreak', {value = true})\r\n        buf = recv(com2, nil, 200)\r\n        assert(string.hex2buff('00') == buf)\r\n        ioctl(com1, 'SetBreak', {value = false})\r\n        buf = recv(com2, nil, 200)\r\n        assert(buf == nil)\r\n    end\r\n}\r\n\r\n\r\nfunction entry(vars)\r\n    DEBUG = false\r\n    local filter = \"s\"\r\n\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend\r\n",
                "params": [
                    {
                        "id": "t_serial",
                        "title": "t_serial",
                        "vars": null,
                        "option": {
                            "topology": "topo_serial"
                        }
                    }
                ]
            },
            {
                "id": "lkaqMl5bf8DX",
                "code": "\r\nlocal helper = require 'helper'\r\n\r\nlocal test = {\r\n\r\n    timer_timeout = function ()\r\n        local t1 = now()\r\n        local _fn_out = nil\r\n        local count = 0\r\n        local fn_out = function (aaa, bbb, contiue, ddd)\r\n            count = count + 1\r\n            assert(aaa == 1)\r\n            assert(bbb == 'a')\r\n            assert(ddd == nil)\r\n            local t2 = now()\r\n            assert(t2 - t1 >= 999 and t2 - t1 < 1050, t1 .. '-' .. t2)\r\n            t1 = now()\r\n            if contiue then\r\n                async.timeout(1000, _fn_out, aaa, bbb, false)\r\n            end\r\n        end\r\n        _fn_out = fn_out\r\n        async.timeout(1000, fn_out, 1, 'a', true)\r\n        delay(2100)\r\n        assert(count == 2)\r\n    end,\r\n\r\n    timer_interval = function ()\r\n        local t1 = now()\r\n        local count = 1\r\n        local fn_tick = function (aaa, bbb, ccc)\r\n            local t2 = now()\r\n            count  = count + 1\r\n            assert(aaa == 1)\r\n            assert(bbb == 'a')\r\n            assert(ccc == nil)\r\n            assert(t2 - t1 > 90 and t2 - t1 < 150)\r\n            t1 = now()\r\n        end\r\n        async.interval(100, 100, fn_tick, 1, 'a')\r\n        delay(1000)\r\n        assert(count == 10, '' .. count)\r\n    end\r\n}\r\n\r\n\r\nfunction entry(vars)\r\n    DEBUG = false\r\n    local filter = \"t\"\r\n\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n    exit()\r\nend\r\n",
                "params": [
                    {
                        "id": "t_timer",
                        "title": "t_timer",
                        "vars": null,
                        "option": {
                            "topology": "topo_udp"
                        }
                    }
                ]
            },
            {
                "id": "gHvkA3eZTzni",
                "code": "\r\nlocal helper = require 'helper'\r\n\r\nlocal test = {\r\n\r\n    rt_udp = function ()\r\n        local len = 0\r\n        local max_recv_diff = 0\r\n        local max_send_diff = 0\r\n        local t1, t2, t3, t4\r\n        local buff = string.hex2buff('aa bb cc 00 ff ef ff 11 aa bb cc 00 ff ef ff 11 aa bb cc 00 ff ef ff 11')\r\n\r\n        async.on_recv(device.udp2_.conn1, nil,\r\n            function (buf)\r\n                -- assert(buf == buff)\r\n                if t3 == nil then\r\n                    t3 = now('us')\r\n                else\r\n                    t4 = now('us')\r\n                    local diff = (t4 - t3) - len*1000\r\n                    record.recv_diff = diff\r\n                    if math.abs(diff) > max_recv_diff then\r\n                        max_recv_diff = math.abs(diff)\r\n                    end\r\n                    record.len = len\r\n                    t3 = now('us')\r\n                end\r\n            end\r\n        )\r\n\r\n        local ticker = function (buff)\r\n            send(device.udp1_.conn1, buff)\r\n            if t1 == nil then\r\n                t1 = now('us')\r\n            else\r\n                t2 = now('us')\r\n                local diff = (t2 - t1) - len*1000\r\n                record.send_diff = diff\r\n                if math.abs(diff) > max_send_diff then\r\n                    max_send_diff = math.abs(diff)\r\n                end\r\n                record.len = len\r\n                t1 = now('us')\r\n            end\r\n\r\n        end\r\n\r\n\r\n        local lens = { 1, 10, 100, 200, 300 }\r\n        for i, l in ipairs(lens) do\r\n            len = l\r\n            t1 = nil\r\n            t3 = nil\r\n            local timer = async.interval(l, l, ticker, buff)\r\n            delay(l * 10)\r\n            async.clear(timer)\r\n            delay(400)\r\n        end\r\n\r\n        print('发送调度最大误差 =', max_send_diff .. 'us')\r\n        print('接收事件最大误差 =', max_recv_diff .. 'us')\r\n\r\n    end,\r\n\r\n    rt_serial = function ()\r\n        local b_break = true\r\n        local count = 0\r\n        local send = 0\r\n        local max_diff = 0\r\n        local t1\r\n\r\n        async.on_recv(device.dev2_.conn1, nil,\r\n            function (buf)\r\n                count = count + #buf\r\n            end\r\n        )\r\n\r\n        -- local ticker = function ()\r\n        --     if t1 == nil then\r\n        --         t1 = now('us')\r\n        --     else \r\n        --         local t2 = now('us')\r\n        --         local diff = math.abs(t2-t1-1000)\r\n        --         if diff > max_diff then\r\n        --             max_diff = diff\r\n        --         end\r\n        --         t1 = t2\r\n        --     end\r\n        --     ioctl(device.dev1_.conn1, 'SetBreak', {value = b_break})\r\n        --     if b_break then\r\n        --         send = send + 1\r\n        --     end\r\n        --     b_break = not b_break\r\n        -- end\r\n\r\n        local buf = string.hex2buff('11 22 33 44 55 66 77 88')\r\n        local ticker = function ()\r\n            if t1 == nil then\r\n                t1 = now('us')\r\n            else \r\n                local t2 = now('us')\r\n                local diff = math.abs(t2-t1-1000)\r\n                if diff > max_diff then\r\n                    max_diff = diff\r\n                end\r\n                t1 = t2\r\n            end\r\n            async.send(device.dev1_.conn1, buf)\r\n            send = send + #buf\r\n        end\r\n\r\n        local timer = async.interval(10, 1, ticker)\r\n        delay(20000)\r\n        async.clear(timer)\r\n        delay(300)\r\n        print('发送周期 1 ms')\r\n        print('共发送', send, '字节')\r\n        print('共接收', count, '字节')\r\n        print('最大误差 =', max_diff, 'us')\r\n    end\r\n}\r\n\r\n\r\nfunction entry(vars)\r\n\r\n    local filter = \"r\"\r\n\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            print('【' .. k .. '】测试开始...')\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend\r\n",
                "params": [
                    {
                        "id": "t_rt",
                        "title": "t_rt",
                        "vars": null,
                        "option": {
                            "real_time": true,
                            "rt_cycle": 1000,
                            "rt_policy": "auto",
                            "topology": "topo_rt"
                        }
                    }
                ]
            },
            {
                "id": "x40oiU5PomDZ",
                "code": "\r\nlocal helper = require 'helper'\r\nlocal test = {\r\n    test_str_array = function ()\r\n        local data1 = {}\r\n        data1.seg_1 = {65535}\r\n        data1.seg_2 = {\"12rt2\\0\",\"qwer\\0\"}\r\n        data1.seg_3 = 1.2345\r\n        local buf = pack(protocol.prot27,data1)\r\n        local data2 = unpack(protocol.prot27, buf)\r\n        assert(data1.seg_1[1] == data2.seg_1[1])\r\n        assert(math.isequal(data1.seg_3,data2.seg_3))\r\n        assert(data1.seg_2[1] == data2.seg_2[1]..\"\\0\")\r\n        assert(data1.seg_2[2] == data2.seg_2[2]..\"\\0\")\r\n    end,\r\n\r\n    test_str_array1 = function ()\r\n        local data1 = {type1=3, type2=1}\r\n        local buf = pack(protocol.prot28, data1)\r\n        local data2 = unpack(protocol.prot28, buf)\r\n        assert(math.isequal(data2.p,-6))\r\n        assert(math.isequal(data2.type1,data1.type1))\r\n        assert(math.isequal(data2.type2,data1.type2))\r\n        assert(math.isequal(data2.x,2))\r\n        assert(math.isequal(data2.x1,15))\r\n        assert(math.isequal(data2.p1,-15))\r\n        assert(data1.p2 == nil)\r\n    end,\r\n    test_str_array2 = function ()\r\n        local data1 = {type1=1, type2=1}\r\n        local buf = pack(protocol.prot28, data1)\r\n        local data2 = unpack(protocol.prot28, buf)\r\n        assert(math.isequal(data2.type1,data1.type1))\r\n        assert(math.isequal(data2.type2,data1.type2))\r\n        assert(math.isequal(data2.x11,2))\r\n        assert(math.isequal(data2.x1,15))\r\n        assert(math.isequal(7,data2.test))\r\n    end,\r\n    test_str_array3 = function ()\r\n        local data1 ={}\r\n        data1.seg_3 = 1.002\r\n        local buf = pack(protocol.prot29, data1)\r\n        local data2 = unpack(protocol.prot29, buf)\r\n        assert(math.isequal(data1.seg_3,data2.seg_3))  \r\n    end,\r\n\r\n}\r\n\r\nfunction entry(vars)\r\n\r\n    local filter = \"t\"\r\n\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_array_string",
                        "title": "t_array_string",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            },
            {
                "id": "vpF8WimxImvf",
                "code": "local helper = require \"helper\"\r\nlocal test = {\r\n    test_array = function ()\r\n        local data1 = {}\r\n        data1.seg_1 = {34, 45, 98, 345, 1, 0, 234, 12344}\r\n        data1.seg_2 = {7, -9, 2688}\r\n        data1.seg_3 = 9999.88889\r\n        data1.seg_4 = 2\r\n        local buf = pack(protocol.prot19,data1)\r\n        local data2 = unpack(protocol.prot19, buf)\r\n        assert(data1.seg_2[1] == data2.seg_2[1])\r\n        assert(data1.seg_2[2] == data2.seg_2[2])\r\n        assert(data1.seg_2[3] == data2.seg_2[3])\r\n        assert(data1.seg_1[1] == data2.seg_1[1])\r\n        assert(data1.seg_1[2] == data2.seg_1[2])\r\n        assert(data1.seg_1[3] == data2.seg_1[3])\r\n        assert(data1.seg_1[4] == data2.seg_1[4])\r\n        assert(data1.seg_1[5] == data2.seg_1[5])\r\n        assert(data1.seg_1[6] == data2.seg_1[6])\r\n        assert(data1.seg_1[7] == data2.seg_1[7])\r\n        assert(data1.seg_1[8] == data2.seg_1[8])\r\n    end,\r\n    test_array1 = function ()\r\n        local data1 = {}\r\n        data1.seg_1 = {34,}\r\n        data1.seg_2 = {1.2, -1.123}\r\n        data1.seg_4 = 2.34\r\n        local buf = pack(protocol.prot20,data1)\r\n        local data2 = unpack(protocol.prot20, buf)\r\n        assert(data1.seg_1[1] == data2.seg_1[1])\r\n        assert(math.isequal(data1.seg_2[1], data2.seg_2[1]))\r\n        assert(math.isequal(data1.seg_2[2], data2.seg_2[2]))\r\n        assert(data1.seg_4 == data2.seg_4)\r\n    end,\r\n    test_array2 = function ()\r\n        local data1 = {}\r\n        data1.seg_1 = {1}\r\n        data1.seg_2 = {1123, -12133,0}\r\n        data1.seg_3 = 123\r\n        data1.seg_4 = {1.222,0,-2.345}\r\n        local buf = pack(protocol.prot21,data1)\r\n        local data2 = unpack(protocol.prot21, buf)\r\n        assert(data1.seg_1[1] == data2.seg_1[1])\r\n        assert(math.isequal(data1.seg_2[1], data2.seg_2[1]),true)\r\n        assert(math.isequal(data1.seg_2[2], data2.seg_2[2]),true)\r\n        assert(math.isequal(data1.seg_4[1], data2.seg_4[1]))\r\n        assert(math.isequal(data1.seg_4[2], data2.seg_4[2]))\r\n        assert(math.isequal(data1.seg_4[3], data2.seg_4[3]))\r\n    end,\r\n    test_array3 = function ()\r\n        local data1 = {}\r\n        data1.seg_1 = {0}\r\n        data1.seg_2 = {1, -1,0}\r\n        data1.seg_3 = 123\r\n        data1.seg_4 = {1.222,0,-2.345}\r\n        data1.seg_5 = {0}\r\n        local buf = pack(protocol.prot22,data1)\r\n        local data2 = unpack(protocol.prot22, buf)\r\n        assert(data1.seg_1[1] == data2.seg_1[1])\r\n        assert(math.isequal(data1.seg_2[1], data2.seg_2[1]))\r\n        assert(math.isequal(data1.seg_2[2], data2.seg_2[2]))\r\n        assert(math.isequal(data1.seg_4[1], data2.seg_4[1]))\r\n        assert(math.isequal(data1.seg_4[2], data2.seg_4[2]))\r\n        assert(math.isequal(data1.seg_4[3], data2.seg_4[3]))\r\n    end,\r\n    test_array4 = function ()\r\n        local msg = message(protocol.prot_array)\r\n        msg.seg_1 = {0,1}\r\n        msg.seg_2 = {\"@#$\",\"!!!\"}\r\n        local data = pack(msg)\r\n        local data1 = unpack(protocol.prot_array,data)\r\n        assert(math.isequal(data1.seg_1[1], msg.seg_1[1]))\r\n        assert(math.isequal(data1.seg_1[2], msg.seg_1[2]))\r\n        assert(data1.seg_2[1] == msg.seg_2[1])\r\n        assert(data1.seg_2[2] == msg.seg_2[2])\r\n    end,\r\n    test_array5 = function ()\r\n        local msg = message(protocol.prot_arrays)\r\n        msg.head = 0\r\n        msg.array ={number=255,list={seg_1=65535,seg_2=\"65535\"}} \r\n        local da = pack(msg)\r\n        local data1 = unpack(protocol.prot_arrays,da)\r\n        assert(msg.head == data1.head)\r\n        assert(msg.array.number == data1.array.number)\r\n        assert(msg.array.list.seg_1 == data1.array.list.seg_1)\r\n        assert(msg.array.list.seg_2 == data1.array.list.seg_2)\r\n    end\r\n\r\n}\r\n\r\nfunction entry(vars)\r\n    local filter = \"t\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_array",
                        "title": "t_array",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            },
            {
                "id": "oE63wKUEGkwj",
                "code": "local helper = require 'helper'\r\nlocal test = {\r\n    \r\n\r\n    test_ByteSize1 = function ()\r\n        local msg = {}\r\n        msg.seg_1 = 0\r\n        msg.seg_2 = \"$%@#!~\\0\"\r\n        msg.seg_3 = 0\r\n        local buf = pack(protocol.prot30,msg)\r\n        local data = unpack(protocol.prot30, buf)\r\n        assert(msg.seg_3 == data.seg_1)\r\n        assert(2 == data.seg_4)\r\n    end,\r\n    test_ByteSize2 = function ()\r\n        local msg = {}\r\n        msg.seg_1 = 12\r\n        msg.seg_2 = \"1234%dgjJLLL\\0\"\r\n        msg.seg_3 = 112\r\n        local buf = pack(protocol.prot30,msg)\r\n        local data = unpack(protocol.prot30, buf)\r\n        assert(2 == data.seg_4)\r\n    end,\r\n    test_ByteSize3 = function ()\r\n        local msg = {}\r\n        msg.seg_1 = -34\r\n        msg.seg_2 = \"FFFF\\0\"\r\n        msg.seg_3 = -987\r\n        local buf = pack(protocol.prot30,msg)\r\n        local data = unpack(protocol.prot30, buf)\r\n        assert(2 == data.seg_4)\r\n    end,\r\n    test_ByteSize4 = function ()\r\n        local msg = {}\r\n        msg.seg_1 = -34\r\n        msg.seg_2 = 9223372036854775807\r\n        msg.seg_3 = -987\r\n        local buf = pack(protocol.prot31,msg)\r\n        local data = unpack(protocol.prot31, buf)\r\n        assert(4 == data.seg_4)\r\n        assert(4 == data.seg_5)\r\n        assert(4+4 == data.seg_6)\r\n        assert(data.seg_4 + data.seg_5 == data.seg_6)\r\n    end,\r\n}\r\n\r\nfunction entry(vars)\r\n    local filter = \"t\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_bytesize",
                        "title": "t_bytesize",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            },
            {
                "id": "eVcfYN6VZnJt",
                "code": "local helper = require 'helper'\r\nlocal test = {\r\n    test_string = function ()\r\n        local data1 = {}\r\n        data1.seg_1 = 4\r\n        data1.seg_2= \"FSDD\"\r\n        data1.seg_3= \"的房dfr了ffd\"\r\n        data1.seg_4 = \"qwe\\0\"\r\n        data1.seg_5 = '111'\r\n        local da = pack(protocol.prot16, data1)\r\n        local data2 = unpack(protocol.prot16, da)\r\n        assert(data1.seg_1 == data2.seg_1)\r\n        assert(data1.seg_2 == data2.seg_2)\r\n        assert(data1.seg_3 == data2.seg_3)\r\n        assert(data1.seg_4 == data2.seg_4..\"\\0\")\r\n        assert(data1.seg_5 == data2.seg_5)\r\n    end,\r\n    test_string1 = function ()\r\n        local data1 = {}\r\n        data1.seg_1 = 4\r\n        data1.seg_2= \"0.00\"\r\n        data1.seg_3= \"的房dd\"\r\n        data1.seg_4 = \"qwe\\0\"\r\n        data1.seg_5 = '111'\r\n        local da = pack(protocol.prot16, data1)\r\n        local data2 = unpack(protocol.prot16, da)\r\n        assert(data1.seg_1 == data2.seg_1)\r\n        assert(data1.seg_2 == data2.seg_2)\r\n        assert(data1.seg_3 == data2.seg_3)\r\n        assert(data1.seg_4 == data2.seg_4..\"\\0\")\r\n        assert(data1.seg_5 == data2.seg_5)\r\n    end,\r\n    test_string2 = function ()\r\n        local data1 = {}\r\n        data1.seg_1 = \"qwer\"\r\n        data1.seg_2= \"1212\"\r\n        data1.seg_3= \"erdd\"\r\n        data1.seg_4 = \"q.we\"\r\n        local da = pack(protocol.prot17, data1)\r\n        local data2 = unpack(protocol.prot17, da)\r\n        assert(data1.seg_1 == data2.seg_1)\r\n        assert(data1.seg_2 == data2.seg_2)\r\n        assert(data1.seg_3 == data2.seg_3)\r\n        assert(data1.seg_4 == data2.seg_4)\r\n        assert(data1.seg_5 == data2.seg_5)\r\n    end,\r\n    test_string3 = function ()\r\n        local data1 = {seg_1=\"0xaa\\0\"}\r\n        local da = pack(protocol.prot18, data1)\r\n        local data2 = unpack(protocol.prot18, da)\r\n        assert(data2.seg_1== data2.seg_1)\r\n    end,\r\n    test_string4 = function ()\r\n        local msg = message(protocol.string_)\r\n        msg.test = {str=\"weet\",str1= \"str1\"}\r\n        local buff = pack(msg)\r\n        local data = unpack(protocol.string_,buff)\r\n        assert(msg.test.str == data .test.str )\r\n    end,\r\n    test_string5 = function ()\r\n        local msg = message(protocol.string_, {test={str=\"\\0\",str1='\\3'},te = \"13\"})\r\n        local buff = pack(msg)\r\n        local data = unpack(protocol.string_ , buff)\r\n        assert(msg.test.str == data .test.str )\r\n        assert(msg.te == data.te )\r\n    end,\r\n    test_string6 = function ()\r\n        local msg = message(protocol.string_)\r\n        msg.test = {str=\"\\0\",str1='\\3',int=123}\r\n        msg.te = \"12\"\r\n        local buff = pack(msg)\r\n        local data = unpack(protocol.string_ , buff)\r\n        assert(msg.test.str == data .test.str )\r\n        assert(msg.te == data.te )\r\n    end,\r\n    -- 当定义协议规则为字符串并且以\\0结尾的时候，不给此协议段赋值时，会出现打包失败，该协议段autovalue属性错误\r\n    -- 定义的协议段为int或者uint时候,autovalue属性不支持数学库计算赋值 举例 autovalue赋值为math.pow(2,5)---得到2的5次方,会显示协议定义错误\r\n    -- oneof 好像不能在协议组中使用,会报错error get bool value of ==\r\n    -- oneof的真值表达式不支持math数学库的计算\r\n    test_string7 = function ()\r\n        local msg = message(protocol.string_)\r\n        msg.test = {str='*'}\r\n        local buff = pack(msg)\r\n        local data = unpack(protocol.string_, buff)\r\n        print(data)  \r\n    end,\r\n    test_string8 = function ()\r\n        local msg = message(protocol.string_)\r\n        \r\n    end\r\n}\r\nfunction entry(vars)\r\n    local filter = \"t\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_tstring",
                        "title": "t_tstring",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            },
            {
                "id": "Bbna3L-zHL7Y",
                "code": "local helper = require 'helper'\r\nlocal test = {\r\n    test_checkcode = function ()\r\n        local data = {}\r\n        data.seg_1 = \"1.3\"\r\n        local buf = pack(protocol.prot32,data)\r\n        local data1 = unpack(protocol.prot32,buf)\r\n        assert(data.seg_1 == data1.seg_1)\r\n    end,\r\n    \r\n    test_checkcode1 = function ()\r\n        local data = {}\r\n        data.seg_1 = 34567\r\n        local buf = pack(protocol.prot33,data)\r\n        local data1 = unpack(protocol.prot33,buf)\r\n        assert(data.seg_1 == data1.seg_1)\r\n    end,\r\n    \r\n    test_checkcode2 = function ()\r\n        local data = {}\r\n        data.seg_1 = - 34567\r\n        local buf = pack(protocol.prot34,data)\r\n        local data1 = unpack(protocol.prot34,buf)\r\n        assert(data.seg_1 == data1.seg_1)\r\n    end,\r\n    test_checkcode3 = function ()\r\n        local data = {}\r\n        data.seg_1 = {-22,34}\r\n        local buf = pack(protocol.prot36,data)\r\n        local data1 = unpack(protocol.prot36,buf)\r\n        assert(data.seg_1[1] == data1.seg_1[1])\r\n    end,\r\n    \r\n    \r\n    test_checkcode4 = function ()\r\n        local data = {}\r\n        data.seg_1 = {\"@#\\0\",\"rt\\0\"}\r\n        local buf = pack(protocol.prot35,data)\r\n        local data1 = unpack(protocol.prot35,buf)\r\n        assert(data.seg_1[1] == data1.seg_1[1]..\"\\0\")\r\n    end,\r\n    test_checkcode5 = function ()\r\n        local data = {}\r\n        data.seg_1 = \"1.3\"\r\n        local buf = pack(protocol.prot37,data)\r\n        local data1 = unpack(protocol.prot37,buf)\r\n        assert(data.seg_1 == data1.seg_1)\r\n    end,\r\n    test_checkcode6 = function ()\r\n        local data = {}\r\n        data.seg_1 = 34567\r\n        local buf = pack(protocol.prot38,data)\r\n        local data1 = unpack(protocol.prot38,buf)\r\n        assert(data.seg_1 == data1.seg_1)\r\n    end,\r\n    test_checkcode7 = function ()\r\n        local data = {}\r\n        data.seg_1 = - 34567\r\n        local buf = pack(protocol.prot39,data)\r\n        local data1 = unpack(protocol.prot39,buf)\r\n        assert(data.seg_1 == data1.seg_1)\r\n    end,\r\n    test_checkcode8 = function ()\r\n        local data = {}\r\n        data.seg_1 = {\"qwe\\0\",\"qwe\\0\"}\r\n        local buf = pack(protocol.prot40,data)\r\n        local data1 = unpack(protocol.prot40,buf)\r\n        assert(data.seg_1[1] == data1.seg_1[1]..\"\\0\")\r\n    end\r\n\r\n}\r\nfunction entry(vars)\r\n    local filter = \"t\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_checkcode",
                        "title": "t_checkcode",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            },
            {
                "id": "2Y9gb9LTsQv9",
                "code": "-- 验证补码，反码,大断续，小断续等组合值\r\n\r\nlocal helper = require 'helper'\r\nlocal test ={\r\n    code_pro1= function ()\r\n        local data_send = {seg_1=1.23}\r\n        local buf = pack(protocol.prot_14, data_send)\r\n        local data_recv = unpack(protocol.prot_14, buf)\r\n        assert(math.isequal(data_recv.seg_1, data_send.seg_1))\r\n    end,\r\n    code_pro2 = function ()\r\n        local data_send = {seg_2=1.23}\r\n        local buf = pack(protocol.prot_14, data_send)\r\n        local data_recv = unpack(protocol.prot_14, buf)\r\n        assert(math.isequal(data_recv.seg_2, data_send.seg_2,true))\r\n    end,\r\n    code_pro3 = function ()\r\n        local data_send = {seg_3=-111}\r\n        local buf = pack(protocol.prot_14, data_send)\r\n        local data_recv = unpack(protocol.prot_14, buf)\r\n        assert(math.isequal(data_recv.seg_3, data_send.seg_3,true))\r\n    end,\r\n    \r\n    code_pro4 = function ()\r\n        local data_send = {seg_4=4294967293}\r\n        local buf = pack(protocol.prot_14, data_send)\r\n        local data_recv = unpack(protocol.prot_14, buf)\r\n        assert(math.isequal(data_recv.seg_4, data_send.seg_4,true))\r\n    end,\r\n    code_pro5 = function ()\r\n        local data_send = {seg_4=4294967293,seg_1=1.2,seg_2=1.234,seg_3=234}\r\n        local buf = pack(protocol.prot_14, data_send)\r\n        local data_recv = unpack(protocol.prot_14, buf)\r\n        assert(math.isequal(data_recv.seg_4, data_send.seg_4,true))\r\n        assert(math.isequal(data_recv.seg_1, data_send.seg_1))\r\n        assert(math.isequal(data_recv.seg_2, data_send.seg_2,true))\r\n        assert(math.isequal(data_recv.seg_3, data_send.seg_3,true))\r\n    end,\r\n    \r\n    code_pro6 = function ()\r\n        local data_send = {seg_5=1.234,seg_6=1.2,seg_7=22345,seg_8=23555774}\r\n        local buf = pack(protocol.prot_14, data_send)\r\n        local data_recv = unpack(protocol.prot_14, buf)\r\n        assert(math.isequal(data_recv.seg_5, data_send.seg_5))\r\n        assert(math.isequal(data_recv.seg_6, data_send.seg_6))\r\n        assert(math.isequal(data_recv.seg_7, data_send.seg_7,true))\r\n        assert(math.isequal(data_recv.seg_8, data_send.seg_8,true))\r\n    end,\r\n    code_pro7 = function ()\r\n        local data_send = {seg_5=-1.234,seg_6=-1.2,seg_7=-22345,seg_8=23555774}\r\n        local buf = pack(protocol.prot_14, data_send)\r\n        local data_recv = unpack(protocol.prot_14, buf)\r\n        assert(math.isequal(data_recv.seg_5, data_send.seg_5))\r\n        assert(math.isequal(data_recv.seg_6, data_send.seg_6))\r\n        assert(math.isequal(data_recv.seg_7, data_send.seg_7,true))\r\n        assert(math.isequal(data_recv.seg_8, data_send.seg_8,true))\r\n    end,\r\n    code_pro8 = function ()\r\n        local data_send = {seg_9=-1.234,seg_10=-1.2,seg_11=-22345,seg_12=4294967293,seg_16=4294967293}\r\n        local buf = pack(protocol.prot_14, data_send)\r\n        local data_recv = unpack(protocol.prot_14, buf)\r\n        assert(math.isequal(data_recv.seg_9, data_send.seg_9))\r\n        assert(math.isequal(data_recv.seg_10, data_send.seg_10))\r\n        assert(math.isequal(data_recv.seg_11, data_send.seg_11,true))\r\n        assert(math.isequal(data_recv.seg_12, data_send.seg_12))\r\n        assert(math.isequal(data_recv.seg_16, data_send.seg_16))\r\n    end,\r\n    code_pro9 = function ()\r\n        local data_send = {seg_9=1.234,seg_10=1.2,seg_11=22345}\r\n        local buf = pack(protocol.prot_14, data_send)\r\n        local data_recv = unpack(protocol.prot_14, buf)\r\n        assert(math.isequal(data_recv.seg_9, data_send.seg_9))\r\n        assert(math.isequal(data_recv.seg_10, data_send.seg_10))\r\n        assert(math.isequal(data_recv.seg_11, data_send.seg_11,true))\r\n    end,\r\n    code_pro10 = function ()\r\n        local data_send = {seg_13=1.234,seg_14=1.2,seg_15=22345}\r\n        local buf = pack(protocol.prot_14, data_send)\r\n        local data_recv = unpack(protocol.prot_14, buf)\r\n        assert(math.isequal(data_recv.seg_13, data_send.seg_13))\r\n        assert(math.isequal(data_recv.seg_14, data_send.seg_14))\r\n        assert(math.isequal(data_recv.seg_15, data_send.seg_15,true))\r\n    end,\r\n    code_pro11 = function ()\r\n        local data_send = {seg_13=-1.234,seg_14=-1.2,seg_15=-22345}\r\n        local buf = pack(protocol.prot_14, data_send)\r\n        local data_recv = unpack(protocol.prot_14, buf)\r\n        assert(math.isequal(data_recv.seg_13, data_send.seg_13))\r\n        assert(math.isequal(data_recv.seg_14, data_send.seg_14))\r\n        assert(math.isequal(data_recv.seg_15, data_send.seg_15,true))\r\n    end\r\n}\r\nfunction entry(vars)\r\n    local filter = \"c\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_code",
                        "title": "t_code",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            },
            {
                "id": "qs-9Gd2ZyW1t",
                "code": "-- 验证组合值\r\nlocal helper = require 'helper'\r\nlocal test = {\r\n    com_pro1 = function ()\r\n        local data_send = {seg_1=1.22}\r\n        local buf = pack(protocol.prot_15, data_send)\r\n        local data_recv = unpack(protocol.prot_15, buf)\r\n        assert(math.isequal(data_recv.seg_1, data_send.seg_1))\r\n    end,\r\n    com_pro2 = function ()\r\n        local data_send = {seg_2=0.23334}\r\n        local buf = pack(protocol.prot_15, data_send)\r\n        local data_recv = unpack(protocol.prot_15, buf)\r\n        assert(math.isequal(data_recv.seg_2, data_send.seg_2,true))\r\n    end,\r\n    com_pro3 = function ()\r\n        local data_send = {seg_3=-111}\r\n        local buf = pack(protocol.prot_15, data_send)\r\n        local data_recv = unpack(protocol.prot_15, buf)\r\n        assert(math.isequal(data_recv.seg_3, data_send.seg_3,true))\r\n    end,\r\n    com_pro4 = function ()\r\n        local data_send = {seg_4=4294967293}\r\n        local buf = pack(protocol.prot_15, data_send)\r\n        local data_recv = unpack(protocol.prot_15, buf)\r\n        assert(math.isequal(data_recv.seg_4, data_send.seg_4))\r\n    end,\r\n    com_pro5 = function ()\r\n        local data_send = {seg_4=4294967293,seg_1=1.2,seg_2=1.234,seg_3=234}\r\n        local buf = pack(protocol.prot_15, data_send)\r\n        local data_recv = unpack(protocol.prot_15, buf)\r\n        assert(math.isequal(data_recv.seg_4, data_send.seg_4,true))\r\n        assert(math.isequal(data_recv.seg_1, data_send.seg_1))\r\n        assert(math.isequal(data_recv.seg_2, data_send.seg_2,true))\r\n        assert(math.isequal(data_recv.seg_3, data_send.seg_3,true))\r\n    end,\r\n    com_pro6 = function ()\r\n        local data_send = {seg_4=4294967293,seg_1=1.2,seg_2=1.234,seg_3=234}\r\n        local buf = pack(protocol.prot_15, data_send)\r\n        local data_recv = unpack(protocol.prot_15, buf)\r\n        assert(math.isequal(data_recv.seg_4, data_send.seg_4,true))\r\n        assert(math.isequal(data_recv.seg_1, data_send.seg_1))\r\n        assert(math.isequal(data_recv.seg_2, data_send.seg_2,true))\r\n        assert(math.isequal(data_recv.seg_3, data_send.seg_3,true))\r\n    end,\r\n    com_pro7 = function ()\r\n        local data_send = {seg_5=1.234,seg_6=1.2,seg_7=22345,seg_8=23555774}\r\n        local buf = pack(protocol.prot_15, data_send)\r\n        local data_recv = unpack(protocol.prot_15, buf)\r\n        assert(math.isequal(data_recv.seg_5, data_send.seg_5))\r\n        assert(math.isequal(data_recv.seg_6, data_send.seg_6))\r\n        assert(math.isequal(data_recv.seg_7, data_send.seg_7,true))\r\n        assert(math.isequal(data_recv.seg_8, data_send.seg_8,true))\r\n    end,\r\n    com_pro8 = function ()\r\n        local data_send = {seg_9=-1.234,seg_10=-1.2,seg_11=-22345,seg_12=23555774}\r\n        local buf = pack(protocol.prot_15, data_send)\r\n        local data_recv = unpack(protocol.prot_15, buf)\r\n        assert(math.isequal(data_recv.seg_9, data_send.seg_9))\r\n        assert(math.isequal(data_recv.seg_10, data_send.seg_10))\r\n        assert(math.isequal(data_recv.seg_11, data_send.seg_11,true))\r\n        assert(math.isequal(data_recv.seg_12, data_send.seg_12,true))\r\n    end,\r\n    com_pro9 = function ()\r\n        local data_send = {seg_9=1.234,seg_10=1.2,seg_11=22345,seg_12=235557}\r\n        local buf = pack(protocol.prot_15, data_send)\r\n        local data_recv = unpack(protocol.prot_15, buf)\r\n        assert(math.isequal(data_recv.seg_9, data_send.seg_9))\r\n        assert(math.isequal(data_recv.seg_10, data_send.seg_10))\r\n        assert(math.isequal(data_recv.seg_11, data_send.seg_11,true))\r\n        assert(math.isequal(data_recv.seg_12, data_send.seg_12,true))\r\n    end,\r\n    com_pro10 = function ()\r\n        local data_send = {seg_13=0.6789,seg_14=2.4567,seg_15=-2233345,seg_16=777685}\r\n        local buf = pack(protocol.prot_15, data_send)\r\n        local data_recv = unpack(protocol.prot_15, buf)\r\n        assert(math.isequal(data_recv.seg_13, data_send.seg_13))\r\n        assert(math.isequal(data_recv.seg_14, data_send.seg_14))\r\n        assert(math.isequal(data_recv.seg_15, data_send.seg_15,true))\r\n        assert(math.isequal(data_recv.seg_16, data_send.seg_16,true))\r\n    end,\r\n    com_pro11 = function ()\r\n        local data_send = {seg_13=-0.6789,seg_14=-2.4567,seg_15=-233345,seg_16=777685}\r\n        local buf = pack(protocol.prot_15, data_send)\r\n        local data_recv = unpack(protocol.prot_15, buf)\r\n        assert(math.isequal(data_recv.seg_13, data_send.seg_13))\r\n        assert(math.isequal(data_recv.seg_14, data_send.seg_14))\r\n        assert(math.isequal(data_recv.seg_15, data_send.seg_15,true))\r\n        assert(math.isequal(data_recv.seg_16, data_send.seg_16,true))\r\n    end,\r\n    com_pro12 = function ()\r\n        local data_send = {seg_17=424,seg_18=43547,seg_19=127,seg_20=126}\r\n        local buf = pack(protocol.prot_15, data_send)\r\n        local data_recv = unpack(protocol.prot_15, buf)\r\n        assert(math.isequal(data_recv.seg_17, data_send.seg_17))\r\n        assert(math.isequal(data_recv.seg_18, data_send.seg_18))\r\n        assert(math.isequal(data_recv.seg_19, data_send.seg_19,true))\r\n        assert(math.isequal(data_recv.seg_20, data_send.seg_20,true))\r\n    end,\r\n    com_pro13 = function ()\r\n        local data_send = {seg_17=-424,seg_18=43547,seg_19=-127,seg_20=126}\r\n        local buf = pack(protocol.prot_15, data_send)\r\n        local data_recv = unpack(protocol.prot_15, buf)\r\n        assert(math.isequal(data_recv.seg_17, data_send.seg_17))\r\n        assert(math.isequal(data_recv.seg_18, data_send.seg_18))\r\n        assert(math.isequal(data_recv.seg_19, data_send.seg_19,true))\r\n        assert(math.isequal(data_recv.seg_20, data_send.seg_20,true))\r\n    end,\r\n    com_pro14 = function ()\r\n        local data_send = {seg_13=0,seg_15=0}\r\n        local buf = pack(protocol.prot_15, data_send)\r\n        local data_recv = unpack(protocol.prot_15, buf)\r\n        assert(math.isequal(data_recv.seg_13, data_send.seg_13))\r\n        assert(math.isequal(data_recv.seg_15, data_send.seg_15))\r\n        assert(math.isequal(data_recv.seg_15, data_send.seg_15,true))\r\n    end,\r\n    com_pro15 = function ()\r\n        local data_send = {seg_17=0,seg_18=0,seg_19=0,seg_20=0}\r\n        local buf = pack(protocol.prot_15, data_send)\r\n        local data_recv = unpack(protocol.prot_15, buf)\r\n        assert(math.isequal(data_recv.seg_17, data_send.seg_17))\r\n        assert(math.isequal(data_recv.seg_18, data_send.seg_18))\r\n        assert(math.isequal(data_recv.seg_19, data_send.seg_19,true))\r\n        assert(math.isequal(data_recv.seg_20, data_send.seg_20,true))\r\n    end,\r\n    com_pro16 = function ()\r\n        local data_send = {seg_1=-1.234,seg_17=-0.0,seg_15=-22345}\r\n        local buf = pack(protocol.prot_15, data_send)\r\n        local data_recv = unpack(protocol.prot_15, buf)\r\n        assert(math.isequal(data_recv.seg_1, data_send.seg_1))\r\n        assert(math.isequal(data_recv.seg_17, data_send.seg_17))\r\n        assert(math.isequal(data_recv.seg_15, data_send.seg_15,true))\r\n    end\r\n}\r\n\r\n\r\nfunction entry(vars)\r\n    local filter = \"c\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_com",
                        "title": "t_com",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            },
            {
                "id": "2ZaJYV43vjCR",
                "code": "-- 验证double中间值\r\nlocal helper = require 'helper'\r\nlocal test = {\r\n    double_T_pro = function ()\r\n        local data_send = {seg_2=0,}\r\n        local buf = pack(protocol.prot_13, data_send)\r\n        local data_recv = unpack(protocol.prot_13, buf)\r\n        assert(data_recv.seg_2== data_send.seg_2)\r\n    end,\r\n    -- 验证double最小边界值\r\n    double_Bmax_pro = function ()\r\n        local data_send = {seg_2=-1.7976E+308}\r\n        local buf = pack(protocol.prot_13, data_send)\r\n        local data_recv = unpack(protocol.prot_13, buf)\r\n        assert(data_recv.seg_2== data_send.seg_2)\r\n    end,\r\n    -- 验证double最大边界值\r\n    double_Bmin_pro = function ()\r\n        local data_send = {seg_2=1.7976E+308}\r\n        local buf = pack(protocol.prot_13, data_send)\r\n        local data_recv = unpack(protocol.prot_13, buf)\r\n        assert(data_recv.seg_2== data_send.seg_2)\r\n    end,\r\n    -- 验证double随机值\r\n    double_S_pro = function ()\r\n        local data_send = {seg_2=1.797667}\r\n        local buf = pack(protocol.prot_13, data_send)\r\n        local data_recv = unpack(protocol.prot_13, buf)\r\n        assert(data_recv.seg_2== data_send.seg_2)\r\n    end,\r\n    -- 验证double随机值\r\n    double_int_pro = function ()\r\n        local data_send = {seg_2=0}\r\n        local buf = pack(protocol.prot_13, data_send)\r\n        local data_recv = unpack(protocol.prot_13, buf)\r\n        assert(data_recv.seg_2== data_send.seg_2)\r\n    end,\r\n    -- 验证double随机值\r\n    double_ints_pro = function ()\r\n        local data_send = {seg_2=1}\r\n        local buf = pack(protocol.prot_13, data_send)\r\n        local data_recv = unpack(protocol.prot_13, buf)\r\n        assert(data_recv.seg_2== data_send.seg_2)\r\n    end,\r\n\r\n\r\n}\r\nfunction entry(vars)\r\n    local filter = \"d\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_double",
                        "title": "t_double",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            },
            {
                "id": "LWp0OEJbMCed",
                "code": "local helper = require 'helper'\r\nlocal test = {\r\n    -- 验证float中间值\r\n    float_T_pro = function ()\r\n        local data_send = {seg_1=0}\r\n        local buf = pack(protocol.prot_13, data_send)\r\n        local data_recv = unpack(protocol.prot_13, buf)\r\n        assert(data_recv.seg_1== data_send.seg_1)\r\n    end,\r\n\r\n    -- 验证float最小边界值\r\n    float_Bmin_pro = function ()\r\n        local data_send = {seg_1=-3.3999999521443642e+38,}\r\n        local buf = pack(protocol.prot_13, data_send)\r\n        local data_recv = unpack(protocol.prot_13, buf)\r\n        assert(data_recv.seg_1== data_send.seg_1)\r\n    end,\r\n        -- 验证float最大边界值\r\n    float_Bmax_pro =  function ()\r\n        local data_send = {seg_1=3.3999999521443642e+38,}\r\n        local buf = pack(protocol.prot_13, data_send)\r\n        local data_recv = unpack(protocol.prot_13, buf)\r\n        assert(data_recv.seg_1== data_send.seg_1)\r\n    end,\r\n    -- 验证float随机值 小数位需要为15位\r\n    float_S_pro =function ()\r\n        local data_send = {seg_1=3.399519920349121}\r\n        local buf = pack(protocol.prot_13, data_send)\r\n        local data_recv = unpack(protocol.prot_13, buf)\r\n        assert(data_recv.seg_1== data_send.seg_1)  \r\n    end,\r\n    float_s_pro =function ()\r\n        local data_send = {seg_1=1}\r\n        local buf = pack(protocol.prot_13, data_send)\r\n        local data_recv = unpack(protocol.prot_13, buf)\r\n        assert(data_recv.seg_1== data_send.seg_1)  \r\n    end,\r\n}\r\n\r\nfunction entry(vars)\r\n    local filter = \"f\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_float",
                        "title": "t_float",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            },
            {
                "id": "ZcmY1SDkQxTY",
                "code": "local helper = require 'helper'\r\nlocal test = {\r\n    -- 验证int8的整倍数\r\n    int_Pro = function ()\r\n        local data_send = {seg_8=127,seg_16=6533,seg_24=167215,seg_32=-42949293}\r\n        local buf = pack(protocol.prot_11, data_send)\r\n        local data_recv = unpack(protocol.prot_11, buf)\r\n        assert\r\n            (\r\n                data_recv.seg_8 == data_send.seg_8 \r\n            and data_recv.seg_16 == data_send.seg_16 \r\n            and data_recv.seg_24 == data_send.seg_24  \r\n            and data_recv.seg_32 == data_send.seg_32\r\n            ) \r\n    end,\r\n    -- 验证int特殊组合\r\n\r\n    iEight_pro = function ()\r\n        local data_send = {seg_1=1,seg_31=-64525591,seg_2=1,seg_30=-16177055}\r\n        local buf = pack(protocol.prot_11, data_send)\r\n        local data_recv = unpack(protocol.prot_11, buf)\r\n\r\n        assert\r\n            (\r\n                data_recv.seg_1 == 1 \r\n            and data_recv.seg_2 == data_send.seg_2 \r\n            and data_recv.seg_30 == data_send.seg_30 \r\n            and data_recv.seg_31 == data_send.seg_31 \r\n            ) \r\n\r\n    end,\r\n    -- 验证int随意位数组合\r\n    iSun_pro = function ()\r\n        local data_send = {seg_15=3268,seg_17=13172,seg_14=-1383,seg_18=2614}\r\n        local buf = pack(protocol.prot_11, data_send)\r\n        local data_recv = unpack(protocol.prot_11, buf)\r\n\r\n        assert(\r\n            data_recv.seg_14 == data_send.seg_14 \r\n        and data_recv.seg_15 == data_send.seg_15 \r\n        and data_recv.seg_17 == data_send.seg_17 \r\n        and data_recv.seg_18 == data_send.seg_18\r\n        ) \r\n    end,\r\n}\r\n\r\nfunction entry(vars)\r\n    local filter = \"i\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_int",
                        "title": "t_int",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            },
            {
                "id": "6Fqx3lxr6nRt",
                "code": "local helper = require 'helper'\r\nlocal test = {\r\n    test_oneof1 =function ()\r\n        local data1 = {type1=2, type2=1}\r\n        local buf = pack(protocol.prot23, data1)\r\n        local data2 = unpack(protocol.prot23, buf)\r\n        assert(data2.z==nil)\r\n        assert(math.isequal(data1.type1, data2.type1))\r\n        assert(math.isequal(data1.type2, data2.type2))\r\n    end,\r\n    \r\n    \r\n    test_oneof2 = function ()\r\n        local data1 = {type1=0, type2=1,  x1=1.11}\r\n        -- local data1 = {type1=0, type2=1}\r\n        local buf = pack(protocol.prot23, data1,true)\r\n        local data2 = unpack(protocol.prot23, buf)\r\n        assert(data2.y==nil)\r\n        assert(data2.z==nil)\r\n        assert(math.isequal(data1.type2, data2.type2))\r\n        -- assert(math.isequal(n, data2.x))\r\n        assert(math.isequal(1.11, data2.x1))\r\n    end,\r\n    test_oneof3 = function ()\r\n        local data1 = {type1=2, type2=1}\r\n        local buf = pack(protocol.prot24, data1)\r\n        local data2 = unpack(protocol.prot24, buf)\r\n        assert(math.isequal(data2.p,1.6))\r\n        assert(math.isequal(data2.type1,data1.type1))\r\n        assert(math.isequal(data2.type2,data1.type2))\r\n        assert(math.isequal(data2.x,3))\r\n        assert(math.isequal(data2.x1,2.23))\r\n        assert(math.isequal(data2.p,1.6))\r\n    end,\r\n    test_oneof4 = function ()\r\n        local data1 = {type1=3, type2=1}\r\n        local buf = pack(protocol.prot25, data1)\r\n        local data2 = unpack(protocol.prot25, buf)\r\n        assert(math.isequal(data2.p,-6))\r\n        assert(math.isequal(data2.type1,data1.type1))\r\n        assert(math.isequal(data2.type2,data1.type2))\r\n        assert(math.isequal(data2.x,2))\r\n        assert(math.isequal(data2.x1,15))\r\n        assert(math.isequal(data2.p1,-15))\r\n    end,\r\n    test_oneof5 = function ()\r\n        local data1 = {type1=3, type2=1}\r\n        local buf = pack(protocol.prot26, data1)\r\n        local data2 = unpack(protocol.prot26, buf)\r\n        assert(math.isequal(data2.p,-6))\r\n        assert(math.isequal(data2.type1,data1.type1))\r\n        assert(math.isequal(data2.type2,data1.type2))\r\n        assert(math.isequal(data2.x,2))\r\n        assert(math.isequal(data2.x1,15))\r\n        assert(math.isequal(data2.p1,-15))\r\n        assert(data1.p2 == nil)\r\n        assert(data2.p2 == \"qwe\")\r\n    end,\r\n    test_oneof_segments = function ()\r\n        -- local msg = {xx = 2,oneof_name = {str = \"qqq\",seg_name =1.11,list={12,11},test={qq=5,qs={ww=24,ee=(math.pow(2,40)-1),tt={\"ew\",\"er\"}}}}}\r\n        local msg = {xx=2,aa=6}\r\n        local data = pack(protocol.oneof_prot, msg)\r\n        local data2 = unpack(protocol.oneof_prot, data)\r\n        assert(data2.oneof_name.test.qs.string == \"123\")\r\n        \r\n    end,\r\n    test_oneofs = function ()\r\n        local msg = {str=\"123\"}\r\n        local buff = pack(protocol.one_prot,msg)\r\n        local data = unpack(protocol.one_prot,buff)\r\n        assert(msg.str == data.str)\r\n        assert(data.name == 0)\r\n        assert(data.float == 0)\r\n    end\r\n}\r\n\r\n\r\n\r\nfunction entry(vars)\r\n    local filter = \"t\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_oneof",
                        "title": "t_oneof",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            },
            {
                "id": "9H_WIckUVXCk",
                "code": "local helper = require 'helper'\r\nlocal test = {\r\n    test_recv = function ()\r\n        send(device.dev12.s2, \"msf\\0\",{to=\"dev12.s1\"})\r\n        delay(1000)\r\n        local s1, s2 = recv(device.dev12.s1, nil);\r\n    end,\r\n    test_recv1 = function ()\r\n        local msg = message(protocol.prot_arrays)\r\n        msg.head = 1\r\n        send(device.dev12.s2, msg,{to=\"dev12.s1\"})\r\n        delay(100)\r\n        local s1, s2 = recv(device.dev12.s1, nil)\r\n        local data = unpack(protocol.prot_arrays,s1)\r\n        assert(data.array.list.seg_1 == 1)\r\n        assert(data.array.list.seg_1 == 1)\r\n        assert(data.array.number == 1)\r\n        assert(data.head == msg.head)\r\n    end,\r\n    test_recv2 = function ()\r\n        local msg = \"msfasdfasdfsadfdddddddddddddddddddddddddddddddddddddsdgdffffgsertweytyu \\\r\n        ddddddfgsdfddrfw3qrwerfiopsadufsrsd1f354d5s21f2ds1fq43w4rew54rr5asd45asfd f asdf\"\r\n        send(device.dev12.s2, msg,{to=\"dev12.s1\"})\r\n        delay(100)\r\n        local s1, s2 = recv(device.dev12.s1, nil)\r\n        assert(s1==msg)\r\n    end,\r\n}\r\n\r\n\r\n\r\n\r\nfunction entry(vars)\r\n    local filter = \"t\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_recv",
                        "title": "t_recv",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            },
            {
                "id": "AuhzaLR88AJi",
                "code": "\r\nlocal helper = require 'helper'\r\nlocal test = {\r\n    test_send = function ()\r\n        local msg = message(protocol.send_1)\r\n        msg.seg1 = 4\r\n        msg.seg2 = {0,2,3, 4}\r\n    \r\n        local sta = \"qwerrrrewqrfasfasdfdftjhuiangiweas;ddfl;ksafffowqpa'wojtsafsdfsdfsdffasdfasadffatteryfggdjgdfjferrrrewqrfasfasdfdftjhuiangiweas;ddfl;ksafffowqpa'wojtsafsdfsdfsdffasdfasadffatteryfggdjgdfjfhrewyysdfijerrrrewqrfasfasdfdftjhuiangiweas;ddfl;ksafffowqpa'wojtsafsdfsdfsdffasdfasadffatteryfggdjgdfjfhrewyysdfijerrrrewqrfasfasdfdftjhuiangiweas;ddfl;ksafffowqpa'wojtsafsdfsdfsdffasdfasadffatteryfggdjgdfjfhrewyysdfijhrewyysdfijsdljgjgsdklfjoweapruiweerpawesdffsafdsafasoiperwafsdlkff;lskfa;sdkfals;akfoweairpoqwererrrwwwwwwaarsdzffffaaaaaasdffgdsffgdaaffsdfearrerrrtgadtsgdfsdgsdfgdsfsgdgsdfgheaytgwajfksdjfa;ssfjoweiporujsaafjksdjflsafisdoafihwawejopqqruosajfaklsdjfgisahgiosdetjgfsd1112223\"\r\n        send(device.dev12.udp_name, msg)\r\n        send(device.dev12.udp_name, \"msg\")\r\n        send(device.dev12.udp_name, \"msg\\0\")\r\n        send(device.dev12.udp_name, \"\")\r\n        send(device.dev12.udp_name, sta)\r\n        send(device.dev12.s1, \"msg\\0\",{to_port=8000})\r\n        -- 总线连接中通过设置`to`属性标识目标设备接口\r\n        send(device.dev12.s3,msg,{to='dev11.c2'})\r\n     \r\n        -- send(device.dev12.s1, msg)\r\n        -- send(device.dev12.s3, msg)\r\n        -- send(device.dev12.s4, msg, {to_port=8000})\r\n        -- send(device.dev12.udp_name, string.buf('AA 55 E2 B3'))\r\n        -- send(device.dev2.uu2, msg)\r\n \r\n    end\r\n    \r\n}\r\n\r\nfunction entry(vars)\r\n    local filter = \"t\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_send",
                        "title": "t_send",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            },
            {
                "id": "Mr-BWEJOX-vh",
                "code": "local helper = require 'helper'\r\nlocal test = {\r\n    -- 验证uint的8的整数倍数\r\n    uint_pro = function ()\r\n        local data_send = {seg_8=127,seg_16=65535,seg_24=16777213,seg_32=4294967293}\r\n        local buf = pack(protocol.prot_12, data_send)\r\n        local data_recv = unpack(protocol.prot_12, buf)\r\n\r\n        assert\r\n            (\r\n                data_recv.seg_8 == data_send.seg_8 \r\n            and data_recv.seg_16 == data_send.seg_16 \r\n            and data_recv.seg_24 == data_send.seg_24  \r\n            and data_recv.seg_32 == data_send.seg_32\r\n            ) \r\n    end,\r\n    -- 验证unit特殊值\r\n    unit_T_pro = function ()\r\n\r\n        local data_send = {seg_1=0,seg_31=2147483639,seg_2=1,seg_30=1073741823}\r\n        local buf = pack(protocol.prot_12, data_send)\r\n        local data_recv = unpack(protocol.prot_12, buf)\r\n\r\n        assert\r\n            (\r\n                data_recv.seg_1 == 0 \r\n            and data_recv.seg_2 == data_send.seg_2 \r\n            and data_recv.seg_30 == data_send.seg_30 \r\n            and data_recv.seg_31 == data_send.seg_31 \r\n            ) \r\n    end,\r\n\r\n    -- 验证uint随机值\r\n    unit_S_pro = function ()\r\n        local data_send = {seg_15=32761,seg_17=131071,seg_14=16383,seg_18=26143}\r\n        local buf = pack(protocol.prot_12, data_send)\r\n        local data_recv = unpack(protocol.prot_12, buf)\r\n        assert(\r\n            data_recv.seg_14 == data_send.seg_14 \r\n        and data_recv.seg_15 == data_send.seg_15 \r\n        and data_recv.seg_17 == data_send.seg_17 \r\n        and data_recv.seg_18 == data_send.seg_18\r\n        ) \r\n    end,\r\n\r\n\r\n-- 验证uint随机值\r\n    unit_S_pro_int = function ()\r\n        local data_send = {seg_15=0,seg_17=1,seg_14=1,seg_18=0}\r\n        local buf = pack(protocol.prot_12, data_send)\r\n        local data_recv = unpack(protocol.prot_12, buf)\r\n        assert(\r\n            data_recv.seg_14 == data_send.seg_14 \r\n        and data_recv.seg_15 == data_send.seg_15 \r\n        and data_recv.seg_17 == data_send.seg_17 \r\n        and data_recv.seg_18 == data_send.seg_18\r\n        ) \r\n    end\r\n}\r\nfunction entry(vars)\r\n    local filter = \"u\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_uint",
                        "title": "t_uint",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            },
            {
                "id": "Sf5YuhRKEpzT",
                "code": "local helper = require 'helper'\r\nlocal test = {\r\n    test_message = function ()\r\n        local msg = message(protocol.prot_message)\r\n        msg.seg_message = 255\r\n        msg.seg_messages = {msg_string = \"wer\", msg = {\"---\", \"///\"}, uint = 18446744073709551615}\r\n        local buf = pack(msg)\r\n        local msg1 = unpack(protocol.prot_message, buf)\r\n        verify(msg1.seg_message == msg.seg_message,\"断言失败\")\r\n        verify(msg.seg_messages.uint == 18446744073709551615, \"断言失败\")\r\n        \r\n    end,\r\n    test_message1 = function ()\r\n        local msg = message(protocol.prot_message,{seg_message = 0,seg_messages={msg_string = \"$#@\", msg = {\"-*-\", \"0o=\"}, uint =0xffffffffffffffff}})\r\n        local buf = pack(msg)\r\n        local msg1 = unpack(protocol.prot_message, buf)\r\n        verify(msg1.seg_message == msg.seg_message,\"断言失败\")\r\n        verify(msg.seg_messages.uint == msg1.seg_messages.uint, \"断言失败\")\r\n        assert(msg.seg_messages.msg[1] == msg1.seg_messages.msg[1])\r\n       \r\n    end,\r\n    test_now = function ()\r\n        local t1 = now()\r\n        delay(10)\r\n        local t2 = now()\r\n        print(\"ms\",t2-t1)\r\n    end,\r\n    test_now1 = function ()\r\n        local t1 = now('us')\r\n        delay(10)\r\n        local t2 = now(\"us\")\r\n        print(\"us\",t2-t1)\r\n    \r\n    end,\r\n    test_now2 = function ()\r\n        local t1 = now('ns')\r\n        delay(10)\r\n        local t2 = now(\"ns\")\r\n        print(\"ns\",t2-t1)\r\n        \r\n    end\r\n}\r\n\r\n\r\nfunction entry(vars)\r\n    local filter = \"t\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_message_now",
                        "title": "t_message_now",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            },
            {
                "id": "LbCQU6gVAXYp",
                "code": "local helper = require 'helper'\r\nlocal test = {\r\n    t_user_ok = function ()\r\n        --提示用户进行确认\r\n        local answer1 = ask('ok',  {title='提示', msg='确认后继续'})\r\n        print(answer1) ------>'ok'\r\n    end,\r\n    t_user_yesno = function ()\r\n         --提示用户选择是与否,默认为true\r\n        local answer2 = ask('yesno',  {title='提示', msg='请回答yes或no', default=true})\r\n        print(answer2)------>true|false\r\n    end,\r\n    t_user_input_string = function ()\r\n        --提示用户输入字符串,默认是abcd\r\n        local answer3 = ask('text', {title='提示', msg='输入字符串', default='abcd'})\r\n        print(answer3)-------->'abcd'\r\n    end,\r\n    t_user_input_number = function ()\r\n        --提示用户输入数字,默认是3，\r\n        local answer4 = ask('number', {title='提示', msg='输入数字', default=3})\r\n        print(answer4)-------->3\r\n    end,\r\n    t_user_check = function ()\r\n        --提示用户选择某一项,默认第一项\r\n        local answer4 = ask('select', {title='提示', msg='请选择', default='第一项', items={'第一项','第二项', '第三项'} })\r\n        print(answer4)------------> '第一项'\r\n        \r\n    end,\r\n    t_user_state = function ()\r\n        -- 提示用户按如下指示进行操作，on是默认状态，disabled是否可以编辑\r\n        local answer5 = ask(\"multiswitch\", \r\n                {\r\n                    title = \"提示\", \r\n                    msg = \"按照以下指示进行开关操作\", \r\n                    items = {\r\n                        {\r\n                            name = \"xxx开关名称1\",\r\n                            value = \"x2-34\",\r\n                            on = true,\r\n                            disabled = true,\r\n                        }, {\r\n                            name = \"xxx开关名称2\",\r\n                            value = \"x2-35\",\r\n                            on = false,\r\n                            disabled = false,\r\n                        }\r\n                    }\r\n                }\r\n            )\r\n        print(answer5)------------> ['x2-34']\r\n    end\r\n\r\n}\r\n\r\nfunction entry(vars)\r\n    local filter = \"t\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_ask",
                        "title": "t_ask",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            },
            {
                "id": "cPOkO4LeIIhK",
                "code": "local helper = require 'helper'\r\nlocal test = {\r\n    -- 记录普通日志信息输出结果为绿色\r\n    test_info = function ()\r\n        local msg = \"记录普通日志信息输出结果为绿色\"\r\n        log.info(msg)\r\n    end,\r\n    -- 记录警告日志信息输出结果为黄色\r\n    test_warn = function ()\r\n        local msg = '记录警告日志信息输出结果为黄色'\r\n        log.warn(msg)\r\n    end,\r\n    -- 记录错误的日志信息输出结果为红色\r\n    test_error = function ()\r\n        local msg = \"记录错误的日志信息输出结果为红色\"\r\n        log.error(msg)\r\n    end,\r\n    -- 记录测试步骤信息\r\n    test_step = function ()\r\n        local msg = \"测试步骤\"\r\n        log.step(msg)\r\n    end,\r\n    -- 记录测试动作执行记录\r\n    test_action = function ()\r\n        local msg = \"记录测试动作执行记录\"\r\n        log.action(msg)\r\n    end,\r\n    -- 输出正在执行的测试信息\r\n    test_doing = function ()\r\n        local msg = \"输出正在执行的测试信息\"\r\n        log.action(msg)\r\n    end,\r\n    -- 输出检查结果的日志，第一个参数是字符串，第二个为布尔值\r\n    test_check = function ()\r\n        local msg = '检查结果日志'\r\n        log.check(msg,true)\r\n        \r\n    end\r\n}\r\nfunction entry(vars)\r\n    local filter = \"t\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_log",
                        "title": "t_log",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            },
            {
                "id": "BrtsU7avcKH_",
                "code": "local helper = require 'helper'\r\nlocal test = {\r\n    -- 处理超时定时器\r\n    \r\n    timer1 = function ()\r\n        local list = {}\r\n        local timer_id = nil\r\n        for i = 1, 500 do\r\n            local mod = math.fmod(i, 2)\r\n            if mod > 0 then\r\n                local test_out = function (data)\r\n                end\r\n                timer_id = async.timeout(1000,test_out)\r\n                table.insert(list, timer_id)\r\n            end\r\n        end\r\n        for i in pairs(list) do\r\n           async.clear(i)\r\n        end \r\n    end,\r\n}\r\n\r\nfunction entry(vars)\r\n    local filter = \"t\"\r\n    for k, t in pairs(test) do\r\n        if string.sub(k, 1, 1) == filter then\r\n            local t1 = now()\r\n            local ok, res = pcall(t, vars)\r\n            local t2 = now()\r\n            if ok then\r\n                log.info('【' .. k .. '】测试通过(' .. (t2-t1) .. 'ms)')\r\n            else\r\n                record.test_case = k\r\n                record.test_result = res\r\n                log.error('【' .. k .. '】测试失败, ' .. helper.trim_error_info(res))\r\n            end\r\n        end\r\n    end\r\n\r\n    exit()\r\nend",
                "params": [
                    {
                        "id": "t_time",
                        "title": "t_time",
                        "vars": null,
                        "option": {
                            "topology": "topo11"
                        }
                    }
                ]
            }
        ],
        "runtree": [
            {
                "id": "-15q8tHgY8FP",
                "name": "program",
                "kind": "dir",
                "children": [
                    {
                        "id": "XMdm5HvBuOJ1",
                        "name": "demo",
                        "kind": "dir",
                        "children": [
                            {
                                "id": "OCcxN1JjBGjI",
                                "kind": "lua",
                                "name": "demo1"
                            }
                        ]
                    },
                    {
                        "id": "vpF8WimxImvf",
                        "kind": "lua",
                        "name": "array"
                    },
                    {
                        "id": "x40oiU5PomDZ",
                        "kind": "lua",
                        "name": "array_string"
                    },
                    {
                        "id": "LbCQU6gVAXYp",
                        "kind": "lua",
                        "name": "ask"
                    },
                    {
                        "id": "oE63wKUEGkwj",
                        "kind": "lua",
                        "name": "bytesize"
                    },
                    {
                        "id": "Bbna3L-zHL7Y",
                        "kind": "lua",
                        "name": "checkcode"
                    },
                    {
                        "id": "2Y9gb9LTsQv9",
                        "kind": "lua",
                        "name": "code"
                    },
                    {
                        "id": "qs-9Gd2ZyW1t",
                        "kind": "lua",
                        "name": "com_"
                    },
                    {
                        "id": "2ZaJYV43vjCR",
                        "kind": "lua",
                        "name": "double"
                    },
                    {
                        "id": "LWp0OEJbMCed",
                        "kind": "lua",
                        "name": "float"
                    },
                    {
                        "id": "ZcmY1SDkQxTY",
                        "kind": "lua",
                        "name": "int"
                    },
                    {
                        "id": "cPOkO4LeIIhK",
                        "kind": "lua",
                        "name": "log"
                    },
                    {
                        "id": "Sf5YuhRKEpzT",
                        "kind": "lua",
                        "name": "message_now"
                    },
                    {
                        "id": "6Fqx3lxr6nRt",
                        "kind": "lua",
                        "name": "oneof"
                    },
                    {
                        "id": "9H_WIckUVXCk",
                        "kind": "lua",
                        "name": "recv"
                    },
                    {
                        "id": "AuhzaLR88AJi",
                        "kind": "lua",
                        "name": "send"
                    },
                    {
                        "id": "eVcfYN6VZnJt",
                        "kind": "lua",
                        "name": "string"
                    },
                    {
                        "id": "KTEIwUH7MvA7",
                        "kind": "lua",
                        "name": "t_primitive"
                    },
                    {
                        "id": "gHvkA3eZTzni",
                        "kind": "lua",
                        "name": "t_rt"
                    },
                    {
                        "id": "Y1wpDEgMTN4T",
                        "kind": "lua",
                        "name": "t_serial"
                    },
                    {
                        "id": "oBGwomAvIo-w",
                        "kind": "lua",
                        "name": "t_string"
                    },
                    {
                        "id": "haMJWlkM2UYP",
                        "kind": "lua",
                        "name": "t_tcp"
                    },
                    {
                        "id": "lkaqMl5bf8DX",
                        "kind": "lua",
                        "name": "t_timer"
                    },
                    {
                        "id": "pjhi_is6uPPq",
                        "kind": "lua",
                        "name": "t_udp"
                    },
                    {
                        "id": "BrtsU7avcKH_",
                        "kind": "lua",
                        "name": "timer"
                    },
                    {
                        "id": "Mr-BWEJOX-vh",
                        "kind": "lua",
                        "name": "uint"
                    }
                ]
            }
        ]
    }
}